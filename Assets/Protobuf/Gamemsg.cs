// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamemsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from gamemsg.proto</summary>
  public static partial class GamemsgReflection {

    #region Descriptor
    /// <summary>File descriptor for gamemsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GamemsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYW1lbXNnLnByb3RvEgJwYiI9Cg1CaW5CYXR0bGVEYXRhEg8KB3NjZW5l",
            "aWQYASABKA0SDAoEYnNpZBgCIAEoBRINCgVtYXBpZBgDIAEoDSIXCgdFeE1v",
            "bmV5EgwKBGdvbGQYASABKAUidgoPQmluRnJlcXVlbnRSb2xlEiYKC3dvcmxk",
            "YnNkYXRhGAEgASgLMhEucGIuQmluQmF0dGxlRGF0YRILCgNleHAYAiABKAQS",
            "HAoHZXhtb25leRgDIAEoCzILLnBiLkV4TW9uZXkSEAoIZXhtb25leXMYBCAD",
            "KAUidAoNQmluTm9ybWFsUm9sZRIMCgRuYW1lGAEgASgJEh8KB3NldHRpbmcY",
            "AiABKAsyDi5wYi5QbHlTZXR0aW5nEg0KBWxldmVsGAMgASgNEg4KBmNoYXJp",
            "ZBgEIAEoDRIVCg1wbGF5ZXJ2ZXJzaW9uGAUgASgNIpQBCg9DMlNfRGV2aWNl",
            "TG9naW4SCgoCaXAYASABKAkSCwoDbWFjGAIgASgJEhAKCHBhc3N3b3JkGAMg",
            "ASgJEg8KB3Bhc3NtZDUYBCABKAkSDwoHYWNjb3VudBgFIAEoCRIQCghkZXZp",
            "Y2VpZBgGIAEoCRIQCghiaW5kZmxhZxgHIAEoCRIQCghwbGF0Zm9ybRgIIAEo",
            "BSKyAQoPUzJDX0RldmljZUxvZ2luEg4KBm51bWJlchgBIAEoDRIRCgl1c2Vy",
            "Y291bnQYAiABKA0SDwoHdXNlcmlkcxgDIAEoCRIQCghiaW5kZmxhZxgEIAEo",
            "CRIRCgliaW5kZW1haWwYBSABKAkSEAoIYmluZG5pY2sYBiABKAkSFAoMZGV2",
            "aWNlZnJlZXplGAcgASgNEg8KB3Bhc3NyZXQYCCABKAUSDQoFZXJybm8YCSAB",
            "KAUiLwoKUGx5U2V0dGluZxIPCgdzZXR0aW5nGAEgASgEEhAKCHR1dG9yaWFs",
            "GAIgASgEIr8BCg5DMlNfQ3JlYXRlVXNlchIKCgJpcBgBIAEoCRIOCgZudW1i",
            "ZXIYAiABKA0SDAoEbmFtZRgDIAEoCRILCgNtYWMYBCABKAkSEAoIcGFzc3dv",
            "cmQYBSABKAkSDwoHYWNjb3VudBgGIAEoCRIQCghkZXZpY2VpZBgHIAEoCRIf",
            "CgdzZXR0aW5nGAggASgLMg4ucGIuUGx5U2V0dGluZxIOCgZjaGFyaWQYCSAB",
            "KA0SEAoIcGxhdGZvcm0YCiABKAUiWwoOUzJDX0NyZWF0ZVVzZXISDgoGcm9s",
            "ZWlkGAEgASgNEgwKBG5hbWUYAiABKAkSCwoDaWR4GAMgASgNEg0KBWVycm5v",
            "GAQgASgFEg8KB3Bhc3NyZXQYBSABKAUinAEKDEMyU19Mb2FkVXNlchIOCgZy",
            "b2xlaWQYASABKA0SDwoHdmVyc2lvbhgCIAEoDRIQCghzdmVyc2lvbhgDIAEo",
            "DRIOCgZudW1iZXIYBCABKA0SEAoIZGV2aWNlaWQYBSABKAkSEAoIZnZlcnNp",
            "b24YBiABKA0SEAoIbnZlcnNpb24YByABKA0SEwoLcmVjb25udG9rZW4YCCAB",
            "KAkixgEKDFMyQ19Mb2FkVXNlchINCgVlcnJubxgBIAEoBRIlCghmcmVxdWVu",
            "dBgCIAEoCzITLnBiLkJpbkZyZXF1ZW50Um9sZRIhCgZub3JtYWwYAyABKAsy",
            "ES5wYi5CaW5Ob3JtYWxSb2xlEhMKC3B1Ym12ZXJzaW9uGAQgASgNEhAKCHNl",
            "cnZlcmlkGAUgASgNEhIKCnNlcnZlcnRpbWUYBiABKAMSEAoIZnZlcnNpb24Y",
            "ByABKA0SEAoIbnZlcnNpb24YCCABKA0iawoKR3NSb29tSW5mbxIOCgZyb29t",
            "aWQYASABKAQSDQoFb3duZXIYAiABKA0SDQoFbWFwaWQYAyABKAUSDwoHdmVy",
            "c2lvbhgEIAEoAxIOCgZtYXhudW0YBSABKA0SDgoGZ3JwbWVtGAYgASgNInsK",
            "DEdzUm9vbU1lbWJlchIOCgZyb2xlaWQYASABKA0SDAoEbmFtZRgCIAEoCRIN",
            "CgVncnBpZBgDIAEoDRILCgNwb3MYBCABKA0SDQoFcmVhZHkYBSABKAgSEQoJ",
            "b3BlcmF0aW9uGAYgASgNEg8KB2lzcm9ib3QYByABKAgiTgoOQzJTX0NyZWF0",
            "ZVJvb20SDQoFbWFwaWQYASABKAUSDAoEbmFtZRgCIAEoCRIPCgd2ZXJzaW9u",
            "GAMgASgDEg4KBmdycG1lbRgEIAEoDSJqChFTMkNfQ3JlYXRlUm9vbVJldBIN",
            "CgVlcnJubxgBIAEoBRIgCghyb29taW5mbxgCIAEoCzIOLnBiLkdzUm9vbUlu",
            "Zm8SJAoKcm9vbW1lbWJlchgDIAMoCzIQLnBiLkdzUm9vbU1lbWJlciI9CgxD",
            "MlNfSm9pblJvb20SDAoEbmFtZRgBIAEoCRIPCgd2ZXJzaW9uGAIgASgDEg4K",
            "BnJvb21pZBgDIAEoBCJoCg9TMkNfSm9pblJvb21SZXQSDQoFZXJybm8YASAB",
            "KAUSIAoIcm9vbWluZm8YAiABKAsyDi5wYi5Hc1Jvb21JbmZvEiQKCnJvb21t",
            "ZW1iZXIYAyADKAsyEC5wYi5Hc1Jvb21NZW1iZXIiDwoNQzJTX0xlYXZlUm9v",
            "bSIhChBTMkNfTGVhdmVSb29tUmV0Eg0KBWVycm5vGAEgASgFIlgKDlMyQ19S",
            "b29tVXBkYXRlEiAKCHJvb21pbmZvGAEgASgLMg4ucGIuR3NSb29tSW5mbxIk",
            "Cgpyb29tbWVtYmVyGAIgAygLMhAucGIuR3NSb29tTWVtYmVyIh4KDUMyU19S",
            "b29tUmVhZHkSDQoFcmVhZHkYASABKAgiMAoQUzJDX1Jvb21SZWFkeVJldBIN",
            "CgVlcnJubxgBIAEoBRINCgVyZWFkeRgCIAEoCCIgChFDMlNfUm9vbUNoYW5n",
            "ZVBvcxILCgNwb3MYASABKA0iNQoUUzJDX1Jvb21DaGFuZ2VQb3NSZXQSDQoF",
            "ZXJybm8YASABKAUSDgoGbmV3cG9zGAIgASgNIiIKEUMyU19Sb29tQ2hhbmdl",
            "TWFwEg0KBW1hcGlkGAEgASgNIjQKFFMyQ19Sb29tQ2hhbmdlTWFwUmV0Eg0K",
            "BWVycm5vGAEgASgFEg0KBW1hcGlkGAIgASgNIhMKEUMyU19TdGFydFJvb21H",
            "YW1lImMKEVMyQ19TdGFydFJvb21HYW1lEg8KB3NjZW5laWQYASABKA0SDAoE",
            "YnNpZBgCIAEoBRINCgVtYXBpZBgDIAEoDRINCgVlcnJubxgEIAEoBRIRCglz",
            "dGFydHR5cGUYBSABKA0iUAoQQzJTX0F1dG9Kb2luUm9vbRINCgVtYXBpZBgB",
            "IAEoBRIMCgRuYW1lGAIgASgJEg8KB3ZlcnNpb24YAyABKAMSDgoGZ3JwbWVt",
            "GAQgASgNImwKE1MyQ19BdXRvSm9pblJvb21SZXQSDQoFZXJybm8YASABKAUS",
            "IAoIcm9vbWluZm8YAiABKAsyDi5wYi5Hc1Jvb21JbmZvEiQKCnJvb21tZW1i",
            "ZXIYAyADKAsyEC5wYi5Hc1Jvb21NZW1iZXIiUgoSQzJTX0F1dG9Kb2luQ1NS",
            "b29tEg0KBW1hcGlkGAEgASgFEgwKBG5hbWUYAiABKAkSDwoHdmVyc2lvbhgD",
            "IAEoAxIOCgZncnBudW0YBCABKA0iIgoQQzJTX1Jvb21LaWNrVXNlchIOCgZr",
            "aWNrZWQYASABKA0ibAoTUzJDX1Jvb21LaWNrVXNlclJldBINCgVlcnJubxgB",
            "IAEoBRIgCghyb29taW5mbxgCIAEoCzIOLnBiLkdzUm9vbUluZm8SJAoKcm9v",
            "bW1lbWJlchgDIAMoCzIQLnBiLkdzUm9vbU1lbWJlciISChBTMkNfUm9vbUJl",
            "S2lja2VkIhIKEEMyU19Sb29tQWRkUm9ib3QiMQoQUzJDX1Jvb21BZGRSb2Jv",
            "dBINCgVlcnJubxgBIAEoBRIOCgZyb2xlaWQYAiABKA0iJQoTQzJTX1Jvb21S",
            "ZW1vdmVSb2JvdBIOCgZyb2xlaWQYASABKA0iJAoTUzJDX1Jvb21SZW1vdmVS",
            "b2JvdBINCgVlcnJubxgBIAEoBSITChFDMlNfUm9vbUZ1bGxSb2JvdCIiChFT",
            "MkNfUm9vbUZ1bGxSb2JvdBINCgVlcnJubxgBIAEoBSKHAgoUQzJTX0JhdFF1",
            "ZU1hdGNoRW50ZXISDQoFbWFwaWQYASABKA0SEAoIdGVhbW1vZGUYAiABKA0S",
            "JgoIZWxlbXR5cGUYAyABKA4yFC5wYi5CYXRNYXRjaEVsZW1UeXBlEiYKCGFk",
            "ZHRlYW1yGAQgASgOMhQucGIuUFVCR0FkZFRlYW1yVHlwZRIRCglvbmx5cm9i",
            "b3QYBSABKAgSJgoIc3RyYXRlZ3kYBiABKA4yFC5wYi5CYXRNYXRjaFN0cmF0",
            "ZWd5EhAKCHNjaGVtZWlkGAcgASgNEhAKCHBvaW50bnVtGAggASgNEg0KBWdy",
            "YWRlGAkgASgNEhAKCHNwYXJyaW5nGAogASgIIlIKFFMyQ19CYXRRdWVNYXRj",
            "aEVudGVyEisKCWVudGVyaW5mbxgBIAEoCzIYLnBiLkMyU19CYXRRdWVNYXRj",
            "aEVudGVyEg0KBWVycm5vGAIgASgFIhYKFEMyU19CYXRRdWVNYXRjaExlYXZl",
            "Ik0KFFMyQ19CYXRRdWVNYXRjaExlYXZlEg0KBWVycm5vGAEgASgFEhEKCXNy",
            "Y3JvbGVpZBgCIAEoDRITCgtzcmNyb2xlbmFtZRgDIAEoCSIVChNDMlNfQmF0",
            "UXVlTWF0Y2hJbmZvIqYBChNTMkNfQmF0UXVlTWF0Y2hJbmZvEg8KB2lubWF0",
            "Y2gYASABKAgSKwoJZW50ZXJpbmZvGAIgASgLMhgucGIuQzJTX0JhdFF1ZU1h",
            "dGNoRW50ZXISEwoLcXVldWVwbHludW0YAyABKAUSEgoKbmVlZG1heHBseRgE",
            "IAEoBRISCgp3YWl0c2Vjb25kGAUgASgFEhQKDGFpb3BlbnNlY29uZBgGIAEo",
            "BSIqChZDMlNfQmF0UXVlTWF0Y2hQcmVJbmZvEhAKCHRlYW1tb2RlGAEgASgN",
            "IicKFkMyU19CYXRRdWVNYXRjaFF1ZUluZm8SDQoFbWFwaWQYASABKA0imgEK",
            "FlMyQ19CYXRRdWVNYXRjaFF1ZUluZm8SDQoFbWFwaWQYASABKA0SLgoFaW5m",
            "b3MYAiADKAsyHy5wYi5TMkNfQmF0UXVlTWF0Y2hRdWVJbmZvLk1vZGUaQQoE",
            "TW9kZRIQCgh0ZWFtbW9kZRgBIAEoDRITCgtxdWV1ZXBseW51bRgCIAEoBRIS",
            "CgpuZWVkbWF4cGx5GAMgASgFImwKDEMyU19BY2N0QmluZBIKCgJpcBgBIAEo",
            "CRINCgVlbWFpbBgCIAEoCRIQCghwYXNzd29yZBgDIAEoCRIMCgRuaWNrGAQg",
            "ASgJEg8KB3Bhc3NtZDUYBSABKAkSEAoIYmluZHR5cGUYBiABKAkiMAoMUzJD",
            "X0FjY3RCaW5kEg0KBWVycm5vGAEgASgFEhEKCWR5dG51bWJlchgCIAEoBSJh",
            "Cg9DMlNfR2V0QWNjdEluZm8SCgoCaXAYASABKAkSDQoFZW1haWwYAiABKAkS",
            "EAoIcGFzc3dvcmQYAyABKAkSDwoHcGFzc21kNRgEIAEoCRIQCghiaW5kdHlw",
            "ZRgFIAEoCSJpCg9TMkNfR2V0QWNjdEluZm8SDQoFZXJybm8YASABKAUSDgoG",
            "bnVtYmVyGAIgASgJEg8KB2FjY291bnQYAyABKAkSEAoIcGFzc3dvcmQYBCAB",
            "KAkSFAoMbnVtYmVyX3RhZ2V0GAUgASgJIi0KDkMyU19Vc2VyUmVuYW1lEgoK",
            "AmlwGAEgASgJEg8KB25ld25hbWUYAiABKAkiUQoOUzJDX1VzZXJSZW5hbWUS",
            "DwoHbmV3bmFtZRgBIAEoCRILCgNpZHgYAiABKA0SEgoKcmVsYXRlbmFtZRgD",
            "IAEoCRINCgVlcnJubxgEIAEoBSJICg1DMlNfR01Db21tYW5kEgsKA2NtZBgB",
            "IAEoCRIOCgZyb2xlaWQYAiABKA0SCwoDZWlkGAMgASgEEg0KBWJzY21kGAQg",
            "ASgIIh8KEFMyQ19HTUNvbW1hbmRSZXQSCwoDcmV0GAEgASgFIkYKD1MyQ19H",
            "TVJlbG9hZFJldBINCgVlcnJubxgBIAEoBRIQCghmaWxlbmFtZRgCIAEoCRIS",
            "CgpzZXJ2ZXJuYW1lGAMgASgJIjQKEUMyU19QbGF5ZXJTZXR0aW5nEh8KB3Nl",
            "dHRpbmcYASABKAsyDi5wYi5QbHlTZXR0aW5nIiMKEEMyU19Db25maXJtUmVj",
            "b24SDwoHY29uZmlybRgBIAEoCCIhChBTMkNfQ29uZmlybVJlY29uEg0KBWVy",
            "cm5vGAEgASgFIhAKDkMyU19RdWVyeVNjZW5lIh8KDlMyQ19RdWVyeVNjZW5l",
            "Eg0KBWVycm5vGAEgASgFIjkKCUFwcGx5SW5mbxIOCgZyb2xlaWQYASABKA0S",
            "DAoEbmFtZRgCIAEoCRIOCgZyZWFzb24YAyABKAkiLwoNQzJTX0ZyaWVuZEFk",
            "ZBIOCgZyb2xlaWQYASABKA0SDgoGcmVhc29uGAIgASgJIlAKDVMyQ19Gcmll",
            "bmRBZGQSDQoFZXJybm8YASABKAUSDgoGcm9sZWlkGAIgASgNEiAKCWFwcGx5",
            "aW5mbxgDIAEoCzINLnBiLkFwcGx5SW5mbyIPCg1DMlNfQXBwbHlsaXN0Ij8K",
            "DVMyQ19BcHBseWxpc3QSDQoFZXJybm8YASABKAUSHwoIbGlzdGRhdGEYAiAD",
            "KAsyDS5wYi5BcHBseUluZm8iIgoQQzJTX0ZyaWVuZEFjY2VwdBIOCgZyb2xl",
            "aWQYASABKA0ijwEKEFMyQ19GcmllbmRBY2NlcHQSDQoFZXJybm8YASABKAUS",
            "DQoFc3JjaWQYAiABKA0SDAoEbmFtZRgDIAEoCRIOCgZvbmxpbmUYBCABKAgS",
            "DgoGZGVzdGlkGAUgASgNEg4KBnJvb21pZBgGIAEoBBIOCgZ0ZWFtaWQYByAB",
            "KAQSDwoHc2NlbmVpZBgIIAEoDSIiChBDMlNfRnJpZW5kUmVmdXNlEg4KBnJv",
            "bGVpZBgBIAEoDSI/ChBTMkNfRnJpZW5kUmVmdXNlEg0KBWVycm5vGAEgASgF",
            "Eg4KBnJvbGVpZBgCIAEoDRIMCgRuYW1lGAMgASgJIh8KDUMyU19GcmllbmRE",
            "ZWwSDgoGcm9sZWlkGAEgASgNIj0KDVMyQ19GcmllbmREZWwSDQoFZXJybm8Y",
            "ASABKAUSDQoFc3JjaWQYAiABKA0SDgoGZGVzdGlkGAMgASgNIikKCVF1ZXJ5",
            "SW5mbxIOCgZyb2xlaWQYASABKA0SDAoEbmFtZRgCIAEoCSIuCg5DMlNfRnJp",
            "ZW5kRmluZBIOCgZyb2xlaWQYASABKA0SDAoEbmFtZRgCIAEoCSJBCg5TMkNf",
            "RnJpZW5kRmluZBINCgVlcnJubxgBIAEoBRIgCglxdWVyeWluZm8YAiADKAsy",
            "DS5wYi5RdWVyeUluZm8iawoKRnJpZW5kSW5mbxIOCgZyb2xlaWQYASABKA0S",
            "DAoEbmFtZRgCIAEoCRIOCgZvbmxpbmUYAyABKAgSDgoGcm9vbWlkGAQgASgE",
            "Eg4KBnRlYW1pZBgFIAEoBBIPCgdzY2VuZWlkGAYgASgNIhAKDkMyU19Gcmll",
            "bmRMaXN0IkMKDlMyQ19GcmllbmRMaXN0Eg0KBWVycm5vGAEgASgFEiIKCmZy",
            "aWVuZGluZm8YAiADKAsyDi5wYi5GcmllbmRJbmZvIjYKEFMyQ19GcmllbmRV",
            "cGRhdGUSIgoKZnJpZW5kaW5mbxgBIAEoCzIOLnBiLkZyaWVuZEluZm8iLwoP",
            "QzJTX1JlcXVlc3RUZWFtEg4KBnJvbGVpZBgBIAEoDRIMCgRuYW1lGAIgASgJ",
            "InMKD1MyQ19SZXF1ZXN0VGVhbRINCgVlcnJubxgBIAEoBRIPCgdyZXF1ZXN0",
            "GAIgASgNEg4KBnRlYW1pZBgDIAEoBBIMCgRuYW1lGAQgASgJEg4KBnJvbGVp",
            "ZBgFIAEoDRISCgpkZXN0Y2hhcmlkGAYgASgNIjEKDkMyU19BY2NlcHRUZWFt",
            "Eg4KBnRlYW1pZBgBIAEoBBIPCgdyZXF1ZXN0GAIgASgNIkAKDlMyQ19BY2Nl",
            "cHRUZWFtEg0KBWVycm5vGAEgASgFEg4KBnJvbGVpZBgCIAEoDRIPCgdyZXF1",
            "ZXN0GAMgASgNIg8KDUMyU19MZWF2ZVRlYW0iLgoNUzJDX0xlYXZlVGVhbRIN",
            "CgVlcnJubxgBIAEoBRIOCgZyb2xlaWQYAiABKA0iHgoMQzJTX0tpY2tUZWFt",
            "Eg4KBnJvbGVpZBgBIAEoDSJLCgxTMkNfS2lja1RlYW0SDQoFZXJybm8YASAB",
            "KAUSDgoGa2lja2VyGAIgASgNEgwKBG5hbWUYAyABKAkSDgoGcm9sZWlkGAQg",
            "ASgNIh4KDUMyU19UZWFtUmVhZHkSDQoFcmVhZHkYASABKAgiHgoNUzJDX1Rl",
            "YW1SZWFkeRINCgVlcnJubxgBIAEoBSIxCg5DMlNfVGVhbVJlZnVzZRIOCgZ0",
            "ZWFtaWQYASABKAQSDwoHcmVxdWVzdBgCIAEoDSJOCg5TMkNfVGVhbVJlZnVz",
            "ZRINCgVlcnJubxgBIAEoBRIOCgZyb2xlaWQYAiABKA0SDAoEbmFtZRgDIAEo",
            "CRIPCgdyZXF1ZXN0GAQgASgNIiAKDkMyU19UZWFtQ2FuY2VsEg4KBnJvbGVp",
            "ZBgBIAEoDSJQCg5TMkNfVGVhbUNhbmNlbBINCgVlcnJubxgBIAEoBRIOCgZy",
            "b2xlaWQYAiABKA0SDgoGdGVhbWlkGAMgASgEEg8KB3JlcXVlc3QYBCABKA0i",
            "TgoKR3NUZWFtSW5mbxIOCgZ0ZWFtaWQYASABKAQSDQoFb3duZXIYAiABKA0S",
            "DgoGbWF4bnVtGAMgASgNEhEKCW1hdGNobW9kZRgEIAEoDSKJAQoMR3NUZWFt",
            "TWVtYmVyEg4KBnJvbGVpZBgBIAEoDRIMCgRuYW1lGAIgASgJEgsKA3BvcxgD",
            "IAEoDRIOCgZhY2NlcHQYBCABKAgSDQoFcmVhZHkYBSABKAgSDwoHcmVxdWVz",
            "dBgGIAEoDRIOCgZsb2dvdXQYByABKAgSDgoGY2hhcmlkGAggASgNIlIKDlMy",
            "Q19UZWFtVXBkYXRlEh0KBWluZm9zGAEgASgLMg4ucGIuR3NUZWFtSW5mbxIh",
            "CgdtZW1iZXJzGAIgAygLMhAucGIuR3NUZWFtTWVtYmVyIiMKEUMyU19VcGdy",
            "YWRlTGVhZGVyEg4KBnJvbGVpZBgBIAEoDSIiChFTMkNfVXBncmFkZUxlYWRl",
            "chINCgVlcnJubxgBIAEoBSIgCg9TMkNfUmVsb2FkSW50ZXISDQoFZXJybm8Y",
            "ASABKAUiJQoTQzJTX0NoYW5nZUNoYXJhY3RlchIOCgZjaGFyaWQYASABKA0i",
            "NAoTUzJDX0NoYW5nZUNoYXJhY3RlchINCgVlcnJubxgBIAEoBRIOCgZjaGFy",
            "aWQYAiABKA0iHwoMQzJTX0VjaG9UZXN0Eg8KB3Rlc3RzdHIYASABKAwiHwoM",
            "UzJDX0VjaG9UZXN0Eg8KB3Rlc3RzdHIYASABKAwiNAoIQzJTX0NoYXQSGgoE",
            "dHlwZRgBIAEoDjIMLnBiLkNoYXRUeXBlEgwKBGRhdGEYAiABKAkiYQoIUzJD",
            "X0NoYXQSDgoGc2VuZGVyGAEgASgNEgwKBG5hbWUYAiABKAkSGgoEdHlwZRgD",
            "IAEoDjIMLnBiLkNoYXRUeXBlEgwKBGRhdGEYBCABKAkSDQoFZXJybm8YBSAB",
            "KAUiLgoOQzJTX0ZyaWVuZENoYXQSDgoGZGVzdGlkGAEgASgNEgwKBGRhdGEY",
            "AiABKAkiEwoRQzJTX1B1bGxGcmllbmRNc2cimAEKDVMyQ19GcmllbmRNc2cS",
            "LAoGYWxsbXNnGAEgAygLMhwucGIuUzJDX0ZyaWVuZE1zZy5PbmVNZXNzYWdl",
            "Eg0KBWVycm5vGAIgASgFGkoKCk9uZU1lc3NhZ2USDgoGc2VuZGVyGAEgASgN",
            "EgwKBG5hbWUYAiABKAkSEAoIc2VuZHRpbWUYAyABKAMSDAoEZGF0YRgEIAEo",
            "CSKeAQoTQ2hlY2tQb2ludE9uZUNob2ljZRIOCgZlbGVtaWQYASABKA0SDQoF",
            "bWFwaWQYAiABKA0SDQoFZ3JhZGUYAyABKA0SDwoHcXVldHlwZRgEIAEoDRIO",
            "CgZpc25leHQYBSABKAgSEwoLY2hvb3NldGVhbXIYBiADKA0SEQoJb3Blbmxp",
            "bWl0GAcgASgNEhAKCHJld2FyZGlkGAggASgNIjgKFUNoZWNrUG9pbnRDaG9p",
            "Y2VzUm9sZRIOCgZyb2xlaWQYASABKA0SDwoHZ29sZG51bRgCIAEoBSLEAgoV",
            "UzJDX0NoZWNrUG9pbnRDaG9pY2VzEigKB2Nob2ljZXMYASADKAsyFy5wYi5D",
            "aGVja1BvaW50T25lQ2hvaWNlEhAKCHNjaGVtZWlkGAIgASgNEhAKCHBvaW50",
            "bnVtGAMgASgNEhEKCWVuZHNlY29uZBgEIAEoAxIOCgZjb2xsaWQYBSABKAQS",
            "DgoGZnJvbWdzGAYgASgNEhIKCm1heGZhaWxudW0YByABKAUSEgoKbm93ZmFp",
            "bG51bRgIIAEoBRITCgttYXhwb2ludG51bRgJIAEoBRIUCgxtYXhmaW5pc2hu",
            "dW0YCiABKAUSFAoMbm93ZmluaXNobnVtGAsgASgFEisKCHJvbGVpbmZvGAwg",
            "AygLMhkucGIuQ2hlY2tQb2ludENob2ljZXNSb2xlEhQKDGFsbGZpbmlzaG51",
            "bRgNIAEoBSJGChRDMlNfQ2hlY2tQb2ludENob29zZRIOCgZlbGVtaWQYASAB",
            "KA0SDgoGY29sbGlkGAIgASgEEg4KBmZyb21ncxgDIAEoDSJ4ChRTMkNfQ2hl",
            "Y2tQb2ludFJlc3VsdBInCgZjaG9pY2UYASADKAsyFy5wYi5DaGVja1BvaW50",
            "T25lQ2hvaWNlEhAKCHNjaGVtZWlkGAIgASgNEhAKCHBvaW50bnVtGAMgASgN",
            "EhMKC2ZpbmFsZWxlbWlkGAQgASgFIsMBChJDaGVja1BvaW50SW5pdENoYXIS",
            "DgoGY2hhcmlkGAEgASgNEgoKAmhwGAIgASgFEg4KBnNoaWVsZBgDIAEoBRIN",
            "CgVzcGVlZBgEIAEoAhIUCgxmaW5lZmVhdHVyZXMYBSADKA0SEwoLYmFkZmVh",
            "dHVyZXMYBiADKA0SEgoKaW5pdHdlYXBvbhgHIAMoDRIQCghkZWZza2lsbBgI",
            "IAMoDRIOCgZlbmVyZ3kYCSABKAUSEQoJZW5lcmd5bWF4GAogASgFInYKGFMy",
            "Q19DaGVja1BvaW50Q2hhckNob2ljZRInCgdjaG9pY2VzGAEgAygLMhYucGIu",
            "Q2hlY2tQb2ludEluaXRDaGFyEhEKCWVuZHNlY29uZBgCIAEoAxIOCgZjb2xs",
            "aWQYAyABKAQSDgoGZnJvbWdzGAQgASgNIkoKGEMyU19DaGVja1BvaW50Q2hh",
            "ckNob2ljZRIOCgZjaGFyaWQYASABKA0SDgoGY29sbGlkGAIgASgEEg4KBmZy",
            "b21ncxgDIAEoDSJIChZDMlNfQ2hlY2tQb2ludENoYXJTY2FuEg4KBmNoYXJp",
            "ZBgBIAEoDRIOCgZjb2xsaWQYAiABKAQSDgoGZnJvbWdzGAMgASgNIl8KFlMy",
            "Q19DaGVja1BvaW50Q2hhckluZm8SDgoGcm9sZWlkGAEgASgNEiQKBGluZm8Y",
            "AiABKAsyFi5wYi5DaGVja1BvaW50SW5pdENoYXISDwoHY29uZmlybRgDIAEo",
            "CCI7ChFTMkNfQ29tZUJhY2tXb3JsZBImCgt3b3JsZGJzZGF0YRgBIAEoCzIR",
            "LnBiLkJpbkJhdHRsZURhdGEq7A4KA01TRxIMCghNU0dfTm9uZRAAEhQKD01T",
            "R19EZXZpY2VMb2dpbhDoBxITCg5NU0dfQ3JlYXRlVXNlchDpBxIRCgxNU0df",
            "TG9hZFVzZXIQ6gcSEwoOTVNHX1VzZXJSZW5hbWUQ6wcSEQoMTVNHX0FjY3RC",
            "aW5kEOwHEhQKD01TR19HZXRBY2N0SW5mbxDtBxIOCglNU0dfR01DTUQQ7gcS",
            "FgoRTVNHX1BsYXllclNldHRpbmcQ7wcSFQoQTVNHX0NvbmZpcm1SZWNvbhDw",
            "BxITCg5NU0dfUXVlcnlTY2VuZRDxBxIUCg9NU0dfR01SZWxvYWRSZXQQ8gcS",
            "FAoPTVNHX1JlbG9hZEludGVyEPMHEhgKE01TR19DaGFuZ2VDaGFyYWN0ZXIQ",
            "9AcSEQoMTVNHX0VjaG9UZXN0EPUHEg0KCE1TR19DaGF0EPYHEhMKDk1TR19D",
            "cmVhdGVSb29tEMwIEhEKDE1TR19Kb2luUm9vbRDNCBISCg1NU0dfTGVhdmVS",
            "b29tEM4IEhMKDk1TR19Sb29tVXBkYXRlEM8IEhIKDU1TR19Sb29tUmVhZHkQ",
            "0AgSFgoRTVNHX1Jvb21DaGFuZ2VQb3MQ0QgSFgoRTVNHX1N0YXJ0Um9vbUdh",
            "bWUQ0ggSFQoQTVNHX0F1dG9Kb2luUm9vbRDTCBIWChFNU0dfUm9vbUNoYW5n",
            "ZU1hcBDUCBIVChBNU0dfUm9vbUtpY2tVc2VyENUIEhUKEE1TR19Sb29tQmVL",
            "aWNrZWQQ1ggSFQoQTVNHX1Jvb21BZGRSb2JvdBDXCBIYChNNU0dfUm9vbVJl",
            "bW92ZVJvYm90ENgIEhYKEU1TR19Sb29tRnVsbFJvYm90ENkIEhcKEk1TR19B",
            "dXRvSm9pbkNTUm9vbRDaCBIZChRNU0dfQmF0UXVlTWF0Y2hFbnRlchD+CBIZ",
            "ChRNU0dfQmF0UXVlTWF0Y2hMZWF2ZRD/CBIYChNNU0dfQmF0UXVlTWF0Y2hJ",
            "bmZvEIAJEhsKFk1TR19CYXRRdWVNYXRjaFByZUluZm8QgQkSGwoWTVNHX0Jh",
            "dFF1ZU1hdGNoUXVlSW5mbxCCCRISCg1NU0dfRnJpZW5kQWRkELAJEhIKDU1T",
            "R19BcHBseUxpc3QQsQkSFQoQTVNHX0ZyaWVuZEFjY2VwdBCyCRIVChBNU0df",
            "RnJpZW5kUmVmdXNlELMJEhIKDU1TR19GcmllbmREZWwQtAkSEwoOTVNHX0Zy",
            "aWVuZEZpbmQQtQkSEwoOTVNHX0ZyaWVuZExpc3QQtgkSFQoQTVNHX0ZyaWVu",
            "ZFVwZGF0ZRC3CRITCg5NU0dfRnJpZW5kQ2hhdBC4CRIWChFNU0dfUHVsbEZy",
            "aWVuZE1zZxC5CRIUCg9NU0dfVGVhbVJlcXVlc3QQ4gkSEwoOTVNHX1RlYW1B",
            "Y2NlcHQQ4wkSEgoNTVNHX0xlYXZlVGVhbRDkCRIRCgxNU0dfVGVhbUtpY2sQ",
            "5QkSEwoOTVNHX1RlYW1VcGRhdGUQ5gkSEgoNTVNHX1RlYW1SZWFkeRDnCRIT",
            "Cg5NU0dfVGVhbVJlZnVzZRDoCRITCg5NU0dfVGVhbUNhbmNlbBDpCRIWChFN",
            "U0dfVXBncmFkZUxlYWRlchDqCRIUCg9NU0dfQmF0dGxlTG9naW4Q0A8SFAoP",
            "TVNHX0JhdHRsZUZyYW1lENEPEhgKE01TR19FbnRpdHlEaXNBcHBlYXIQ0g8S",
            "FAoPTVNHX0dhbWVMb2FkaW5nENMPEhIKDU1TR19HYW1lU3RhcnQQ1A8SEAoL",
            "TVNHX0dhbWVFbmQQ1Q8SFwoSTVNHX1BsYXllclF1aXRHYW1lENYPEhMKDk1T",
            "R19TZXR0bGVtZW50ENcPEhMKDk1TR19CYXR0bGVDaGF0ENgPEhgKE01TR19C",
            "YXR0bGVSZWNvbm5lY3QQ2Q8SDgoJTVNHX1dhdGNoENoPEhgKE01TR19CYXR0",
            "bGVBbGxQbGF5ZXIQ2w8SFQoQTVNHX1JlcGxhY2VFcXVpcBDcDxIVChBNU0df",
            "U3VwcGx5U2VsZWN0EN0PEhMKDk1TR19TaW5nbGVWb3RlEN4PEhkKFE1TR19D",
            "aGVja1BvaW50Q2hvaWNlEN8PEhkKFE1TR19DaGVja1BvaW50UmVzdWx0EOAP",
            "Eh0KGE1TR19DaGVja1BvaW50Q2hhckNob2ljZRDhDxIbChZNU0dfQ2hlY2tQ",
            "b2ludENoYXJJbmZvEOIPEhMKDk1TR19Wb3RlUmVzdWx0EOMPEhAKC01TR19C",
            "dXlJdGVtEOQPEhUKEE1TR19FbnRlclB2UFZvdGUQ5Q8SFgoRTVNHX0NvbWVC",
            "YWNrV29ybGQQ5g8SFgoRTVNHX1B2UENoYXJDaG9pY2UQ5w8SEgoNTVNHX0l0",
            "ZW1FcnJvchDoDxIVChBNU0dfVGFsZW50Q2hvb3NlEOkPEhgKE01TR19BZGRB",
            "dWRpb0NoYW5uZWwQuBcSGgoVTVNHX0VudGVyQXVkaW9DaGFubmVsELkXEhAK",
            "C01TR19BbGxEb0dNEIknEg0KCE1TR19UZXN0EPEuKkoKDVN0YXJ0R2FtZVR5",
            "cGUSEAoMU3RhcnRCeU1hdGNoEAASDwoLU3RhcnRCeVJvb20QARIWChJTdGFy",
            "dEJ5U3VwcGx5TWF0Y2gQAioyChBCYXRNYXRjaEVsZW1UeXBlEg8KC0JNRVRf",
            "UGVyc29uEAASDQoJQk1FVF9UZWFtEAEqUgoQUFVCR0FkZFRlYW1yVHlwZRIT",
            "Cg9QVUJHX0FUVF9DYW5BZGQQABITCg9QVUJHX0FUVF9Ob3RBZGQQARIUChBQ",
            "VUJHX0FUVF9NdXN0QWRkEAIqNAoQQmF0TWF0Y2hTdHJhdGVneRIMCghCTVNf",
            "UFVCRxAAEhIKDkJNU19DaGVja1BvaW50EAEqXQoIQ2hhdFR5cGUSCwoHQ1Rf",
            "Tm9uZRAAEgsKB0NUX1RlYW0QARILCgdDVF9Sb29tEAISDAoIQ1RfV29ybGQQ",
            "AxINCglDVF9CYXR0bGUQBBINCglDVF9GcmllbmQQBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pb.MSG), typeof(global::Pb.StartGameType), typeof(global::Pb.BatMatchElemType), typeof(global::Pb.PUBGAddTeamrType), typeof(global::Pb.BatMatchStrategy), typeof(global::Pb.ChatType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.BinBattleData), global::Pb.BinBattleData.Parser, new[]{ "Sceneid", "Bsid", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ExMoney), global::Pb.ExMoney.Parser, new[]{ "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.BinFrequentRole), global::Pb.BinFrequentRole.Parser, new[]{ "Worldbsdata", "Exp", "Exmoney", "Exmoneys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.BinNormalRole), global::Pb.BinNormalRole.Parser, new[]{ "Name", "Setting", "Level", "Charid", "Playerversion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_DeviceLogin), global::Pb.C2S_DeviceLogin.Parser, new[]{ "Ip", "Mac", "Password", "Passmd5", "Account", "Deviceid", "Bindflag", "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_DeviceLogin), global::Pb.S2C_DeviceLogin.Parser, new[]{ "Number", "Usercount", "Userids", "Bindflag", "Bindemail", "Bindnick", "Devicefreeze", "Passret", "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.PlySetting), global::Pb.PlySetting.Parser, new[]{ "Setting", "Tutorial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_CreateUser), global::Pb.C2S_CreateUser.Parser, new[]{ "Ip", "Number", "Name", "Mac", "Password", "Account", "Deviceid", "Setting", "Charid", "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_CreateUser), global::Pb.S2C_CreateUser.Parser, new[]{ "Roleid", "Name", "Idx", "Errno", "Passret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_LoadUser), global::Pb.C2S_LoadUser.Parser, new[]{ "Roleid", "Version", "Sversion", "Number", "Deviceid", "Fversion", "Nversion", "Reconntoken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_LoadUser), global::Pb.S2C_LoadUser.Parser, new[]{ "Errno", "Frequent", "Normal", "Pubmversion", "Serverid", "Servertime", "Fversion", "Nversion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.GsRoomInfo), global::Pb.GsRoomInfo.Parser, new[]{ "Roomid", "Owner", "Mapid", "Version", "Maxnum", "Grpmem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.GsRoomMember), global::Pb.GsRoomMember.Parser, new[]{ "Roleid", "Name", "Grpid", "Pos", "Ready", "Operation", "Isrobot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_CreateRoom), global::Pb.C2S_CreateRoom.Parser, new[]{ "Mapid", "Name", "Version", "Grpmem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_CreateRoomRet), global::Pb.S2C_CreateRoomRet.Parser, new[]{ "Errno", "Roominfo", "Roommember" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_JoinRoom), global::Pb.C2S_JoinRoom.Parser, new[]{ "Name", "Version", "Roomid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_JoinRoomRet), global::Pb.S2C_JoinRoomRet.Parser, new[]{ "Errno", "Roominfo", "Roommember" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_LeaveRoom), global::Pb.C2S_LeaveRoom.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_LeaveRoomRet), global::Pb.S2C_LeaveRoomRet.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomUpdate), global::Pb.S2C_RoomUpdate.Parser, new[]{ "Roominfo", "Roommember" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomReady), global::Pb.C2S_RoomReady.Parser, new[]{ "Ready" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomReadyRet), global::Pb.S2C_RoomReadyRet.Parser, new[]{ "Errno", "Ready" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomChangePos), global::Pb.C2S_RoomChangePos.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomChangePosRet), global::Pb.S2C_RoomChangePosRet.Parser, new[]{ "Errno", "Newpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomChangeMap), global::Pb.C2S_RoomChangeMap.Parser, new[]{ "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomChangeMapRet), global::Pb.S2C_RoomChangeMapRet.Parser, new[]{ "Errno", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_StartRoomGame), global::Pb.C2S_StartRoomGame.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_StartRoomGame), global::Pb.S2C_StartRoomGame.Parser, new[]{ "Sceneid", "Bsid", "Mapid", "Errno", "Starttype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_AutoJoinRoom), global::Pb.C2S_AutoJoinRoom.Parser, new[]{ "Mapid", "Name", "Version", "Grpmem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_AutoJoinRoomRet), global::Pb.S2C_AutoJoinRoomRet.Parser, new[]{ "Errno", "Roominfo", "Roommember" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_AutoJoinCSRoom), global::Pb.C2S_AutoJoinCSRoom.Parser, new[]{ "Mapid", "Name", "Version", "Grpnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomKickUser), global::Pb.C2S_RoomKickUser.Parser, new[]{ "Kicked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomKickUserRet), global::Pb.S2C_RoomKickUserRet.Parser, new[]{ "Errno", "Roominfo", "Roommember" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomBeKicked), global::Pb.S2C_RoomBeKicked.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomAddRobot), global::Pb.C2S_RoomAddRobot.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomAddRobot), global::Pb.S2C_RoomAddRobot.Parser, new[]{ "Errno", "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomRemoveRobot), global::Pb.C2S_RoomRemoveRobot.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomRemoveRobot), global::Pb.S2C_RoomRemoveRobot.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RoomFullRobot), global::Pb.C2S_RoomFullRobot.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RoomFullRobot), global::Pb.S2C_RoomFullRobot.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_BatQueMatchEnter), global::Pb.C2S_BatQueMatchEnter.Parser, new[]{ "Mapid", "Teammode", "Elemtype", "Addteamr", "Onlyrobot", "Strategy", "Schemeid", "Pointnum", "Grade", "Sparring" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_BatQueMatchEnter), global::Pb.S2C_BatQueMatchEnter.Parser, new[]{ "Enterinfo", "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_BatQueMatchLeave), global::Pb.C2S_BatQueMatchLeave.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_BatQueMatchLeave), global::Pb.S2C_BatQueMatchLeave.Parser, new[]{ "Errno", "Srcroleid", "Srcrolename" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_BatQueMatchInfo), global::Pb.C2S_BatQueMatchInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_BatQueMatchInfo), global::Pb.S2C_BatQueMatchInfo.Parser, new[]{ "Inmatch", "Enterinfo", "Queueplynum", "Needmaxply", "Waitsecond", "Aiopensecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_BatQueMatchPreInfo), global::Pb.C2S_BatQueMatchPreInfo.Parser, new[]{ "Teammode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_BatQueMatchQueInfo), global::Pb.C2S_BatQueMatchQueInfo.Parser, new[]{ "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_BatQueMatchQueInfo), global::Pb.S2C_BatQueMatchQueInfo.Parser, new[]{ "Mapid", "Infos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_BatQueMatchQueInfo.Types.Mode), global::Pb.S2C_BatQueMatchQueInfo.Types.Mode.Parser, new[]{ "Teammode", "Queueplynum", "Needmaxply" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_AcctBind), global::Pb.C2S_AcctBind.Parser, new[]{ "Ip", "Email", "Password", "Nick", "Passmd5", "Bindtype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_AcctBind), global::Pb.S2C_AcctBind.Parser, new[]{ "Errno", "Dytnumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_GetAcctInfo), global::Pb.C2S_GetAcctInfo.Parser, new[]{ "Ip", "Email", "Password", "Passmd5", "Bindtype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_GetAcctInfo), global::Pb.S2C_GetAcctInfo.Parser, new[]{ "Errno", "Number", "Account", "Password", "NumberTaget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_UserRename), global::Pb.C2S_UserRename.Parser, new[]{ "Ip", "Newname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_UserRename), global::Pb.S2C_UserRename.Parser, new[]{ "Newname", "Idx", "Relatename", "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_GMCommand), global::Pb.C2S_GMCommand.Parser, new[]{ "Cmd", "Roleid", "Eid", "Bscmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_GMCommandRet), global::Pb.S2C_GMCommandRet.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_GMReloadRet), global::Pb.S2C_GMReloadRet.Parser, new[]{ "Errno", "Filename", "Servername" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_PlayerSetting), global::Pb.C2S_PlayerSetting.Parser, new[]{ "Setting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_ConfirmRecon), global::Pb.C2S_ConfirmRecon.Parser, new[]{ "Confirm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_ConfirmRecon), global::Pb.S2C_ConfirmRecon.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_QueryScene), global::Pb.C2S_QueryScene.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_QueryScene), global::Pb.S2C_QueryScene.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ApplyInfo), global::Pb.ApplyInfo.Parser, new[]{ "Roleid", "Name", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendAdd), global::Pb.C2S_FriendAdd.Parser, new[]{ "Roleid", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendAdd), global::Pb.S2C_FriendAdd.Parser, new[]{ "Errno", "Roleid", "Applyinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_Applylist), global::Pb.C2S_Applylist.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_Applylist), global::Pb.S2C_Applylist.Parser, new[]{ "Errno", "Listdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendAccept), global::Pb.C2S_FriendAccept.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendAccept), global::Pb.S2C_FriendAccept.Parser, new[]{ "Errno", "Srcid", "Name", "Online", "Destid", "Roomid", "Teamid", "Sceneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendRefuse), global::Pb.C2S_FriendRefuse.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendRefuse), global::Pb.S2C_FriendRefuse.Parser, new[]{ "Errno", "Roleid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendDel), global::Pb.C2S_FriendDel.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendDel), global::Pb.S2C_FriendDel.Parser, new[]{ "Errno", "Srcid", "Destid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.QueryInfo), global::Pb.QueryInfo.Parser, new[]{ "Roleid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendFind), global::Pb.C2S_FriendFind.Parser, new[]{ "Roleid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendFind), global::Pb.S2C_FriendFind.Parser, new[]{ "Errno", "Queryinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.FriendInfo), global::Pb.FriendInfo.Parser, new[]{ "Roleid", "Name", "Online", "Roomid", "Teamid", "Sceneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendList), global::Pb.C2S_FriendList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendList), global::Pb.S2C_FriendList.Parser, new[]{ "Errno", "Friendinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendUpdate), global::Pb.S2C_FriendUpdate.Parser, new[]{ "Friendinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_RequestTeam), global::Pb.C2S_RequestTeam.Parser, new[]{ "Roleid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_RequestTeam), global::Pb.S2C_RequestTeam.Parser, new[]{ "Errno", "Request", "Teamid", "Name", "Roleid", "Destcharid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_AcceptTeam), global::Pb.C2S_AcceptTeam.Parser, new[]{ "Teamid", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_AcceptTeam), global::Pb.S2C_AcceptTeam.Parser, new[]{ "Errno", "Roleid", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_LeaveTeam), global::Pb.C2S_LeaveTeam.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_LeaveTeam), global::Pb.S2C_LeaveTeam.Parser, new[]{ "Errno", "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_KickTeam), global::Pb.C2S_KickTeam.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_KickTeam), global::Pb.S2C_KickTeam.Parser, new[]{ "Errno", "Kicker", "Name", "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_TeamReady), global::Pb.C2S_TeamReady.Parser, new[]{ "Ready" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_TeamReady), global::Pb.S2C_TeamReady.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_TeamRefuse), global::Pb.C2S_TeamRefuse.Parser, new[]{ "Teamid", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_TeamRefuse), global::Pb.S2C_TeamRefuse.Parser, new[]{ "Errno", "Roleid", "Name", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_TeamCancel), global::Pb.C2S_TeamCancel.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_TeamCancel), global::Pb.S2C_TeamCancel.Parser, new[]{ "Errno", "Roleid", "Teamid", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.GsTeamInfo), global::Pb.GsTeamInfo.Parser, new[]{ "Teamid", "Owner", "Maxnum", "Matchmode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.GsTeamMember), global::Pb.GsTeamMember.Parser, new[]{ "Roleid", "Name", "Pos", "Accept", "Ready", "Request", "Logout", "Charid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_TeamUpdate), global::Pb.S2C_TeamUpdate.Parser, new[]{ "Infos", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_UpgradeLeader), global::Pb.C2S_UpgradeLeader.Parser, new[]{ "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_UpgradeLeader), global::Pb.S2C_UpgradeLeader.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_ReloadInter), global::Pb.S2C_ReloadInter.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_ChangeCharacter), global::Pb.C2S_ChangeCharacter.Parser, new[]{ "Charid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_ChangeCharacter), global::Pb.S2C_ChangeCharacter.Parser, new[]{ "Errno", "Charid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_EchoTest), global::Pb.C2S_EchoTest.Parser, new[]{ "Teststr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_EchoTest), global::Pb.S2C_EchoTest.Parser, new[]{ "Teststr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_Chat), global::Pb.C2S_Chat.Parser, new[]{ "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_Chat), global::Pb.S2C_Chat.Parser, new[]{ "Sender", "Name", "Type", "Data", "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_FriendChat), global::Pb.C2S_FriendChat.Parser, new[]{ "Destid", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_PullFriendMsg), global::Pb.C2S_PullFriendMsg.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendMsg), global::Pb.S2C_FriendMsg.Parser, new[]{ "Allmsg", "Errno" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_FriendMsg.Types.OneMessage), global::Pb.S2C_FriendMsg.Types.OneMessage.Parser, new[]{ "Sender", "Name", "Sendtime", "Data" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CheckPointOneChoice), global::Pb.CheckPointOneChoice.Parser, new[]{ "Elemid", "Mapid", "Grade", "Quetype", "Isnext", "Chooseteamr", "Openlimit", "Rewardid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CheckPointChoicesRole), global::Pb.CheckPointChoicesRole.Parser, new[]{ "Roleid", "Goldnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_CheckPointChoices), global::Pb.S2C_CheckPointChoices.Parser, new[]{ "Choices", "Schemeid", "Pointnum", "Endsecond", "Collid", "Fromgs", "Maxfailnum", "Nowfailnum", "Maxpointnum", "Maxfinishnum", "Nowfinishnum", "Roleinfo", "Allfinishnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_CheckPointChoose), global::Pb.C2S_CheckPointChoose.Parser, new[]{ "Elemid", "Collid", "Fromgs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_CheckPointResult), global::Pb.S2C_CheckPointResult.Parser, new[]{ "Choice", "Schemeid", "Pointnum", "Finalelemid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CheckPointInitChar), global::Pb.CheckPointInitChar.Parser, new[]{ "Charid", "Hp", "Shield", "Speed", "Finefeatures", "Badfeatures", "Initweapon", "Defskill", "Energy", "Energymax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_CheckPointCharChoice), global::Pb.S2C_CheckPointCharChoice.Parser, new[]{ "Choices", "Endsecond", "Collid", "Fromgs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_CheckPointCharChoice), global::Pb.C2S_CheckPointCharChoice.Parser, new[]{ "Charid", "Collid", "Fromgs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2S_CheckPointCharScan), global::Pb.C2S_CheckPointCharScan.Parser, new[]{ "Charid", "Collid", "Fromgs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_CheckPointCharInfo), global::Pb.S2C_CheckPointCharInfo.Parser, new[]{ "Roleid", "Info", "Confirm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.S2C_ComeBackWorld), global::Pb.S2C_ComeBackWorld.Parser, new[]{ "Worldbsdata" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSG {
    [pbr::OriginalName("MSG_None")] None = 0,
    /// <summary>
    /// 角色相关
    /// </summary>
    [pbr::OriginalName("MSG_DeviceLogin")] DeviceLogin = 1000,
    [pbr::OriginalName("MSG_CreateUser")] CreateUser = 1001,
    [pbr::OriginalName("MSG_LoadUser")] LoadUser = 1002,
    [pbr::OriginalName("MSG_UserRename")] UserRename = 1003,
    [pbr::OriginalName("MSG_AcctBind")] AcctBind = 1004,
    [pbr::OriginalName("MSG_GetAcctInfo")] GetAcctInfo = 1005,
    [pbr::OriginalName("MSG_GMCMD")] Gmcmd = 1006,
    [pbr::OriginalName("MSG_PlayerSetting")] PlayerSetting = 1007,
    [pbr::OriginalName("MSG_ConfirmRecon")] ConfirmRecon = 1008,
    [pbr::OriginalName("MSG_QueryScene")] QueryScene = 1009,
    [pbr::OriginalName("MSG_GMReloadRet")] GmreloadRet = 1010,
    [pbr::OriginalName("MSG_ReloadInter")] ReloadInter = 1011,
    [pbr::OriginalName("MSG_ChangeCharacter")] ChangeCharacter = 1012,
    [pbr::OriginalName("MSG_EchoTest")] EchoTest = 1013,
    [pbr::OriginalName("MSG_Chat")] Chat = 1014,
    /// <summary>
    /// Room相关
    /// </summary>
    [pbr::OriginalName("MSG_CreateRoom")] CreateRoom = 1100,
    [pbr::OriginalName("MSG_JoinRoom")] JoinRoom = 1101,
    [pbr::OriginalName("MSG_LeaveRoom")] LeaveRoom = 1102,
    [pbr::OriginalName("MSG_RoomUpdate")] RoomUpdate = 1103,
    [pbr::OriginalName("MSG_RoomReady")] RoomReady = 1104,
    [pbr::OriginalName("MSG_RoomChangePos")] RoomChangePos = 1105,
    [pbr::OriginalName("MSG_StartRoomGame")] StartRoomGame = 1106,
    [pbr::OriginalName("MSG_AutoJoinRoom")] AutoJoinRoom = 1107,
    [pbr::OriginalName("MSG_RoomChangeMap")] RoomChangeMap = 1108,
    [pbr::OriginalName("MSG_RoomKickUser")] RoomKickUser = 1109,
    [pbr::OriginalName("MSG_RoomBeKicked")] RoomBeKicked = 1110,
    [pbr::OriginalName("MSG_RoomAddRobot")] RoomAddRobot = 1111,
    [pbr::OriginalName("MSG_RoomRemoveRobot")] RoomRemoveRobot = 1112,
    [pbr::OriginalName("MSG_RoomFullRobot")] RoomFullRobot = 1113,
    [pbr::OriginalName("MSG_AutoJoinCSRoom")] AutoJoinCsroom = 1114,
    /// <summary>
    /// 排队相关
    /// </summary>
    [pbr::OriginalName("MSG_BatQueMatchEnter")] BatQueMatchEnter = 1150,
    [pbr::OriginalName("MSG_BatQueMatchLeave")] BatQueMatchLeave = 1151,
    [pbr::OriginalName("MSG_BatQueMatchInfo")] BatQueMatchInfo = 1152,
    [pbr::OriginalName("MSG_BatQueMatchPreInfo")] BatQueMatchPreInfo = 1153,
    [pbr::OriginalName("MSG_BatQueMatchQueInfo")] BatQueMatchQueInfo = 1154,
    /// <summary>
    /// 好友消息
    /// </summary>
    [pbr::OriginalName("MSG_FriendAdd")] FriendAdd = 1200,
    [pbr::OriginalName("MSG_ApplyList")] ApplyList = 1201,
    [pbr::OriginalName("MSG_FriendAccept")] FriendAccept = 1202,
    [pbr::OriginalName("MSG_FriendRefuse")] FriendRefuse = 1203,
    [pbr::OriginalName("MSG_FriendDel")] FriendDel = 1204,
    [pbr::OriginalName("MSG_FriendFind")] FriendFind = 1205,
    [pbr::OriginalName("MSG_FriendList")] FriendList = 1206,
    [pbr::OriginalName("MSG_FriendUpdate")] FriendUpdate = 1207,
    [pbr::OriginalName("MSG_FriendChat")] FriendChat = 1208,
    [pbr::OriginalName("MSG_PullFriendMsg")] PullFriendMsg = 1209,
    /// <summary>
    /// 组队消息
    /// </summary>
    [pbr::OriginalName("MSG_TeamRequest")] TeamRequest = 1250,
    [pbr::OriginalName("MSG_TeamAccept")] TeamAccept = 1251,
    [pbr::OriginalName("MSG_LeaveTeam")] LeaveTeam = 1252,
    [pbr::OriginalName("MSG_TeamKick")] TeamKick = 1253,
    [pbr::OriginalName("MSG_TeamUpdate")] TeamUpdate = 1254,
    [pbr::OriginalName("MSG_TeamReady")] TeamReady = 1255,
    [pbr::OriginalName("MSG_TeamRefuse")] TeamRefuse = 1256,
    [pbr::OriginalName("MSG_TeamCancel")] TeamCancel = 1257,
    [pbr::OriginalName("MSG_UpgradeLeader")] UpgradeLeader = 1258,
    /// <summary>
    /// 战场消息
    /// </summary>
    [pbr::OriginalName("MSG_BattleLogin")] BattleLogin = 2000,
    [pbr::OriginalName("MSG_BattleFrame")] BattleFrame = 2001,
    [pbr::OriginalName("MSG_EntityDisAppear")] EntityDisAppear = 2002,
    [pbr::OriginalName("MSG_GameLoading")] GameLoading = 2003,
    [pbr::OriginalName("MSG_GameStart")] GameStart = 2004,
    [pbr::OriginalName("MSG_GameEnd")] GameEnd = 2005,
    [pbr::OriginalName("MSG_PlayerQuitGame")] PlayerQuitGame = 2006,
    [pbr::OriginalName("MSG_Settlement")] Settlement = 2007,
    [pbr::OriginalName("MSG_BattleChat")] BattleChat = 2008,
    [pbr::OriginalName("MSG_BattleReconnect")] BattleReconnect = 2009,
    [pbr::OriginalName("MSG_Watch")] Watch = 2010,
    [pbr::OriginalName("MSG_BattleAllPlayer")] BattleAllPlayer = 2011,
    [pbr::OriginalName("MSG_ReplaceEquip")] ReplaceEquip = 2012,
    [pbr::OriginalName("MSG_SupplySelect")] SupplySelect = 2013,
    [pbr::OriginalName("MSG_SingleVote")] SingleVote = 2014,
    /// <summary>
    /// 关卡选择
    /// </summary>
    [pbr::OriginalName("MSG_CheckPointChoice")] CheckPointChoice = 2015,
    /// <summary>
    /// 关卡选择结果
    /// </summary>
    [pbr::OriginalName("MSG_CheckPointResult")] CheckPointResult = 2016,
    /// <summary>
    /// 关卡选择角色
    /// </summary>
    [pbr::OriginalName("MSG_CheckPointCharChoice")] CheckPointCharChoice = 2017,
    /// <summary>
    /// 关卡角色选择信息
    /// </summary>
    [pbr::OriginalName("MSG_CheckPointCharInfo")] CheckPointCharInfo = 2018,
    [pbr::OriginalName("MSG_VoteResult")] VoteResult = 2019,
    /// <summary>
    /// 购买道具
    /// </summary>
    [pbr::OriginalName("MSG_BuyItem")] BuyItem = 2020,
    [pbr::OriginalName("MSG_EnterPvPVote")] EnterPvPvote = 2021,
    [pbr::OriginalName("MSG_ComeBackWorld")] ComeBackWorld = 2022,
    [pbr::OriginalName("MSG_PvPCharChoice")] PvPcharChoice = 2023,
    /// <summary>
    /// 道具相关错误
    /// </summary>
    [pbr::OriginalName("MSG_ItemError")] ItemError = 2024,
    /// <summary>
    /// 天赋选择
    /// </summary>
    [pbr::OriginalName("MSG_TalentChoose")] TalentChoose = 2025,
    /// <summary>
    /// 语音消息
    /// </summary>
    [pbr::OriginalName("MSG_AddAudioChannel")] AddAudioChannel = 3000,
    [pbr::OriginalName("MSG_EnterAudioChannel")] EnterAudioChannel = 3001,
    [pbr::OriginalName("MSG_AllDoGM")] AllDoGm = 5001,
    /// <summary>
    /// 测试消息
    /// </summary>
    [pbr::OriginalName("MSG_Test")] Test = 6001,
  }

  public enum StartGameType {
    [pbr::OriginalName("StartByMatch")] StartByMatch = 0,
    [pbr::OriginalName("StartByRoom")] StartByRoom = 1,
    [pbr::OriginalName("StartBySupplyMatch")] StartBySupplyMatch = 2,
  }

  /// <summary>
  /// 加入匹配团体类别
  /// </summary>
  public enum BatMatchElemType {
    /// <summary>
    /// 个人匹配
    /// </summary>
    [pbr::OriginalName("BMET_Person")] BmetPerson = 0,
    /// <summary>
    /// 组队匹配
    /// </summary>
    [pbr::OriginalName("BMET_Team")] BmetTeam = 1,
  }

  /// <summary>
  /// 添加队友类型
  /// </summary>
  public enum PUBGAddTeamrType {
    /// <summary>
    /// 可以加人
    /// </summary>
    [pbr::OriginalName("PUBG_ATT_CanAdd")] PubgAttCanAdd = 0,
    /// <summary>
    /// 不可加人
    /// </summary>
    [pbr::OriginalName("PUBG_ATT_NotAdd")] PubgAttNotAdd = 1,
    /// <summary>
    /// 必须加人
    /// </summary>
    [pbr::OriginalName("PUBG_ATT_MustAdd")] PubgAttMustAdd = 2,
  }

  /// <summary>
  /// 匹配类型
  /// </summary>
  public enum BatMatchStrategy {
    /// <summary>
    /// 大逃杀匹配
    /// </summary>
    [pbr::OriginalName("BMS_PUBG")] BmsPubg = 0,
    /// <summary>
    /// 关卡匹配
    /// </summary>
    [pbr::OriginalName("BMS_CheckPoint")] BmsCheckPoint = 1,
  }

  public enum ChatType {
    [pbr::OriginalName("CT_None")] CtNone = 0,
    [pbr::OriginalName("CT_Team")] CtTeam = 1,
    [pbr::OriginalName("CT_Room")] CtRoom = 2,
    [pbr::OriginalName("CT_World")] CtWorld = 3,
    [pbr::OriginalName("CT_Battle")] CtBattle = 4,
    [pbr::OriginalName("CT_Friend")] CtFriend = 5,
  }

  #endregion

  #region Messages
  public sealed partial class BinBattleData : pb::IMessage<BinBattleData> {
    private static readonly pb::MessageParser<BinBattleData> _parser = new pb::MessageParser<BinBattleData>(() => pb.ProtobufManager.New<BinBattleData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinBattleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinBattleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Sceneid = 0;
      Bsid = 0;
      Mapid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinBattleData(BinBattleData other) : this() {
      sceneid_ = other.sceneid_;
      bsid_ = other.bsid_;
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinBattleData Clone() {
      return new BinBattleData(this);
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 1;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    /// <summary>Field number for the "bsid" field.</summary>
    public const int BsidFieldNumber = 2;
    private int bsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bsid {
      get { return bsid_; }
      set {
        bsid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinBattleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinBattleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sceneid != other.Sceneid) return false;
      if (Bsid != other.Bsid) return false;
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      if (Bsid != 0) hash ^= Bsid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sceneid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sceneid);
      }
      if (Bsid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bsid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      if (Bsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bsid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinBattleData other) {
      if (other == null) {
        return;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
      if (other.Bsid != 0) {
        Bsid = other.Bsid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sceneid = input.ReadUInt32();
            break;
          }
          case 16: {
            Bsid = input.ReadInt32();
            break;
          }
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExMoney : pb::IMessage<ExMoney> {
    private static readonly pb::MessageParser<ExMoney> _parser = new pb::MessageParser<ExMoney>(() => pb.ProtobufManager.New<ExMoney>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExMoney> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExMoney() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Gold = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExMoney(ExMoney other) : this() {
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExMoney Clone() {
      return new ExMoney(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExMoney);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExMoney other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExMoney other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinFrequentRole : pb::IMessage<BinFrequentRole> {
    private static readonly pb::MessageParser<BinFrequentRole> _parser = new pb::MessageParser<BinFrequentRole>(() => pb.ProtobufManager.New<BinFrequentRole>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinFrequentRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinFrequentRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.BinBattleData>(worldbsdata_);
      worldbsdata_ = null;
      Exp = 0;
      pb.ProtobufManager.Reclaim<global::Pb.ExMoney>(exmoney_);
      exmoney_ = null;
      exmoneys_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinFrequentRole(BinFrequentRole other) : this() {
      Worldbsdata = other.worldbsdata_ != null ? other.Worldbsdata.Clone() : null;
      exp_ = other.exp_;
      Exmoney = other.exmoney_ != null ? other.Exmoney.Clone() : null;
      exmoneys_ = other.exmoneys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinFrequentRole Clone() {
      return new BinFrequentRole(this);
    }

    /// <summary>Field number for the "worldbsdata" field.</summary>
    public const int WorldbsdataFieldNumber = 1;
    private global::Pb.BinBattleData worldbsdata_;
    /// <summary>
    /// bs数据用于重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BinBattleData Worldbsdata {
      get { return worldbsdata_; }
      set {
        worldbsdata_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private ulong exp_;
    /// <summary>
    /// 经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "exmoney" field.</summary>
    public const int ExmoneyFieldNumber = 3;
    private global::Pb.ExMoney exmoney_;
    /// <summary>
    /// 货币相关 该类型可以为负数(后面会删除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ExMoney Exmoney {
      get { return exmoney_; }
      set {
        exmoney_ = value;
      }
    }

    /// <summary>Field number for the "exmoneys" field.</summary>
    public const int ExmoneysFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_exmoneys_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> exmoneys_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 货币相关 该类型可以为负数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Exmoneys {
      get { return exmoneys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinFrequentRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinFrequentRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Worldbsdata, other.Worldbsdata)) return false;
      if (Exp != other.Exp) return false;
      if (!object.Equals(Exmoney, other.Exmoney)) return false;
      if(!exmoneys_.Equals(other.exmoneys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (worldbsdata_ != null) hash ^= Worldbsdata.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (exmoney_ != null) hash ^= Exmoney.GetHashCode();
      hash ^= exmoneys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (worldbsdata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Worldbsdata);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Exp);
      }
      if (exmoney_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Exmoney);
      }
      exmoneys_.WriteTo(output, _repeated_exmoneys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (worldbsdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worldbsdata);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (exmoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exmoney);
      }
      size += exmoneys_.CalculateSize(_repeated_exmoneys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinFrequentRole other) {
      if (other == null) {
        return;
      }
      if (other.worldbsdata_ != null) {
        if (worldbsdata_ == null) {
          worldbsdata_ = pb.ProtobufManager.New<global::Pb.BinBattleData>();
        }
        Worldbsdata.MergeFrom(other.Worldbsdata);
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.exmoney_ != null) {
        if (exmoney_ == null) {
          exmoney_ = pb.ProtobufManager.New<global::Pb.ExMoney>();
        }
        Exmoney.MergeFrom(other.Exmoney);
      }
      exmoneys_.Add(other.exmoneys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (worldbsdata_ == null) {
              worldbsdata_ = pb.ProtobufManager.New<global::Pb.BinBattleData>();
            }
            input.ReadMessage(worldbsdata_);
            break;
          }
          case 16: {
            Exp = input.ReadUInt64();
            break;
          }
          case 26: {
            if (exmoney_ == null) {
              exmoney_ = pb.ProtobufManager.New<global::Pb.ExMoney>();
            }
            input.ReadMessage(exmoney_);
            break;
          }
          case 34:
          case 32: {
            exmoneys_.AddEntriesFrom(input, _repeated_exmoneys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinNormalRole : pb::IMessage<BinNormalRole> {
    private static readonly pb::MessageParser<BinNormalRole> _parser = new pb::MessageParser<BinNormalRole>(() => pb.ProtobufManager.New<BinNormalRole>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinNormalRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinNormalRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Name = "";
      pb.ProtobufManager.Reclaim<global::Pb.PlySetting>(setting_);
      setting_ = null;
      Level = 0;
      Charid = 0;
      Playerversion = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinNormalRole(BinNormalRole other) : this() {
      name_ = other.name_;
      Setting = other.setting_ != null ? other.Setting.Clone() : null;
      level_ = other.level_;
      charid_ = other.charid_;
      playerversion_ = other.playerversion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinNormalRole Clone() {
      return new BinNormalRole(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 2;
    private global::Pb.PlySetting setting_;
    /// <summary>
    /// 系统设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.PlySetting Setting {
      get { return setting_; }
      set {
        setting_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 4;
    private uint charid_;
    /// <summary>
    /// 当前角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "playerversion" field.</summary>
    public const int PlayerversionFieldNumber = 5;
    private uint playerversion_;
    /// <summary>
    /// 玩家版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Playerversion {
      get { return playerversion_; }
      set {
        playerversion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinNormalRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinNormalRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Setting, other.Setting)) return false;
      if (Level != other.Level) return false;
      if (Charid != other.Charid) return false;
      if (Playerversion != other.Playerversion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (setting_ != null) hash ^= Setting.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Charid != 0) hash ^= Charid.GetHashCode();
      if (Playerversion != 0) hash ^= Playerversion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (setting_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Setting);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Charid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Charid);
      }
      if (Playerversion != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Playerversion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (setting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Setting);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      if (Playerversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Playerversion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinNormalRole other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.setting_ != null) {
        if (setting_ == null) {
          setting_ = pb.ProtobufManager.New<global::Pb.PlySetting>();
        }
        Setting.MergeFrom(other.Setting);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
      if (other.Playerversion != 0) {
        Playerversion = other.Playerversion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (setting_ == null) {
              setting_ = pb.ProtobufManager.New<global::Pb.PlySetting>();
            }
            input.ReadMessage(setting_);
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Charid = input.ReadUInt32();
            break;
          }
          case 40: {
            Playerversion = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_DeviceLogin : pb::IMessage<C2S_DeviceLogin> {
    private static readonly pb::MessageParser<C2S_DeviceLogin> _parser = new pb::MessageParser<C2S_DeviceLogin>(() => pb.ProtobufManager.New<C2S_DeviceLogin>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_DeviceLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DeviceLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ip = "";
      Mac = "";
      Password = "";
      Passmd5 = "";
      Account = "";
      Deviceid = "";
      Bindflag = "";
      Platform = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DeviceLogin(C2S_DeviceLogin other) : this() {
      ip_ = other.ip_;
      mac_ = other.mac_;
      password_ = other.password_;
      passmd5_ = other.passmd5_;
      account_ = other.account_;
      deviceid_ = other.deviceid_;
      bindflag_ = other.bindflag_;
      platform_ = other.platform_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DeviceLogin Clone() {
      return new C2S_DeviceLogin(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 2;
    private string mac_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passmd5" field.</summary>
    public const int Passmd5FieldNumber = 4;
    private string passmd5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passmd5 {
      get { return passmd5_; }
      set {
        passmd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 5;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceid" field.</summary>
    public const int DeviceidFieldNumber = 6;
    private string deviceid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deviceid {
      get { return deviceid_; }
      set {
        deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindflag" field.</summary>
    public const int BindflagFieldNumber = 7;
    private string bindflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bindflag {
      get { return bindflag_; }
      set {
        bindflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 8;
    private int platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_DeviceLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_DeviceLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Mac != other.Mac) return false;
      if (Password != other.Password) return false;
      if (Passmd5 != other.Passmd5) return false;
      if (Account != other.Account) return false;
      if (Deviceid != other.Deviceid) return false;
      if (Bindflag != other.Bindflag) return false;
      if (Platform != other.Platform) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Passmd5.Length != 0) hash ^= Passmd5.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
      if (Bindflag.Length != 0) hash ^= Bindflag.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mac);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Passmd5.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Passmd5);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Account);
      }
      if (Deviceid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Deviceid);
      }
      if (Bindflag.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Bindflag);
      }
      if (Platform != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Platform);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Passmd5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passmd5);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Deviceid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
      }
      if (Bindflag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bindflag);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_DeviceLogin other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Passmd5.Length != 0) {
        Passmd5 = other.Passmd5;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Deviceid.Length != 0) {
        Deviceid = other.Deviceid;
      }
      if (other.Bindflag.Length != 0) {
        Bindflag = other.Bindflag;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Mac = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Passmd5 = input.ReadString();
            break;
          }
          case 42: {
            Account = input.ReadString();
            break;
          }
          case 50: {
            Deviceid = input.ReadString();
            break;
          }
          case 58: {
            Bindflag = input.ReadString();
            break;
          }
          case 64: {
            Platform = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_DeviceLogin : pb::IMessage<S2C_DeviceLogin> {
    private static readonly pb::MessageParser<S2C_DeviceLogin> _parser = new pb::MessageParser<S2C_DeviceLogin>(() => pb.ProtobufManager.New<S2C_DeviceLogin>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DeviceLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DeviceLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Number = 0;
      Usercount = 0;
      Userids = "";
      Bindflag = "";
      Bindemail = "";
      Bindnick = "";
      Devicefreeze = 0;
      Passret = 0;
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DeviceLogin(S2C_DeviceLogin other) : this() {
      number_ = other.number_;
      usercount_ = other.usercount_;
      userids_ = other.userids_;
      bindflag_ = other.bindflag_;
      bindemail_ = other.bindemail_;
      bindnick_ = other.bindnick_;
      devicefreeze_ = other.devicefreeze_;
      passret_ = other.passret_;
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DeviceLogin Clone() {
      return new S2C_DeviceLogin(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private uint number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "usercount" field.</summary>
    public const int UsercountFieldNumber = 2;
    private uint usercount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Usercount {
      get { return usercount_; }
      set {
        usercount_ = value;
      }
    }

    /// <summary>Field number for the "userids" field.</summary>
    public const int UseridsFieldNumber = 3;
    private string userids_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userids {
      get { return userids_; }
      set {
        userids_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindflag" field.</summary>
    public const int BindflagFieldNumber = 4;
    private string bindflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bindflag {
      get { return bindflag_; }
      set {
        bindflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindemail" field.</summary>
    public const int BindemailFieldNumber = 5;
    private string bindemail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bindemail {
      get { return bindemail_; }
      set {
        bindemail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindnick" field.</summary>
    public const int BindnickFieldNumber = 6;
    private string bindnick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bindnick {
      get { return bindnick_; }
      set {
        bindnick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicefreeze" field.</summary>
    public const int DevicefreezeFieldNumber = 7;
    private uint devicefreeze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Devicefreeze {
      get { return devicefreeze_; }
      set {
        devicefreeze_ = value;
      }
    }

    /// <summary>Field number for the "passret" field.</summary>
    public const int PassretFieldNumber = 8;
    private int passret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passret {
      get { return passret_; }
      set {
        passret_ = value;
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 9;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DeviceLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DeviceLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Usercount != other.Usercount) return false;
      if (Userids != other.Userids) return false;
      if (Bindflag != other.Bindflag) return false;
      if (Bindemail != other.Bindemail) return false;
      if (Bindnick != other.Bindnick) return false;
      if (Devicefreeze != other.Devicefreeze) return false;
      if (Passret != other.Passret) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Usercount != 0) hash ^= Usercount.GetHashCode();
      if (Userids.Length != 0) hash ^= Userids.GetHashCode();
      if (Bindflag.Length != 0) hash ^= Bindflag.GetHashCode();
      if (Bindemail.Length != 0) hash ^= Bindemail.GetHashCode();
      if (Bindnick.Length != 0) hash ^= Bindnick.GetHashCode();
      if (Devicefreeze != 0) hash ^= Devicefreeze.GetHashCode();
      if (Passret != 0) hash ^= Passret.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Number);
      }
      if (Usercount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Usercount);
      }
      if (Userids.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Userids);
      }
      if (Bindflag.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Bindflag);
      }
      if (Bindemail.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Bindemail);
      }
      if (Bindnick.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Bindnick);
      }
      if (Devicefreeze != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Devicefreeze);
      }
      if (Passret != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Passret);
      }
      if (Errno != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Number);
      }
      if (Usercount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Usercount);
      }
      if (Userids.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userids);
      }
      if (Bindflag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bindflag);
      }
      if (Bindemail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bindemail);
      }
      if (Bindnick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bindnick);
      }
      if (Devicefreeze != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Devicefreeze);
      }
      if (Passret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passret);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DeviceLogin other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Usercount != 0) {
        Usercount = other.Usercount;
      }
      if (other.Userids.Length != 0) {
        Userids = other.Userids;
      }
      if (other.Bindflag.Length != 0) {
        Bindflag = other.Bindflag;
      }
      if (other.Bindemail.Length != 0) {
        Bindemail = other.Bindemail;
      }
      if (other.Bindnick.Length != 0) {
        Bindnick = other.Bindnick;
      }
      if (other.Devicefreeze != 0) {
        Devicefreeze = other.Devicefreeze;
      }
      if (other.Passret != 0) {
        Passret = other.Passret;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadUInt32();
            break;
          }
          case 16: {
            Usercount = input.ReadUInt32();
            break;
          }
          case 26: {
            Userids = input.ReadString();
            break;
          }
          case 34: {
            Bindflag = input.ReadString();
            break;
          }
          case 42: {
            Bindemail = input.ReadString();
            break;
          }
          case 50: {
            Bindnick = input.ReadString();
            break;
          }
          case 56: {
            Devicefreeze = input.ReadUInt32();
            break;
          }
          case 64: {
            Passret = input.ReadInt32();
            break;
          }
          case 72: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlySetting : pb::IMessage<PlySetting> {
    private static readonly pb::MessageParser<PlySetting> _parser = new pb::MessageParser<PlySetting>(() => pb.ProtobufManager.New<PlySetting>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlySetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlySetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Setting = 0;
      Tutorial = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlySetting(PlySetting other) : this() {
      setting_ = other.setting_;
      tutorial_ = other.tutorial_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlySetting Clone() {
      return new PlySetting(this);
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 1;
    private ulong setting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Setting {
      get { return setting_; }
      set {
        setting_ = value;
      }
    }

    /// <summary>Field number for the "tutorial" field.</summary>
    public const int TutorialFieldNumber = 2;
    private ulong tutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tutorial {
      get { return tutorial_; }
      set {
        tutorial_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlySetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlySetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Setting != other.Setting) return false;
      if (Tutorial != other.Tutorial) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Setting != 0UL) hash ^= Setting.GetHashCode();
      if (Tutorial != 0UL) hash ^= Tutorial.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Setting != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Setting);
      }
      if (Tutorial != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Tutorial);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Setting != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Setting);
      }
      if (Tutorial != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tutorial);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlySetting other) {
      if (other == null) {
        return;
      }
      if (other.Setting != 0UL) {
        Setting = other.Setting;
      }
      if (other.Tutorial != 0UL) {
        Tutorial = other.Tutorial;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Setting = input.ReadUInt64();
            break;
          }
          case 16: {
            Tutorial = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_CreateUser : pb::IMessage<C2S_CreateUser> {
    private static readonly pb::MessageParser<C2S_CreateUser> _parser = new pb::MessageParser<C2S_CreateUser>(() => pb.ProtobufManager.New<C2S_CreateUser>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ip = "";
      Number = 0;
      Name = "";
      Mac = "";
      Password = "";
      Account = "";
      Deviceid = "";
      pb.ProtobufManager.Reclaim<global::Pb.PlySetting>(setting_);
      setting_ = null;
      Charid = 0;
      Platform = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateUser(C2S_CreateUser other) : this() {
      ip_ = other.ip_;
      number_ = other.number_;
      name_ = other.name_;
      mac_ = other.mac_;
      password_ = other.password_;
      account_ = other.account_;
      deviceid_ = other.deviceid_;
      Setting = other.setting_ != null ? other.Setting.Clone() : null;
      charid_ = other.charid_;
      platform_ = other.platform_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateUser Clone() {
      return new C2S_CreateUser(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private uint number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 4;
    private string mac_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceid" field.</summary>
    public const int DeviceidFieldNumber = 7;
    private string deviceid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deviceid {
      get { return deviceid_; }
      set {
        deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 8;
    private global::Pb.PlySetting setting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.PlySetting Setting {
      get { return setting_; }
      set {
        setting_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 9;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 10;
    private int platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Number != other.Number) return false;
      if (Name != other.Name) return false;
      if (Mac != other.Mac) return false;
      if (Password != other.Password) return false;
      if (Account != other.Account) return false;
      if (Deviceid != other.Deviceid) return false;
      if (!object.Equals(Setting, other.Setting)) return false;
      if (Charid != other.Charid) return false;
      if (Platform != other.Platform) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
      if (setting_ != null) hash ^= Setting.GetHashCode();
      if (Charid != 0) hash ^= Charid.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Number);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Mac);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
      if (Deviceid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Deviceid);
      }
      if (setting_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Setting);
      }
      if (Charid != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Charid);
      }
      if (Platform != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Platform);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Number);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Deviceid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
      }
      if (setting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Setting);
      }
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateUser other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Deviceid.Length != 0) {
        Deviceid = other.Deviceid;
      }
      if (other.setting_ != null) {
        if (setting_ == null) {
          setting_ = pb.ProtobufManager.New<global::Pb.PlySetting>();
        }
        Setting.MergeFrom(other.Setting);
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Number = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Mac = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
          case 58: {
            Deviceid = input.ReadString();
            break;
          }
          case 66: {
            if (setting_ == null) {
              setting_ = pb.ProtobufManager.New<global::Pb.PlySetting>();
            }
            input.ReadMessage(setting_);
            break;
          }
          case 72: {
            Charid = input.ReadUInt32();
            break;
          }
          case 80: {
            Platform = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CreateUser : pb::IMessage<S2C_CreateUser> {
    private static readonly pb::MessageParser<S2C_CreateUser> _parser = new pb::MessageParser<S2C_CreateUser>(() => pb.ProtobufManager.New<S2C_CreateUser>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CreateUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
      Idx = 0;
      Errno = 0;
      Passret = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateUser(S2C_CreateUser other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
      idx_ = other.idx_;
      errno_ = other.errno_;
      passret_ = other.passret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateUser Clone() {
      return new S2C_CreateUser(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 3;
    private uint idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 4;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "passret" field.</summary>
    public const int PassretFieldNumber = 5;
    private int passret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passret {
      get { return passret_; }
      set {
        passret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CreateUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CreateUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Idx != other.Idx) return false;
      if (Errno != other.Errno) return false;
      if (Passret != other.Passret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Passret != 0) hash ^= Passret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Idx != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Idx);
      }
      if (Errno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Errno);
      }
      if (Passret != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Passret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Passret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CreateUser other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Passret != 0) {
        Passret = other.Passret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Idx = input.ReadUInt32();
            break;
          }
          case 32: {
            Errno = input.ReadInt32();
            break;
          }
          case 40: {
            Passret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_LoadUser : pb::IMessage<C2S_LoadUser> {
    private static readonly pb::MessageParser<C2S_LoadUser> _parser = new pb::MessageParser<C2S_LoadUser>(() => pb.ProtobufManager.New<C2S_LoadUser>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LoadUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoadUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Version = 0;
      Sversion = 0;
      Number = 0;
      Deviceid = "";
      Fversion = 0;
      Nversion = 0;
      Reconntoken = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoadUser(C2S_LoadUser other) : this() {
      roleid_ = other.roleid_;
      version_ = other.version_;
      sversion_ = other.sversion_;
      number_ = other.number_;
      deviceid_ = other.deviceid_;
      fversion_ = other.fversion_;
      nversion_ = other.nversion_;
      reconntoken_ = other.reconntoken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoadUser Clone() {
      return new C2S_LoadUser(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "sversion" field.</summary>
    public const int SversionFieldNumber = 3;
    private uint sversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sversion {
      get { return sversion_; }
      set {
        sversion_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 4;
    private uint number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "deviceid" field.</summary>
    public const int DeviceidFieldNumber = 5;
    private string deviceid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deviceid {
      get { return deviceid_; }
      set {
        deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fversion" field.</summary>
    public const int FversionFieldNumber = 6;
    private uint fversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fversion {
      get { return fversion_; }
      set {
        fversion_ = value;
      }
    }

    /// <summary>Field number for the "nversion" field.</summary>
    public const int NversionFieldNumber = 7;
    private uint nversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nversion {
      get { return nversion_; }
      set {
        nversion_ = value;
      }
    }

    /// <summary>Field number for the "reconntoken" field.</summary>
    public const int ReconntokenFieldNumber = 8;
    private string reconntoken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reconntoken {
      get { return reconntoken_; }
      set {
        reconntoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LoadUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LoadUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Version != other.Version) return false;
      if (Sversion != other.Sversion) return false;
      if (Number != other.Number) return false;
      if (Deviceid != other.Deviceid) return false;
      if (Fversion != other.Fversion) return false;
      if (Nversion != other.Nversion) return false;
      if (Reconntoken != other.Reconntoken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Sversion != 0) hash ^= Sversion.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
      if (Fversion != 0) hash ^= Fversion.GetHashCode();
      if (Nversion != 0) hash ^= Nversion.GetHashCode();
      if (Reconntoken.Length != 0) hash ^= Reconntoken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (Sversion != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Sversion);
      }
      if (Number != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Number);
      }
      if (Deviceid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Deviceid);
      }
      if (Fversion != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Fversion);
      }
      if (Nversion != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Nversion);
      }
      if (Reconntoken.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Reconntoken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Sversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sversion);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Number);
      }
      if (Deviceid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
      }
      if (Fversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fversion);
      }
      if (Nversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nversion);
      }
      if (Reconntoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reconntoken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LoadUser other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Sversion != 0) {
        Sversion = other.Sversion;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Deviceid.Length != 0) {
        Deviceid = other.Deviceid;
      }
      if (other.Fversion != 0) {
        Fversion = other.Fversion;
      }
      if (other.Nversion != 0) {
        Nversion = other.Nversion;
      }
      if (other.Reconntoken.Length != 0) {
        Reconntoken = other.Reconntoken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 24: {
            Sversion = input.ReadUInt32();
            break;
          }
          case 32: {
            Number = input.ReadUInt32();
            break;
          }
          case 42: {
            Deviceid = input.ReadString();
            break;
          }
          case 48: {
            Fversion = input.ReadUInt32();
            break;
          }
          case 56: {
            Nversion = input.ReadUInt32();
            break;
          }
          case 66: {
            Reconntoken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_LoadUser : pb::IMessage<S2C_LoadUser> {
    private static readonly pb::MessageParser<S2C_LoadUser> _parser = new pb::MessageParser<S2C_LoadUser>(() => pb.ProtobufManager.New<S2C_LoadUser>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LoadUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoadUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      pb.ProtobufManager.Reclaim<global::Pb.BinFrequentRole>(frequent_);
      frequent_ = null;
      pb.ProtobufManager.Reclaim<global::Pb.BinNormalRole>(normal_);
      normal_ = null;
      Pubmversion = 0;
      Serverid = 0;
      Servertime = 0;
      Fversion = 0;
      Nversion = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoadUser(S2C_LoadUser other) : this() {
      errno_ = other.errno_;
      Frequent = other.frequent_ != null ? other.Frequent.Clone() : null;
      Normal = other.normal_ != null ? other.Normal.Clone() : null;
      pubmversion_ = other.pubmversion_;
      serverid_ = other.serverid_;
      servertime_ = other.servertime_;
      fversion_ = other.fversion_;
      nversion_ = other.nversion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoadUser Clone() {
      return new S2C_LoadUser(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "frequent" field.</summary>
    public const int FrequentFieldNumber = 2;
    private global::Pb.BinFrequentRole frequent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BinFrequentRole Frequent {
      get { return frequent_; }
      set {
        frequent_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 3;
    private global::Pb.BinNormalRole normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BinNormalRole Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "pubmversion" field.</summary>
    public const int PubmversionFieldNumber = 4;
    private uint pubmversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pubmversion {
      get { return pubmversion_; }
      set {
        pubmversion_ = value;
      }
    }

    /// <summary>Field number for the "serverid" field.</summary>
    public const int ServeridFieldNumber = 5;
    private uint serverid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Serverid {
      get { return serverid_; }
      set {
        serverid_ = value;
      }
    }

    /// <summary>Field number for the "servertime" field.</summary>
    public const int ServertimeFieldNumber = 6;
    private long servertime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Servertime {
      get { return servertime_; }
      set {
        servertime_ = value;
      }
    }

    /// <summary>Field number for the "fversion" field.</summary>
    public const int FversionFieldNumber = 7;
    private uint fversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fversion {
      get { return fversion_; }
      set {
        fversion_ = value;
      }
    }

    /// <summary>Field number for the "nversion" field.</summary>
    public const int NversionFieldNumber = 8;
    private uint nversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nversion {
      get { return nversion_; }
      set {
        nversion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LoadUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LoadUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (!object.Equals(Frequent, other.Frequent)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (Pubmversion != other.Pubmversion) return false;
      if (Serverid != other.Serverid) return false;
      if (Servertime != other.Servertime) return false;
      if (Fversion != other.Fversion) return false;
      if (Nversion != other.Nversion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (frequent_ != null) hash ^= Frequent.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (Pubmversion != 0) hash ^= Pubmversion.GetHashCode();
      if (Serverid != 0) hash ^= Serverid.GetHashCode();
      if (Servertime != 0L) hash ^= Servertime.GetHashCode();
      if (Fversion != 0) hash ^= Fversion.GetHashCode();
      if (Nversion != 0) hash ^= Nversion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (frequent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Frequent);
      }
      if (normal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Normal);
      }
      if (Pubmversion != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pubmversion);
      }
      if (Serverid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Serverid);
      }
      if (Servertime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Servertime);
      }
      if (Fversion != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Fversion);
      }
      if (Nversion != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Nversion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (frequent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frequent);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (Pubmversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pubmversion);
      }
      if (Serverid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Serverid);
      }
      if (Servertime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Servertime);
      }
      if (Fversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fversion);
      }
      if (Nversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nversion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LoadUser other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.frequent_ != null) {
        if (frequent_ == null) {
          frequent_ = pb.ProtobufManager.New<global::Pb.BinFrequentRole>();
        }
        Frequent.MergeFrom(other.Frequent);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = pb.ProtobufManager.New<global::Pb.BinNormalRole>();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.Pubmversion != 0) {
        Pubmversion = other.Pubmversion;
      }
      if (other.Serverid != 0) {
        Serverid = other.Serverid;
      }
      if (other.Servertime != 0L) {
        Servertime = other.Servertime;
      }
      if (other.Fversion != 0) {
        Fversion = other.Fversion;
      }
      if (other.Nversion != 0) {
        Nversion = other.Nversion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            if (frequent_ == null) {
              frequent_ = pb.ProtobufManager.New<global::Pb.BinFrequentRole>();
            }
            input.ReadMessage(frequent_);
            break;
          }
          case 26: {
            if (normal_ == null) {
              normal_ = pb.ProtobufManager.New<global::Pb.BinNormalRole>();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 32: {
            Pubmversion = input.ReadUInt32();
            break;
          }
          case 40: {
            Serverid = input.ReadUInt32();
            break;
          }
          case 48: {
            Servertime = input.ReadInt64();
            break;
          }
          case 56: {
            Fversion = input.ReadUInt32();
            break;
          }
          case 64: {
            Nversion = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GsRoomInfo : pb::IMessage<GsRoomInfo> {
    private static readonly pb::MessageParser<GsRoomInfo> _parser = new pb::MessageParser<GsRoomInfo>(() => pb.ProtobufManager.New<GsRoomInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roomid = 0;
      Owner = 0;
      Mapid = 0;
      Version = 0;
      Maxnum = 0;
      Grpmem = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsRoomInfo(GsRoomInfo other) : this() {
      roomid_ = other.roomid_;
      owner_ = other.owner_;
      mapid_ = other.mapid_;
      version_ = other.version_;
      maxnum_ = other.maxnum_;
      grpmem_ = other.grpmem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsRoomInfo Clone() {
      return new GsRoomInfo(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private ulong roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "maxnum" field.</summary>
    public const int MaxnumFieldNumber = 5;
    private uint maxnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxnum {
      get { return maxnum_; }
      set {
        maxnum_ = value;
      }
    }

    /// <summary>Field number for the "grpmem" field.</summary>
    public const int GrpmemFieldNumber = 6;
    private uint grpmem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grpmem {
      get { return grpmem_; }
      set {
        grpmem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (Owner != other.Owner) return false;
      if (Mapid != other.Mapid) return false;
      if (Version != other.Version) return false;
      if (Maxnum != other.Maxnum) return false;
      if (Grpmem != other.Grpmem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roomid != 0UL) hash ^= Roomid.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Maxnum != 0) hash ^= Maxnum.GetHashCode();
      if (Grpmem != 0) hash ^= Grpmem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roomid);
      }
      if (Owner != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Owner);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mapid);
      }
      if (Version != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Version);
      }
      if (Maxnum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Maxnum);
      }
      if (Grpmem != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Grpmem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roomid);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Maxnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxnum);
      }
      if (Grpmem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grpmem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Roomid != 0UL) {
        Roomid = other.Roomid;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Maxnum != 0) {
        Maxnum = other.Maxnum;
      }
      if (other.Grpmem != 0) {
        Grpmem = other.Grpmem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadUInt64();
            break;
          }
          case 16: {
            Owner = input.ReadUInt32();
            break;
          }
          case 24: {
            Mapid = input.ReadInt32();
            break;
          }
          case 32: {
            Version = input.ReadInt64();
            break;
          }
          case 40: {
            Maxnum = input.ReadUInt32();
            break;
          }
          case 48: {
            Grpmem = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GsRoomMember : pb::IMessage<GsRoomMember> {
    private static readonly pb::MessageParser<GsRoomMember> _parser = new pb::MessageParser<GsRoomMember>(() => pb.ProtobufManager.New<GsRoomMember>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsRoomMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsRoomMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
      Grpid = 0;
      Pos = 0;
      Ready = false;
      Operation = 0;
      Isrobot = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsRoomMember(GsRoomMember other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
      grpid_ = other.grpid_;
      pos_ = other.pos_;
      ready_ = other.ready_;
      operation_ = other.operation_;
      isrobot_ = other.isrobot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsRoomMember Clone() {
      return new GsRoomMember(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grpid" field.</summary>
    public const int GrpidFieldNumber = 3;
    private uint grpid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grpid {
      get { return grpid_; }
      set {
        grpid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 5;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 6;
    private uint operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "isrobot" field.</summary>
    public const int IsrobotFieldNumber = 7;
    private bool isrobot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isrobot {
      get { return isrobot_; }
      set {
        isrobot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsRoomMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsRoomMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Grpid != other.Grpid) return false;
      if (Pos != other.Pos) return false;
      if (Ready != other.Ready) return false;
      if (Operation != other.Operation) return false;
      if (Isrobot != other.Isrobot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Grpid != 0) hash ^= Grpid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (Isrobot != false) hash ^= Isrobot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Grpid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Grpid);
      }
      if (Pos != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pos);
      }
      if (Ready != false) {
        output.WriteRawTag(40);
        output.WriteBool(Ready);
      }
      if (Operation != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Operation);
      }
      if (Isrobot != false) {
        output.WriteRawTag(56);
        output.WriteBool(Isrobot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Grpid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grpid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Operation);
      }
      if (Isrobot != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsRoomMember other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Grpid != 0) {
        Grpid = other.Grpid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.Isrobot != false) {
        Isrobot = other.Isrobot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Grpid = input.ReadUInt32();
            break;
          }
          case 32: {
            Pos = input.ReadUInt32();
            break;
          }
          case 40: {
            Ready = input.ReadBool();
            break;
          }
          case 48: {
            Operation = input.ReadUInt32();
            break;
          }
          case 56: {
            Isrobot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_CreateRoom : pb::IMessage<C2S_CreateRoom> {
    private static readonly pb::MessageParser<C2S_CreateRoom> _parser = new pb::MessageParser<C2S_CreateRoom>(() => pb.ProtobufManager.New<C2S_CreateRoom>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
      Name = "";
      Version = 0;
      Grpmem = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoom(C2S_CreateRoom other) : this() {
      mapid_ = other.mapid_;
      name_ = other.name_;
      version_ = other.version_;
      grpmem_ = other.grpmem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoom Clone() {
      return new C2S_CreateRoom(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "grpmem" field.</summary>
    public const int GrpmemFieldNumber = 4;
    private uint grpmem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grpmem {
      get { return grpmem_; }
      set {
        grpmem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (Grpmem != other.Grpmem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Grpmem != 0) hash ^= Grpmem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mapid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Version != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Version);
      }
      if (Grpmem != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Grpmem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Grpmem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grpmem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Grpmem != 0) {
        Grpmem = other.Grpmem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt64();
            break;
          }
          case 32: {
            Grpmem = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CreateRoomRet : pb::IMessage<S2C_CreateRoomRet> {
    private static readonly pb::MessageParser<S2C_CreateRoomRet> _parser = new pb::MessageParser<S2C_CreateRoomRet>(() => pb.ProtobufManager.New<S2C_CreateRoomRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CreateRoomRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRoomRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      pb.ProtobufManager.Reclaim<global::Pb.GsRoomInfo>(roominfo_);
      roominfo_ = null;
      for (int i = 0; i < roommember_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.GsRoomMember>(roommember_[i]);
      }
      roommember_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRoomRet(S2C_CreateRoomRet other) : this() {
      errno_ = other.errno_;
      Roominfo = other.roominfo_ != null ? other.Roominfo.Clone() : null;
      roommember_ = other.roommember_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRoomRet Clone() {
      return new S2C_CreateRoomRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 2;
    private global::Pb.GsRoomInfo roominfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.GsRoomInfo Roominfo {
      get { return roominfo_; }
      set {
        roominfo_ = value;
      }
    }

    /// <summary>Field number for the "roommember" field.</summary>
    public const int RoommemberFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.GsRoomMember> _repeated_roommember_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.GsRoomMember.Parser);
    private readonly pbc::RepeatedField<global::Pb.GsRoomMember> roommember_ = new pbc::RepeatedField<global::Pb.GsRoomMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.GsRoomMember> Roommember {
      get { return roommember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CreateRoomRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CreateRoomRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (!object.Equals(Roominfo, other.Roominfo)) return false;
      if(!roommember_.Equals(other.roommember_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (roominfo_ != null) hash ^= Roominfo.GetHashCode();
      hash ^= roommember_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (roominfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Roominfo);
      }
      roommember_.WriteTo(output, _repeated_roommember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (roominfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roominfo);
      }
      size += roommember_.CalculateSize(_repeated_roommember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CreateRoomRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.roominfo_ != null) {
        if (roominfo_ == null) {
          roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
        }
        Roominfo.MergeFrom(other.Roominfo);
      }
      roommember_.Add(other.roommember_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            if (roominfo_ == null) {
              roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
            }
            input.ReadMessage(roominfo_);
            break;
          }
          case 26: {
            roommember_.AddEntriesFrom(input, _repeated_roommember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_JoinRoom : pb::IMessage<C2S_JoinRoom> {
    private static readonly pb::MessageParser<C2S_JoinRoom> _parser = new pb::MessageParser<C2S_JoinRoom>(() => pb.ProtobufManager.New<C2S_JoinRoom>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_JoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Name = "";
      Version = 0;
      Roomid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoom(C2S_JoinRoom other) : this() {
      name_ = other.name_;
      version_ = other.version_;
      roomid_ = other.roomid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoom Clone() {
      return new C2S_JoinRoom(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 3;
    private ulong roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_JoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_JoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (Roomid != other.Roomid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Roomid != 0UL) hash ^= Roomid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Version != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Version);
      }
      if (Roomid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Roomid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Roomid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roomid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_JoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Roomid != 0UL) {
        Roomid = other.Roomid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadInt64();
            break;
          }
          case 24: {
            Roomid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_JoinRoomRet : pb::IMessage<S2C_JoinRoomRet> {
    private static readonly pb::MessageParser<S2C_JoinRoomRet> _parser = new pb::MessageParser<S2C_JoinRoomRet>(() => pb.ProtobufManager.New<S2C_JoinRoomRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_JoinRoomRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRoomRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      pb.ProtobufManager.Reclaim<global::Pb.GsRoomInfo>(roominfo_);
      roominfo_ = null;
      for (int i = 0; i < roommember_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.GsRoomMember>(roommember_[i]);
      }
      roommember_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRoomRet(S2C_JoinRoomRet other) : this() {
      errno_ = other.errno_;
      Roominfo = other.roominfo_ != null ? other.Roominfo.Clone() : null;
      roommember_ = other.roommember_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRoomRet Clone() {
      return new S2C_JoinRoomRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 2;
    private global::Pb.GsRoomInfo roominfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.GsRoomInfo Roominfo {
      get { return roominfo_; }
      set {
        roominfo_ = value;
      }
    }

    /// <summary>Field number for the "roommember" field.</summary>
    public const int RoommemberFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.GsRoomMember> _repeated_roommember_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.GsRoomMember.Parser);
    private readonly pbc::RepeatedField<global::Pb.GsRoomMember> roommember_ = new pbc::RepeatedField<global::Pb.GsRoomMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.GsRoomMember> Roommember {
      get { return roommember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_JoinRoomRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_JoinRoomRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (!object.Equals(Roominfo, other.Roominfo)) return false;
      if(!roommember_.Equals(other.roommember_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (roominfo_ != null) hash ^= Roominfo.GetHashCode();
      hash ^= roommember_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (roominfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Roominfo);
      }
      roommember_.WriteTo(output, _repeated_roommember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (roominfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roominfo);
      }
      size += roommember_.CalculateSize(_repeated_roommember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_JoinRoomRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.roominfo_ != null) {
        if (roominfo_ == null) {
          roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
        }
        Roominfo.MergeFrom(other.Roominfo);
      }
      roommember_.Add(other.roommember_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            if (roominfo_ == null) {
              roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
            }
            input.ReadMessage(roominfo_);
            break;
          }
          case 26: {
            roommember_.AddEntriesFrom(input, _repeated_roommember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_LeaveRoom : pb::IMessage<C2S_LeaveRoom> {
    private static readonly pb::MessageParser<C2S_LeaveRoom> _parser = new pb::MessageParser<C2S_LeaveRoom>(() => pb.ProtobufManager.New<C2S_LeaveRoom>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LeaveRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LeaveRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LeaveRoom(C2S_LeaveRoom other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LeaveRoom Clone() {
      return new C2S_LeaveRoom(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LeaveRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LeaveRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LeaveRoom other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_LeaveRoomRet : pb::IMessage<S2C_LeaveRoomRet> {
    private static readonly pb::MessageParser<S2C_LeaveRoomRet> _parser = new pb::MessageParser<S2C_LeaveRoomRet>(() => pb.ProtobufManager.New<S2C_LeaveRoomRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LeaveRoomRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveRoomRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveRoomRet(S2C_LeaveRoomRet other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveRoomRet Clone() {
      return new S2C_LeaveRoomRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LeaveRoomRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LeaveRoomRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LeaveRoomRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomUpdate : pb::IMessage<S2C_RoomUpdate> {
    private static readonly pb::MessageParser<S2C_RoomUpdate> _parser = new pb::MessageParser<S2C_RoomUpdate>(() => pb.ProtobufManager.New<S2C_RoomUpdate>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.GsRoomInfo>(roominfo_);
      roominfo_ = null;
      for (int i = 0; i < roommember_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.GsRoomMember>(roommember_[i]);
      }
      roommember_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomUpdate(S2C_RoomUpdate other) : this() {
      Roominfo = other.roominfo_ != null ? other.Roominfo.Clone() : null;
      roommember_ = other.roommember_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomUpdate Clone() {
      return new S2C_RoomUpdate(this);
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 1;
    private global::Pb.GsRoomInfo roominfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.GsRoomInfo Roominfo {
      get { return roominfo_; }
      set {
        roominfo_ = value;
      }
    }

    /// <summary>Field number for the "roommember" field.</summary>
    public const int RoommemberFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.GsRoomMember> _repeated_roommember_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.GsRoomMember.Parser);
    private readonly pbc::RepeatedField<global::Pb.GsRoomMember> roommember_ = new pbc::RepeatedField<global::Pb.GsRoomMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.GsRoomMember> Roommember {
      get { return roommember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Roominfo, other.Roominfo)) return false;
      if(!roommember_.Equals(other.roommember_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roominfo_ != null) hash ^= Roominfo.GetHashCode();
      hash ^= roommember_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roominfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Roominfo);
      }
      roommember_.WriteTo(output, _repeated_roommember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roominfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roominfo);
      }
      size += roommember_.CalculateSize(_repeated_roommember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomUpdate other) {
      if (other == null) {
        return;
      }
      if (other.roominfo_ != null) {
        if (roominfo_ == null) {
          roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
        }
        Roominfo.MergeFrom(other.Roominfo);
      }
      roommember_.Add(other.roommember_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roominfo_ == null) {
              roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
            }
            input.ReadMessage(roominfo_);
            break;
          }
          case 18: {
            roommember_.AddEntriesFrom(input, _repeated_roommember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RoomReady : pb::IMessage<C2S_RoomReady> {
    private static readonly pb::MessageParser<C2S_RoomReady> _parser = new pb::MessageParser<C2S_RoomReady>(() => pb.ProtobufManager.New<C2S_RoomReady>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ready = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomReady(C2S_RoomReady other) : this() {
      ready_ = other.ready_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomReady Clone() {
      return new C2S_RoomReady(this);
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 1;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ready != other.Ready) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ready != false) hash ^= Ready.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ready != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ready);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ready != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomReady other) {
      if (other == null) {
        return;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomReadyRet : pb::IMessage<S2C_RoomReadyRet> {
    private static readonly pb::MessageParser<S2C_RoomReadyRet> _parser = new pb::MessageParser<S2C_RoomReadyRet>(() => pb.ProtobufManager.New<S2C_RoomReadyRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomReadyRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomReadyRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Ready = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomReadyRet(S2C_RoomReadyRet other) : this() {
      errno_ = other.errno_;
      ready_ = other.ready_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomReadyRet Clone() {
      return new S2C_RoomReadyRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 2;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomReadyRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomReadyRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Ready != other.Ready) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Ready != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ready);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomReadyRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RoomChangePos : pb::IMessage<C2S_RoomChangePos> {
    private static readonly pb::MessageParser<C2S_RoomChangePos> _parser = new pb::MessageParser<C2S_RoomChangePos>(() => pb.ProtobufManager.New<C2S_RoomChangePos>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomChangePos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomChangePos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Pos = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomChangePos(C2S_RoomChangePos other) : this() {
      pos_ = other.pos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomChangePos Clone() {
      return new C2S_RoomChangePos(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomChangePos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomChangePos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomChangePos other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomChangePosRet : pb::IMessage<S2C_RoomChangePosRet> {
    private static readonly pb::MessageParser<S2C_RoomChangePosRet> _parser = new pb::MessageParser<S2C_RoomChangePosRet>(() => pb.ProtobufManager.New<S2C_RoomChangePosRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomChangePosRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomChangePosRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Newpos = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomChangePosRet(S2C_RoomChangePosRet other) : this() {
      errno_ = other.errno_;
      newpos_ = other.newpos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomChangePosRet Clone() {
      return new S2C_RoomChangePosRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "newpos" field.</summary>
    public const int NewposFieldNumber = 2;
    private uint newpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Newpos {
      get { return newpos_; }
      set {
        newpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomChangePosRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomChangePosRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Newpos != other.Newpos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Newpos != 0) hash ^= Newpos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Newpos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Newpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Newpos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Newpos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomChangePosRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Newpos != 0) {
        Newpos = other.Newpos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Newpos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RoomChangeMap : pb::IMessage<C2S_RoomChangeMap> {
    private static readonly pb::MessageParser<C2S_RoomChangeMap> _parser = new pb::MessageParser<C2S_RoomChangeMap>(() => pb.ProtobufManager.New<C2S_RoomChangeMap>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomChangeMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomChangeMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomChangeMap(C2S_RoomChangeMap other) : this() {
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomChangeMap Clone() {
      return new C2S_RoomChangeMap(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomChangeMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomChangeMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomChangeMap other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomChangeMapRet : pb::IMessage<S2C_RoomChangeMapRet> {
    private static readonly pb::MessageParser<S2C_RoomChangeMapRet> _parser = new pb::MessageParser<S2C_RoomChangeMapRet>(() => pb.ProtobufManager.New<S2C_RoomChangeMapRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomChangeMapRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomChangeMapRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Mapid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomChangeMapRet(S2C_RoomChangeMapRet other) : this() {
      errno_ = other.errno_;
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomChangeMapRet Clone() {
      return new S2C_RoomChangeMapRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 2;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomChangeMapRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomChangeMapRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Mapid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomChangeMapRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_StartRoomGame : pb::IMessage<C2S_StartRoomGame> {
    private static readonly pb::MessageParser<C2S_StartRoomGame> _parser = new pb::MessageParser<C2S_StartRoomGame>(() => pb.ProtobufManager.New<C2S_StartRoomGame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_StartRoomGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_StartRoomGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_StartRoomGame(C2S_StartRoomGame other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_StartRoomGame Clone() {
      return new C2S_StartRoomGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_StartRoomGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_StartRoomGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_StartRoomGame other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_StartRoomGame : pb::IMessage<S2C_StartRoomGame> {
    private static readonly pb::MessageParser<S2C_StartRoomGame> _parser = new pb::MessageParser<S2C_StartRoomGame>(() => pb.ProtobufManager.New<S2C_StartRoomGame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_StartRoomGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StartRoomGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Sceneid = 0;
      Bsid = 0;
      Mapid = 0;
      Errno = 0;
      Starttype = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StartRoomGame(S2C_StartRoomGame other) : this() {
      sceneid_ = other.sceneid_;
      bsid_ = other.bsid_;
      mapid_ = other.mapid_;
      errno_ = other.errno_;
      starttype_ = other.starttype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StartRoomGame Clone() {
      return new S2C_StartRoomGame(this);
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 1;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    /// <summary>Field number for the "bsid" field.</summary>
    public const int BsidFieldNumber = 2;
    private int bsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bsid {
      get { return bsid_; }
      set {
        bsid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 4;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "starttype" field.</summary>
    public const int StarttypeFieldNumber = 5;
    private uint starttype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttype {
      get { return starttype_; }
      set {
        starttype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_StartRoomGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_StartRoomGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sceneid != other.Sceneid) return false;
      if (Bsid != other.Bsid) return false;
      if (Mapid != other.Mapid) return false;
      if (Errno != other.Errno) return false;
      if (Starttype != other.Starttype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      if (Bsid != 0) hash ^= Bsid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Starttype != 0) hash ^= Starttype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sceneid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sceneid);
      }
      if (Bsid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bsid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
      if (Errno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Errno);
      }
      if (Starttype != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Starttype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      if (Bsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bsid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Starttype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starttype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_StartRoomGame other) {
      if (other == null) {
        return;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
      if (other.Bsid != 0) {
        Bsid = other.Bsid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Starttype != 0) {
        Starttype = other.Starttype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sceneid = input.ReadUInt32();
            break;
          }
          case 16: {
            Bsid = input.ReadInt32();
            break;
          }
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 32: {
            Errno = input.ReadInt32();
            break;
          }
          case 40: {
            Starttype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_AutoJoinRoom : pb::IMessage<C2S_AutoJoinRoom> {
    private static readonly pb::MessageParser<C2S_AutoJoinRoom> _parser = new pb::MessageParser<C2S_AutoJoinRoom>(() => pb.ProtobufManager.New<C2S_AutoJoinRoom>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AutoJoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AutoJoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
      Name = "";
      Version = 0;
      Grpmem = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AutoJoinRoom(C2S_AutoJoinRoom other) : this() {
      mapid_ = other.mapid_;
      name_ = other.name_;
      version_ = other.version_;
      grpmem_ = other.grpmem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AutoJoinRoom Clone() {
      return new C2S_AutoJoinRoom(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "grpmem" field.</summary>
    public const int GrpmemFieldNumber = 4;
    private uint grpmem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grpmem {
      get { return grpmem_; }
      set {
        grpmem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AutoJoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AutoJoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (Grpmem != other.Grpmem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Grpmem != 0) hash ^= Grpmem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mapid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Version != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Version);
      }
      if (Grpmem != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Grpmem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Grpmem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grpmem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AutoJoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Grpmem != 0) {
        Grpmem = other.Grpmem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt64();
            break;
          }
          case 32: {
            Grpmem = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AutoJoinRoomRet : pb::IMessage<S2C_AutoJoinRoomRet> {
    private static readonly pb::MessageParser<S2C_AutoJoinRoomRet> _parser = new pb::MessageParser<S2C_AutoJoinRoomRet>(() => pb.ProtobufManager.New<S2C_AutoJoinRoomRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AutoJoinRoomRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AutoJoinRoomRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      pb.ProtobufManager.Reclaim<global::Pb.GsRoomInfo>(roominfo_);
      roominfo_ = null;
      for (int i = 0; i < roommember_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.GsRoomMember>(roommember_[i]);
      }
      roommember_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AutoJoinRoomRet(S2C_AutoJoinRoomRet other) : this() {
      errno_ = other.errno_;
      Roominfo = other.roominfo_ != null ? other.Roominfo.Clone() : null;
      roommember_ = other.roommember_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AutoJoinRoomRet Clone() {
      return new S2C_AutoJoinRoomRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 2;
    private global::Pb.GsRoomInfo roominfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.GsRoomInfo Roominfo {
      get { return roominfo_; }
      set {
        roominfo_ = value;
      }
    }

    /// <summary>Field number for the "roommember" field.</summary>
    public const int RoommemberFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.GsRoomMember> _repeated_roommember_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.GsRoomMember.Parser);
    private readonly pbc::RepeatedField<global::Pb.GsRoomMember> roommember_ = new pbc::RepeatedField<global::Pb.GsRoomMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.GsRoomMember> Roommember {
      get { return roommember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AutoJoinRoomRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AutoJoinRoomRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (!object.Equals(Roominfo, other.Roominfo)) return false;
      if(!roommember_.Equals(other.roommember_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (roominfo_ != null) hash ^= Roominfo.GetHashCode();
      hash ^= roommember_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (roominfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Roominfo);
      }
      roommember_.WriteTo(output, _repeated_roommember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (roominfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roominfo);
      }
      size += roommember_.CalculateSize(_repeated_roommember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AutoJoinRoomRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.roominfo_ != null) {
        if (roominfo_ == null) {
          roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
        }
        Roominfo.MergeFrom(other.Roominfo);
      }
      roommember_.Add(other.roommember_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            if (roominfo_ == null) {
              roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
            }
            input.ReadMessage(roominfo_);
            break;
          }
          case 26: {
            roommember_.AddEntriesFrom(input, _repeated_roommember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_AutoJoinCSRoom : pb::IMessage<C2S_AutoJoinCSRoom> {
    private static readonly pb::MessageParser<C2S_AutoJoinCSRoom> _parser = new pb::MessageParser<C2S_AutoJoinCSRoom>(() => pb.ProtobufManager.New<C2S_AutoJoinCSRoom>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AutoJoinCSRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AutoJoinCSRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
      Name = "";
      Version = 0;
      Grpnum = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AutoJoinCSRoom(C2S_AutoJoinCSRoom other) : this() {
      mapid_ = other.mapid_;
      name_ = other.name_;
      version_ = other.version_;
      grpnum_ = other.grpnum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AutoJoinCSRoom Clone() {
      return new C2S_AutoJoinCSRoom(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "grpnum" field.</summary>
    public const int GrpnumFieldNumber = 4;
    private uint grpnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grpnum {
      get { return grpnum_; }
      set {
        grpnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AutoJoinCSRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AutoJoinCSRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (Grpnum != other.Grpnum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Grpnum != 0) hash ^= Grpnum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mapid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Version != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Version);
      }
      if (Grpnum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Grpnum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Grpnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grpnum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AutoJoinCSRoom other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Grpnum != 0) {
        Grpnum = other.Grpnum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt64();
            break;
          }
          case 32: {
            Grpnum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RoomKickUser : pb::IMessage<C2S_RoomKickUser> {
    private static readonly pb::MessageParser<C2S_RoomKickUser> _parser = new pb::MessageParser<C2S_RoomKickUser>(() => pb.ProtobufManager.New<C2S_RoomKickUser>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomKickUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomKickUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Kicked = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomKickUser(C2S_RoomKickUser other) : this() {
      kicked_ = other.kicked_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomKickUser Clone() {
      return new C2S_RoomKickUser(this);
    }

    /// <summary>Field number for the "kicked" field.</summary>
    public const int KickedFieldNumber = 1;
    private uint kicked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kicked {
      get { return kicked_; }
      set {
        kicked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomKickUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomKickUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kicked != other.Kicked) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kicked != 0) hash ^= Kicked.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kicked != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Kicked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kicked != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kicked);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomKickUser other) {
      if (other == null) {
        return;
      }
      if (other.Kicked != 0) {
        Kicked = other.Kicked;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Kicked = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomKickUserRet : pb::IMessage<S2C_RoomKickUserRet> {
    private static readonly pb::MessageParser<S2C_RoomKickUserRet> _parser = new pb::MessageParser<S2C_RoomKickUserRet>(() => pb.ProtobufManager.New<S2C_RoomKickUserRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomKickUserRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomKickUserRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      pb.ProtobufManager.Reclaim<global::Pb.GsRoomInfo>(roominfo_);
      roominfo_ = null;
      for (int i = 0; i < roommember_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.GsRoomMember>(roommember_[i]);
      }
      roommember_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomKickUserRet(S2C_RoomKickUserRet other) : this() {
      errno_ = other.errno_;
      Roominfo = other.roominfo_ != null ? other.Roominfo.Clone() : null;
      roommember_ = other.roommember_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomKickUserRet Clone() {
      return new S2C_RoomKickUserRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 2;
    private global::Pb.GsRoomInfo roominfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.GsRoomInfo Roominfo {
      get { return roominfo_; }
      set {
        roominfo_ = value;
      }
    }

    /// <summary>Field number for the "roommember" field.</summary>
    public const int RoommemberFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.GsRoomMember> _repeated_roommember_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.GsRoomMember.Parser);
    private readonly pbc::RepeatedField<global::Pb.GsRoomMember> roommember_ = new pbc::RepeatedField<global::Pb.GsRoomMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.GsRoomMember> Roommember {
      get { return roommember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomKickUserRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomKickUserRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (!object.Equals(Roominfo, other.Roominfo)) return false;
      if(!roommember_.Equals(other.roommember_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (roominfo_ != null) hash ^= Roominfo.GetHashCode();
      hash ^= roommember_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (roominfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Roominfo);
      }
      roommember_.WriteTo(output, _repeated_roommember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (roominfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roominfo);
      }
      size += roommember_.CalculateSize(_repeated_roommember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomKickUserRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.roominfo_ != null) {
        if (roominfo_ == null) {
          roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
        }
        Roominfo.MergeFrom(other.Roominfo);
      }
      roommember_.Add(other.roommember_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            if (roominfo_ == null) {
              roominfo_ = pb.ProtobufManager.New<global::Pb.GsRoomInfo>();
            }
            input.ReadMessage(roominfo_);
            break;
          }
          case 26: {
            roommember_.AddEntriesFrom(input, _repeated_roommember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomBeKicked : pb::IMessage<S2C_RoomBeKicked> {
    private static readonly pb::MessageParser<S2C_RoomBeKicked> _parser = new pb::MessageParser<S2C_RoomBeKicked>(() => pb.ProtobufManager.New<S2C_RoomBeKicked>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomBeKicked> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomBeKicked() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomBeKicked(S2C_RoomBeKicked other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomBeKicked Clone() {
      return new S2C_RoomBeKicked(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomBeKicked);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomBeKicked other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomBeKicked other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class C2S_RoomAddRobot : pb::IMessage<C2S_RoomAddRobot> {
    private static readonly pb::MessageParser<C2S_RoomAddRobot> _parser = new pb::MessageParser<C2S_RoomAddRobot>(() => pb.ProtobufManager.New<C2S_RoomAddRobot>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomAddRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomAddRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomAddRobot(C2S_RoomAddRobot other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomAddRobot Clone() {
      return new C2S_RoomAddRobot(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomAddRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomAddRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomAddRobot other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_RoomAddRobot : pb::IMessage<S2C_RoomAddRobot> {
    private static readonly pb::MessageParser<S2C_RoomAddRobot> _parser = new pb::MessageParser<S2C_RoomAddRobot>(() => pb.ProtobufManager.New<S2C_RoomAddRobot>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomAddRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomAddRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomAddRobot(S2C_RoomAddRobot other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomAddRobot Clone() {
      return new S2C_RoomAddRobot(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomAddRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomAddRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomAddRobot other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RoomRemoveRobot : pb::IMessage<C2S_RoomRemoveRobot> {
    private static readonly pb::MessageParser<C2S_RoomRemoveRobot> _parser = new pb::MessageParser<C2S_RoomRemoveRobot>(() => pb.ProtobufManager.New<C2S_RoomRemoveRobot>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomRemoveRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomRemoveRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomRemoveRobot(C2S_RoomRemoveRobot other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomRemoveRobot Clone() {
      return new C2S_RoomRemoveRobot(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomRemoveRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomRemoveRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomRemoveRobot other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RoomRemoveRobot : pb::IMessage<S2C_RoomRemoveRobot> {
    private static readonly pb::MessageParser<S2C_RoomRemoveRobot> _parser = new pb::MessageParser<S2C_RoomRemoveRobot>(() => pb.ProtobufManager.New<S2C_RoomRemoveRobot>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomRemoveRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomRemoveRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomRemoveRobot(S2C_RoomRemoveRobot other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomRemoveRobot Clone() {
      return new S2C_RoomRemoveRobot(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomRemoveRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomRemoveRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomRemoveRobot other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RoomFullRobot : pb::IMessage<C2S_RoomFullRobot> {
    private static readonly pb::MessageParser<C2S_RoomFullRobot> _parser = new pb::MessageParser<C2S_RoomFullRobot>(() => pb.ProtobufManager.New<C2S_RoomFullRobot>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RoomFullRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomFullRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomFullRobot(C2S_RoomFullRobot other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RoomFullRobot Clone() {
      return new C2S_RoomFullRobot(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RoomFullRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RoomFullRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RoomFullRobot other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_RoomFullRobot : pb::IMessage<S2C_RoomFullRobot> {
    private static readonly pb::MessageParser<S2C_RoomFullRobot> _parser = new pb::MessageParser<S2C_RoomFullRobot>(() => pb.ProtobufManager.New<S2C_RoomFullRobot>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoomFullRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomFullRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomFullRobot(S2C_RoomFullRobot other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoomFullRobot Clone() {
      return new S2C_RoomFullRobot(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoomFullRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoomFullRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoomFullRobot other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_BatQueMatchEnter : pb::IMessage<C2S_BatQueMatchEnter> {
    private static readonly pb::MessageParser<C2S_BatQueMatchEnter> _parser = new pb::MessageParser<C2S_BatQueMatchEnter>(() => pb.ProtobufManager.New<C2S_BatQueMatchEnter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BatQueMatchEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
      Teammode = 0;
      Elemtype = 0;
      Addteamr = 0;
      Onlyrobot = false;
      Strategy = 0;
      Schemeid = 0;
      Pointnum = 0;
      Grade = 0;
      Sparring = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchEnter(C2S_BatQueMatchEnter other) : this() {
      mapid_ = other.mapid_;
      teammode_ = other.teammode_;
      elemtype_ = other.elemtype_;
      addteamr_ = other.addteamr_;
      onlyrobot_ = other.onlyrobot_;
      strategy_ = other.strategy_;
      schemeid_ = other.schemeid_;
      pointnum_ = other.pointnum_;
      grade_ = other.grade_;
      sparring_ = other.sparring_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchEnter Clone() {
      return new C2S_BatQueMatchEnter(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "teammode" field.</summary>
    public const int TeammodeFieldNumber = 2;
    private uint teammode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teammode {
      get { return teammode_; }
      set {
        teammode_ = value;
      }
    }

    /// <summary>Field number for the "elemtype" field.</summary>
    public const int ElemtypeFieldNumber = 3;
    private global::Pb.BatMatchElemType elemtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BatMatchElemType Elemtype {
      get { return elemtype_; }
      set {
        elemtype_ = value;
      }
    }

    /// <summary>Field number for the "addteamr" field.</summary>
    public const int AddteamrFieldNumber = 4;
    private global::Pb.PUBGAddTeamrType addteamr_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.PUBGAddTeamrType Addteamr {
      get { return addteamr_; }
      set {
        addteamr_ = value;
      }
    }

    /// <summary>Field number for the "onlyrobot" field.</summary>
    public const int OnlyrobotFieldNumber = 5;
    private bool onlyrobot_;
    /// <summary>
    /// 人机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Onlyrobot {
      get { return onlyrobot_; }
      set {
        onlyrobot_ = value;
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 6;
    private global::Pb.BatMatchStrategy strategy_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BatMatchStrategy Strategy {
      get { return strategy_; }
      set {
        strategy_ = value;
      }
    }

    /// <summary>Field number for the "schemeid" field.</summary>
    public const int SchemeidFieldNumber = 7;
    private uint schemeid_;
    /// <summary>
    /// 关卡模式id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Schemeid {
      get { return schemeid_; }
      set {
        schemeid_ = value;
      }
    }

    /// <summary>Field number for the "pointnum" field.</summary>
    public const int PointnumFieldNumber = 8;
    private uint pointnum_;
    /// <summary>
    /// 关卡编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pointnum {
      get { return pointnum_; }
      set {
        pointnum_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 9;
    private uint grade_;
    /// <summary>
    /// 难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "sparring" field.</summary>
    public const int SparringFieldNumber = 10;
    private bool sparring_;
    /// <summary>
    /// 陪练
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sparring {
      get { return sparring_; }
      set {
        sparring_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BatQueMatchEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BatQueMatchEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      if (Teammode != other.Teammode) return false;
      if (Elemtype != other.Elemtype) return false;
      if (Addteamr != other.Addteamr) return false;
      if (Onlyrobot != other.Onlyrobot) return false;
      if (Strategy != other.Strategy) return false;
      if (Schemeid != other.Schemeid) return false;
      if (Pointnum != other.Pointnum) return false;
      if (Grade != other.Grade) return false;
      if (Sparring != other.Sparring) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Teammode != 0) hash ^= Teammode.GetHashCode();
      if (Elemtype != 0) hash ^= Elemtype.GetHashCode();
      if (Addteamr != 0) hash ^= Addteamr.GetHashCode();
      if (Onlyrobot != false) hash ^= Onlyrobot.GetHashCode();
      if (Strategy != 0) hash ^= Strategy.GetHashCode();
      if (Schemeid != 0) hash ^= Schemeid.GetHashCode();
      if (Pointnum != 0) hash ^= Pointnum.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Sparring != false) hash ^= Sparring.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mapid);
      }
      if (Teammode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Teammode);
      }
      if (Elemtype != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Elemtype);
      }
      if (Addteamr != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Addteamr);
      }
      if (Onlyrobot != false) {
        output.WriteRawTag(40);
        output.WriteBool(Onlyrobot);
      }
      if (Strategy != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Strategy);
      }
      if (Schemeid != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Schemeid);
      }
      if (Pointnum != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Pointnum);
      }
      if (Grade != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Grade);
      }
      if (Sparring != false) {
        output.WriteRawTag(80);
        output.WriteBool(Sparring);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Teammode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teammode);
      }
      if (Elemtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Elemtype);
      }
      if (Addteamr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Addteamr);
      }
      if (Onlyrobot != false) {
        size += 1 + 1;
      }
      if (Strategy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Strategy);
      }
      if (Schemeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Schemeid);
      }
      if (Pointnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pointnum);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (Sparring != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BatQueMatchEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Teammode != 0) {
        Teammode = other.Teammode;
      }
      if (other.Elemtype != 0) {
        Elemtype = other.Elemtype;
      }
      if (other.Addteamr != 0) {
        Addteamr = other.Addteamr;
      }
      if (other.Onlyrobot != false) {
        Onlyrobot = other.Onlyrobot;
      }
      if (other.Strategy != 0) {
        Strategy = other.Strategy;
      }
      if (other.Schemeid != 0) {
        Schemeid = other.Schemeid;
      }
      if (other.Pointnum != 0) {
        Pointnum = other.Pointnum;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Sparring != false) {
        Sparring = other.Sparring;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 16: {
            Teammode = input.ReadUInt32();
            break;
          }
          case 24: {
            elemtype_ = (global::Pb.BatMatchElemType) input.ReadEnum();
            break;
          }
          case 32: {
            addteamr_ = (global::Pb.PUBGAddTeamrType) input.ReadEnum();
            break;
          }
          case 40: {
            Onlyrobot = input.ReadBool();
            break;
          }
          case 48: {
            strategy_ = (global::Pb.BatMatchStrategy) input.ReadEnum();
            break;
          }
          case 56: {
            Schemeid = input.ReadUInt32();
            break;
          }
          case 64: {
            Pointnum = input.ReadUInt32();
            break;
          }
          case 72: {
            Grade = input.ReadUInt32();
            break;
          }
          case 80: {
            Sparring = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_BatQueMatchEnter : pb::IMessage<S2C_BatQueMatchEnter> {
    private static readonly pb::MessageParser<S2C_BatQueMatchEnter> _parser = new pb::MessageParser<S2C_BatQueMatchEnter>(() => pb.ProtobufManager.New<S2C_BatQueMatchEnter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BatQueMatchEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.C2S_BatQueMatchEnter>(enterinfo_);
      enterinfo_ = null;
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchEnter(S2C_BatQueMatchEnter other) : this() {
      Enterinfo = other.enterinfo_ != null ? other.Enterinfo.Clone() : null;
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchEnter Clone() {
      return new S2C_BatQueMatchEnter(this);
    }

    /// <summary>Field number for the "enterinfo" field.</summary>
    public const int EnterinfoFieldNumber = 1;
    private global::Pb.C2S_BatQueMatchEnter enterinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2S_BatQueMatchEnter Enterinfo {
      get { return enterinfo_; }
      set {
        enterinfo_ = value;
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 2;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BatQueMatchEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BatQueMatchEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Enterinfo, other.Enterinfo)) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (enterinfo_ != null) hash ^= Enterinfo.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (enterinfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Enterinfo);
      }
      if (Errno != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (enterinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enterinfo);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BatQueMatchEnter other) {
      if (other == null) {
        return;
      }
      if (other.enterinfo_ != null) {
        if (enterinfo_ == null) {
          enterinfo_ = pb.ProtobufManager.New<global::Pb.C2S_BatQueMatchEnter>();
        }
        Enterinfo.MergeFrom(other.Enterinfo);
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (enterinfo_ == null) {
              enterinfo_ = pb.ProtobufManager.New<global::Pb.C2S_BatQueMatchEnter>();
            }
            input.ReadMessage(enterinfo_);
            break;
          }
          case 16: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_BatQueMatchLeave : pb::IMessage<C2S_BatQueMatchLeave> {
    private static readonly pb::MessageParser<C2S_BatQueMatchLeave> _parser = new pb::MessageParser<C2S_BatQueMatchLeave>(() => pb.ProtobufManager.New<C2S_BatQueMatchLeave>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BatQueMatchLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchLeave(C2S_BatQueMatchLeave other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchLeave Clone() {
      return new C2S_BatQueMatchLeave(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BatQueMatchLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BatQueMatchLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BatQueMatchLeave other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_BatQueMatchLeave : pb::IMessage<S2C_BatQueMatchLeave> {
    private static readonly pb::MessageParser<S2C_BatQueMatchLeave> _parser = new pb::MessageParser<S2C_BatQueMatchLeave>(() => pb.ProtobufManager.New<S2C_BatQueMatchLeave>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BatQueMatchLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Srcroleid = 0;
      Srcrolename = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchLeave(S2C_BatQueMatchLeave other) : this() {
      errno_ = other.errno_;
      srcroleid_ = other.srcroleid_;
      srcrolename_ = other.srcrolename_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchLeave Clone() {
      return new S2C_BatQueMatchLeave(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "srcroleid" field.</summary>
    public const int SrcroleidFieldNumber = 2;
    private uint srcroleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Srcroleid {
      get { return srcroleid_; }
      set {
        srcroleid_ = value;
      }
    }

    /// <summary>Field number for the "srcrolename" field.</summary>
    public const int SrcrolenameFieldNumber = 3;
    private string srcrolename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Srcrolename {
      get { return srcrolename_; }
      set {
        srcrolename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BatQueMatchLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BatQueMatchLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Srcroleid != other.Srcroleid) return false;
      if (Srcrolename != other.Srcrolename) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Srcroleid != 0) hash ^= Srcroleid.GetHashCode();
      if (Srcrolename.Length != 0) hash ^= Srcrolename.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Srcroleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Srcroleid);
      }
      if (Srcrolename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Srcrolename);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Srcroleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Srcroleid);
      }
      if (Srcrolename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Srcrolename);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BatQueMatchLeave other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Srcroleid != 0) {
        Srcroleid = other.Srcroleid;
      }
      if (other.Srcrolename.Length != 0) {
        Srcrolename = other.Srcrolename;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Srcroleid = input.ReadUInt32();
            break;
          }
          case 26: {
            Srcrolename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_BatQueMatchInfo : pb::IMessage<C2S_BatQueMatchInfo> {
    private static readonly pb::MessageParser<C2S_BatQueMatchInfo> _parser = new pb::MessageParser<C2S_BatQueMatchInfo>(() => pb.ProtobufManager.New<C2S_BatQueMatchInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BatQueMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchInfo(C2S_BatQueMatchInfo other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchInfo Clone() {
      return new C2S_BatQueMatchInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BatQueMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BatQueMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BatQueMatchInfo other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_BatQueMatchInfo : pb::IMessage<S2C_BatQueMatchInfo> {
    private static readonly pb::MessageParser<S2C_BatQueMatchInfo> _parser = new pb::MessageParser<S2C_BatQueMatchInfo>(() => pb.ProtobufManager.New<S2C_BatQueMatchInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BatQueMatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Inmatch = false;
      pb.ProtobufManager.Reclaim<global::Pb.C2S_BatQueMatchEnter>(enterinfo_);
      enterinfo_ = null;
      Queueplynum = 0;
      Needmaxply = 0;
      Waitsecond = 0;
      Aiopensecond = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchInfo(S2C_BatQueMatchInfo other) : this() {
      inmatch_ = other.inmatch_;
      Enterinfo = other.enterinfo_ != null ? other.Enterinfo.Clone() : null;
      queueplynum_ = other.queueplynum_;
      needmaxply_ = other.needmaxply_;
      waitsecond_ = other.waitsecond_;
      aiopensecond_ = other.aiopensecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchInfo Clone() {
      return new S2C_BatQueMatchInfo(this);
    }

    /// <summary>Field number for the "inmatch" field.</summary>
    public const int InmatchFieldNumber = 1;
    private bool inmatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inmatch {
      get { return inmatch_; }
      set {
        inmatch_ = value;
      }
    }

    /// <summary>Field number for the "enterinfo" field.</summary>
    public const int EnterinfoFieldNumber = 2;
    private global::Pb.C2S_BatQueMatchEnter enterinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2S_BatQueMatchEnter Enterinfo {
      get { return enterinfo_; }
      set {
        enterinfo_ = value;
      }
    }

    /// <summary>Field number for the "queueplynum" field.</summary>
    public const int QueueplynumFieldNumber = 3;
    private int queueplynum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Queueplynum {
      get { return queueplynum_; }
      set {
        queueplynum_ = value;
      }
    }

    /// <summary>Field number for the "needmaxply" field.</summary>
    public const int NeedmaxplyFieldNumber = 4;
    private int needmaxply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Needmaxply {
      get { return needmaxply_; }
      set {
        needmaxply_ = value;
      }
    }

    /// <summary>Field number for the "waitsecond" field.</summary>
    public const int WaitsecondFieldNumber = 5;
    private int waitsecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Waitsecond {
      get { return waitsecond_; }
      set {
        waitsecond_ = value;
      }
    }

    /// <summary>Field number for the "aiopensecond" field.</summary>
    public const int AiopensecondFieldNumber = 6;
    private int aiopensecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Aiopensecond {
      get { return aiopensecond_; }
      set {
        aiopensecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BatQueMatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BatQueMatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Inmatch != other.Inmatch) return false;
      if (!object.Equals(Enterinfo, other.Enterinfo)) return false;
      if (Queueplynum != other.Queueplynum) return false;
      if (Needmaxply != other.Needmaxply) return false;
      if (Waitsecond != other.Waitsecond) return false;
      if (Aiopensecond != other.Aiopensecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Inmatch != false) hash ^= Inmatch.GetHashCode();
      if (enterinfo_ != null) hash ^= Enterinfo.GetHashCode();
      if (Queueplynum != 0) hash ^= Queueplynum.GetHashCode();
      if (Needmaxply != 0) hash ^= Needmaxply.GetHashCode();
      if (Waitsecond != 0) hash ^= Waitsecond.GetHashCode();
      if (Aiopensecond != 0) hash ^= Aiopensecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Inmatch != false) {
        output.WriteRawTag(8);
        output.WriteBool(Inmatch);
      }
      if (enterinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Enterinfo);
      }
      if (Queueplynum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Queueplynum);
      }
      if (Needmaxply != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Needmaxply);
      }
      if (Waitsecond != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Waitsecond);
      }
      if (Aiopensecond != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Aiopensecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Inmatch != false) {
        size += 1 + 1;
      }
      if (enterinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enterinfo);
      }
      if (Queueplynum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Queueplynum);
      }
      if (Needmaxply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Needmaxply);
      }
      if (Waitsecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Waitsecond);
      }
      if (Aiopensecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Aiopensecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BatQueMatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.Inmatch != false) {
        Inmatch = other.Inmatch;
      }
      if (other.enterinfo_ != null) {
        if (enterinfo_ == null) {
          enterinfo_ = pb.ProtobufManager.New<global::Pb.C2S_BatQueMatchEnter>();
        }
        Enterinfo.MergeFrom(other.Enterinfo);
      }
      if (other.Queueplynum != 0) {
        Queueplynum = other.Queueplynum;
      }
      if (other.Needmaxply != 0) {
        Needmaxply = other.Needmaxply;
      }
      if (other.Waitsecond != 0) {
        Waitsecond = other.Waitsecond;
      }
      if (other.Aiopensecond != 0) {
        Aiopensecond = other.Aiopensecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Inmatch = input.ReadBool();
            break;
          }
          case 18: {
            if (enterinfo_ == null) {
              enterinfo_ = pb.ProtobufManager.New<global::Pb.C2S_BatQueMatchEnter>();
            }
            input.ReadMessage(enterinfo_);
            break;
          }
          case 24: {
            Queueplynum = input.ReadInt32();
            break;
          }
          case 32: {
            Needmaxply = input.ReadInt32();
            break;
          }
          case 40: {
            Waitsecond = input.ReadInt32();
            break;
          }
          case 48: {
            Aiopensecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_BatQueMatchPreInfo : pb::IMessage<C2S_BatQueMatchPreInfo> {
    private static readonly pb::MessageParser<C2S_BatQueMatchPreInfo> _parser = new pb::MessageParser<C2S_BatQueMatchPreInfo>(() => pb.ProtobufManager.New<C2S_BatQueMatchPreInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BatQueMatchPreInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchPreInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teammode = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchPreInfo(C2S_BatQueMatchPreInfo other) : this() {
      teammode_ = other.teammode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchPreInfo Clone() {
      return new C2S_BatQueMatchPreInfo(this);
    }

    /// <summary>Field number for the "teammode" field.</summary>
    public const int TeammodeFieldNumber = 1;
    private uint teammode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teammode {
      get { return teammode_; }
      set {
        teammode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BatQueMatchPreInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BatQueMatchPreInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teammode != other.Teammode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teammode != 0) hash ^= Teammode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teammode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Teammode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teammode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teammode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BatQueMatchPreInfo other) {
      if (other == null) {
        return;
      }
      if (other.Teammode != 0) {
        Teammode = other.Teammode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Teammode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_BatQueMatchQueInfo : pb::IMessage<C2S_BatQueMatchQueInfo> {
    private static readonly pb::MessageParser<C2S_BatQueMatchQueInfo> _parser = new pb::MessageParser<C2S_BatQueMatchQueInfo>(() => pb.ProtobufManager.New<C2S_BatQueMatchQueInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BatQueMatchQueInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchQueInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchQueInfo(C2S_BatQueMatchQueInfo other) : this() {
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BatQueMatchQueInfo Clone() {
      return new C2S_BatQueMatchQueInfo(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BatQueMatchQueInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BatQueMatchQueInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BatQueMatchQueInfo other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_BatQueMatchQueInfo : pb::IMessage<S2C_BatQueMatchQueInfo> {
    private static readonly pb::MessageParser<S2C_BatQueMatchQueInfo> _parser = new pb::MessageParser<S2C_BatQueMatchQueInfo>(() => pb.ProtobufManager.New<S2C_BatQueMatchQueInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BatQueMatchQueInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchQueInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Mapid = 0;
      for (int i = 0; i < infos_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.S2C_BatQueMatchQueInfo.Types.Mode>(infos_[i]);
      }
      infos_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchQueInfo(S2C_BatQueMatchQueInfo other) : this() {
      mapid_ = other.mapid_;
      infos_ = other.infos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BatQueMatchQueInfo Clone() {
      return new S2C_BatQueMatchQueInfo(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.S2C_BatQueMatchQueInfo.Types.Mode> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.S2C_BatQueMatchQueInfo.Types.Mode.Parser);
    private readonly pbc::RepeatedField<global::Pb.S2C_BatQueMatchQueInfo.Types.Mode> infos_ = new pbc::RepeatedField<global::Pb.S2C_BatQueMatchQueInfo.Types.Mode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.S2C_BatQueMatchQueInfo.Types.Mode> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BatQueMatchQueInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BatQueMatchQueInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      hash ^= infos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mapid);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BatQueMatchQueInfo other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      infos_.Add(other.infos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_BatQueMatchQueInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Mode : pb::IMessage<Mode> {
        private static readonly pb::MessageParser<Mode> _parser = new pb::MessageParser<Mode>(() => pb.ProtobufManager.New<Mode>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.S2C_BatQueMatchQueInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Teammode = 0;
          Queueplynum = 0;
          Needmaxply = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mode(Mode other) : this() {
          teammode_ = other.teammode_;
          queueplynum_ = other.queueplynum_;
          needmaxply_ = other.needmaxply_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mode Clone() {
          return new Mode(this);
        }

        /// <summary>Field number for the "teammode" field.</summary>
        public const int TeammodeFieldNumber = 1;
        private uint teammode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Teammode {
          get { return teammode_; }
          set {
            teammode_ = value;
          }
        }

        /// <summary>Field number for the "queueplynum" field.</summary>
        public const int QueueplynumFieldNumber = 2;
        private int queueplynum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Queueplynum {
          get { return queueplynum_; }
          set {
            queueplynum_ = value;
          }
        }

        /// <summary>Field number for the "needmaxply" field.</summary>
        public const int NeedmaxplyFieldNumber = 3;
        private int needmaxply_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Needmaxply {
          get { return needmaxply_; }
          set {
            needmaxply_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Teammode != other.Teammode) return false;
          if (Queueplynum != other.Queueplynum) return false;
          if (Needmaxply != other.Needmaxply) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Teammode != 0) hash ^= Teammode.GetHashCode();
          if (Queueplynum != 0) hash ^= Queueplynum.GetHashCode();
          if (Needmaxply != 0) hash ^= Needmaxply.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Teammode != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Teammode);
          }
          if (Queueplynum != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Queueplynum);
          }
          if (Needmaxply != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Needmaxply);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Teammode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teammode);
          }
          if (Queueplynum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Queueplynum);
          }
          if (Needmaxply != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Needmaxply);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mode other) {
          if (other == null) {
            return;
          }
          if (other.Teammode != 0) {
            Teammode = other.Teammode;
          }
          if (other.Queueplynum != 0) {
            Queueplynum = other.Queueplynum;
          }
          if (other.Needmaxply != 0) {
            Needmaxply = other.Needmaxply;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Teammode = input.ReadUInt32();
                break;
              }
              case 16: {
                Queueplynum = input.ReadInt32();
                break;
              }
              case 24: {
                Needmaxply = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class C2S_AcctBind : pb::IMessage<C2S_AcctBind> {
    private static readonly pb::MessageParser<C2S_AcctBind> _parser = new pb::MessageParser<C2S_AcctBind>(() => pb.ProtobufManager.New<C2S_AcctBind>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AcctBind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AcctBind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ip = "";
      Email = "";
      Password = "";
      Nick = "";
      Passmd5 = "";
      Bindtype = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AcctBind(C2S_AcctBind other) : this() {
      ip_ = other.ip_;
      email_ = other.email_;
      password_ = other.password_;
      nick_ = other.nick_;
      passmd5_ = other.passmd5_;
      bindtype_ = other.bindtype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AcctBind Clone() {
      return new C2S_AcctBind(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 4;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passmd5" field.</summary>
    public const int Passmd5FieldNumber = 5;
    private string passmd5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passmd5 {
      get { return passmd5_; }
      set {
        passmd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindtype" field.</summary>
    public const int BindtypeFieldNumber = 6;
    private string bindtype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bindtype {
      get { return bindtype_; }
      set {
        bindtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AcctBind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AcctBind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (Nick != other.Nick) return false;
      if (Passmd5 != other.Passmd5) return false;
      if (Bindtype != other.Bindtype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Passmd5.Length != 0) hash ^= Passmd5.GetHashCode();
      if (Bindtype.Length != 0) hash ^= Bindtype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nick);
      }
      if (Passmd5.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Passmd5);
      }
      if (Bindtype.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Bindtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Passmd5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passmd5);
      }
      if (Bindtype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bindtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AcctBind other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Passmd5.Length != 0) {
        Passmd5 = other.Passmd5;
      }
      if (other.Bindtype.Length != 0) {
        Bindtype = other.Bindtype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Nick = input.ReadString();
            break;
          }
          case 42: {
            Passmd5 = input.ReadString();
            break;
          }
          case 50: {
            Bindtype = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AcctBind : pb::IMessage<S2C_AcctBind> {
    private static readonly pb::MessageParser<S2C_AcctBind> _parser = new pb::MessageParser<S2C_AcctBind>(() => pb.ProtobufManager.New<S2C_AcctBind>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AcctBind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AcctBind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Dytnumber = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AcctBind(S2C_AcctBind other) : this() {
      errno_ = other.errno_;
      dytnumber_ = other.dytnumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AcctBind Clone() {
      return new S2C_AcctBind(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "dytnumber" field.</summary>
    public const int DytnumberFieldNumber = 2;
    private int dytnumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dytnumber {
      get { return dytnumber_; }
      set {
        dytnumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AcctBind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AcctBind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Dytnumber != other.Dytnumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Dytnumber != 0) hash ^= Dytnumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Dytnumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dytnumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Dytnumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dytnumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AcctBind other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Dytnumber != 0) {
        Dytnumber = other.Dytnumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Dytnumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_GetAcctInfo : pb::IMessage<C2S_GetAcctInfo> {
    private static readonly pb::MessageParser<C2S_GetAcctInfo> _parser = new pb::MessageParser<C2S_GetAcctInfo>(() => pb.ProtobufManager.New<C2S_GetAcctInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAcctInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAcctInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ip = "";
      Email = "";
      Password = "";
      Passmd5 = "";
      Bindtype = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAcctInfo(C2S_GetAcctInfo other) : this() {
      ip_ = other.ip_;
      email_ = other.email_;
      password_ = other.password_;
      passmd5_ = other.passmd5_;
      bindtype_ = other.bindtype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAcctInfo Clone() {
      return new C2S_GetAcctInfo(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passmd5" field.</summary>
    public const int Passmd5FieldNumber = 4;
    private string passmd5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passmd5 {
      get { return passmd5_; }
      set {
        passmd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindtype" field.</summary>
    public const int BindtypeFieldNumber = 5;
    private string bindtype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bindtype {
      get { return bindtype_; }
      set {
        bindtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAcctInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAcctInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (Passmd5 != other.Passmd5) return false;
      if (Bindtype != other.Bindtype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Passmd5.Length != 0) hash ^= Passmd5.GetHashCode();
      if (Bindtype.Length != 0) hash ^= Bindtype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Passmd5.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Passmd5);
      }
      if (Bindtype.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Bindtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Passmd5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passmd5);
      }
      if (Bindtype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bindtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAcctInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Passmd5.Length != 0) {
        Passmd5 = other.Passmd5;
      }
      if (other.Bindtype.Length != 0) {
        Bindtype = other.Bindtype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Passmd5 = input.ReadString();
            break;
          }
          case 42: {
            Bindtype = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetAcctInfo : pb::IMessage<S2C_GetAcctInfo> {
    private static readonly pb::MessageParser<S2C_GetAcctInfo> _parser = new pb::MessageParser<S2C_GetAcctInfo>(() => pb.ProtobufManager.New<S2C_GetAcctInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAcctInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAcctInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Number = "";
      Account = "";
      Password = "";
      NumberTaget = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAcctInfo(S2C_GetAcctInfo other) : this() {
      errno_ = other.errno_;
      number_ = other.number_;
      account_ = other.account_;
      password_ = other.password_;
      numberTaget_ = other.numberTaget_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAcctInfo Clone() {
      return new S2C_GetAcctInfo(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private string number_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 3;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number_taget" field.</summary>
    public const int NumberTagetFieldNumber = 5;
    private string numberTaget_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumberTaget {
      get { return numberTaget_; }
      set {
        numberTaget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAcctInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAcctInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Number != other.Number) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (NumberTaget != other.NumberTaget) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Number.Length != 0) hash ^= Number.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (NumberTaget.Length != 0) hash ^= NumberTaget.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Number);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (NumberTaget.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NumberTaget);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (NumberTaget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NumberTaget);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAcctInfo other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Number.Length != 0) {
        Number = other.Number;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.NumberTaget.Length != 0) {
        NumberTaget = other.NumberTaget;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            Number = input.ReadString();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 42: {
            NumberTaget = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_UserRename : pb::IMessage<C2S_UserRename> {
    private static readonly pb::MessageParser<C2S_UserRename> _parser = new pb::MessageParser<C2S_UserRename>(() => pb.ProtobufManager.New<C2S_UserRename>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UserRename> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserRename() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ip = "";
      Newname = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserRename(C2S_UserRename other) : this() {
      ip_ = other.ip_;
      newname_ = other.newname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserRename Clone() {
      return new C2S_UserRename(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newname" field.</summary>
    public const int NewnameFieldNumber = 2;
    private string newname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Newname {
      get { return newname_; }
      set {
        newname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UserRename);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UserRename other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Newname != other.Newname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Newname.Length != 0) hash ^= Newname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Newname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Newname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Newname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Newname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UserRename other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Newname.Length != 0) {
        Newname = other.Newname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Newname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_UserRename : pb::IMessage<S2C_UserRename> {
    private static readonly pb::MessageParser<S2C_UserRename> _parser = new pb::MessageParser<S2C_UserRename>(() => pb.ProtobufManager.New<S2C_UserRename>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UserRename> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserRename() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Newname = "";
      Idx = 0;
      Relatename = "";
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserRename(S2C_UserRename other) : this() {
      newname_ = other.newname_;
      idx_ = other.idx_;
      relatename_ = other.relatename_;
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserRename Clone() {
      return new S2C_UserRename(this);
    }

    /// <summary>Field number for the "newname" field.</summary>
    public const int NewnameFieldNumber = 1;
    private string newname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Newname {
      get { return newname_; }
      set {
        newname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 2;
    private uint idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "relatename" field.</summary>
    public const int RelatenameFieldNumber = 3;
    private string relatename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Relatename {
      get { return relatename_; }
      set {
        relatename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 4;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UserRename);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UserRename other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Newname != other.Newname) return false;
      if (Idx != other.Idx) return false;
      if (Relatename != other.Relatename) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Newname.Length != 0) hash ^= Newname.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (Relatename.Length != 0) hash ^= Relatename.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Newname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Newname);
      }
      if (Idx != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Idx);
      }
      if (Relatename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Relatename);
      }
      if (Errno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Newname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Newname);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idx);
      }
      if (Relatename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Relatename);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UserRename other) {
      if (other == null) {
        return;
      }
      if (other.Newname.Length != 0) {
        Newname = other.Newname;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.Relatename.Length != 0) {
        Relatename = other.Relatename;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Newname = input.ReadString();
            break;
          }
          case 16: {
            Idx = input.ReadUInt32();
            break;
          }
          case 26: {
            Relatename = input.ReadString();
            break;
          }
          case 32: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_GMCommand : pb::IMessage<C2S_GMCommand> {
    private static readonly pb::MessageParser<C2S_GMCommand> _parser = new pb::MessageParser<C2S_GMCommand>(() => pb.ProtobufManager.New<C2S_GMCommand>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GMCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GMCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Cmd = "";
      Roleid = 0;
      Eid = 0;
      Bscmd = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GMCommand(C2S_GMCommand other) : this() {
      cmd_ = other.cmd_;
      roleid_ = other.roleid_;
      eid_ = other.eid_;
      bscmd_ = other.bscmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GMCommand Clone() {
      return new C2S_GMCommand(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "eid" field.</summary>
    public const int EidFieldNumber = 3;
    private ulong eid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Eid {
      get { return eid_; }
      set {
        eid_ = value;
      }
    }

    /// <summary>Field number for the "bscmd" field.</summary>
    public const int BscmdFieldNumber = 4;
    private bool bscmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bscmd {
      get { return bscmd_; }
      set {
        bscmd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GMCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GMCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Roleid != other.Roleid) return false;
      if (Eid != other.Eid) return false;
      if (Bscmd != other.Bscmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Eid != 0UL) hash ^= Eid.GetHashCode();
      if (Bscmd != false) hash ^= Bscmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (Eid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Eid);
      }
      if (Bscmd != false) {
        output.WriteRawTag(32);
        output.WriteBool(Bscmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Eid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Eid);
      }
      if (Bscmd != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GMCommand other) {
      if (other == null) {
        return;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Eid != 0UL) {
        Eid = other.Eid;
      }
      if (other.Bscmd != false) {
        Bscmd = other.Bscmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 24: {
            Eid = input.ReadUInt64();
            break;
          }
          case 32: {
            Bscmd = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GMCommandRet : pb::IMessage<S2C_GMCommandRet> {
    private static readonly pb::MessageParser<S2C_GMCommandRet> _parser = new pb::MessageParser<S2C_GMCommandRet>(() => pb.ProtobufManager.New<S2C_GMCommandRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GMCommandRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GMCommandRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ret = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GMCommandRet(S2C_GMCommandRet other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GMCommandRet Clone() {
      return new S2C_GMCommandRet(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GMCommandRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GMCommandRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GMCommandRet other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GMReloadRet : pb::IMessage<S2C_GMReloadRet> {
    private static readonly pb::MessageParser<S2C_GMReloadRet> _parser = new pb::MessageParser<S2C_GMReloadRet>(() => pb.ProtobufManager.New<S2C_GMReloadRet>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GMReloadRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GMReloadRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Filename = "";
      Servername = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GMReloadRet(S2C_GMReloadRet other) : this() {
      errno_ = other.errno_;
      filename_ = other.filename_;
      servername_ = other.servername_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GMReloadRet Clone() {
      return new S2C_GMReloadRet(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 2;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "servername" field.</summary>
    public const int ServernameFieldNumber = 3;
    private string servername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Servername {
      get { return servername_; }
      set {
        servername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GMReloadRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GMReloadRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Filename != other.Filename) return false;
      if (Servername != other.Servername) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Servername.Length != 0) hash ^= Servername.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filename);
      }
      if (Servername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Servername);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Servername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Servername);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GMReloadRet other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Servername.Length != 0) {
        Servername = other.Servername;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            Filename = input.ReadString();
            break;
          }
          case 26: {
            Servername = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_PlayerSetting : pb::IMessage<C2S_PlayerSetting> {
    private static readonly pb::MessageParser<C2S_PlayerSetting> _parser = new pb::MessageParser<C2S_PlayerSetting>(() => pb.ProtobufManager.New<C2S_PlayerSetting>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PlayerSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlayerSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.PlySetting>(setting_);
      setting_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlayerSetting(C2S_PlayerSetting other) : this() {
      Setting = other.setting_ != null ? other.Setting.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PlayerSetting Clone() {
      return new C2S_PlayerSetting(this);
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 1;
    private global::Pb.PlySetting setting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.PlySetting Setting {
      get { return setting_; }
      set {
        setting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PlayerSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PlayerSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Setting, other.Setting)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (setting_ != null) hash ^= Setting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (setting_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Setting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (setting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Setting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PlayerSetting other) {
      if (other == null) {
        return;
      }
      if (other.setting_ != null) {
        if (setting_ == null) {
          setting_ = pb.ProtobufManager.New<global::Pb.PlySetting>();
        }
        Setting.MergeFrom(other.Setting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (setting_ == null) {
              setting_ = pb.ProtobufManager.New<global::Pb.PlySetting>();
            }
            input.ReadMessage(setting_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_ConfirmRecon : pb::IMessage<C2S_ConfirmRecon> {
    private static readonly pb::MessageParser<C2S_ConfirmRecon> _parser = new pb::MessageParser<C2S_ConfirmRecon>(() => pb.ProtobufManager.New<C2S_ConfirmRecon>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ConfirmRecon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ConfirmRecon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Confirm = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ConfirmRecon(C2S_ConfirmRecon other) : this() {
      confirm_ = other.confirm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ConfirmRecon Clone() {
      return new C2S_ConfirmRecon(this);
    }

    /// <summary>Field number for the "confirm" field.</summary>
    public const int ConfirmFieldNumber = 1;
    private bool confirm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ConfirmRecon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ConfirmRecon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Confirm != other.Confirm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Confirm != false) hash ^= Confirm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Confirm != false) {
        output.WriteRawTag(8);
        output.WriteBool(Confirm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Confirm != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ConfirmRecon other) {
      if (other == null) {
        return;
      }
      if (other.Confirm != false) {
        Confirm = other.Confirm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Confirm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ConfirmRecon : pb::IMessage<S2C_ConfirmRecon> {
    private static readonly pb::MessageParser<S2C_ConfirmRecon> _parser = new pb::MessageParser<S2C_ConfirmRecon>(() => pb.ProtobufManager.New<S2C_ConfirmRecon>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ConfirmRecon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ConfirmRecon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ConfirmRecon(S2C_ConfirmRecon other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ConfirmRecon Clone() {
      return new S2C_ConfirmRecon(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ConfirmRecon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ConfirmRecon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ConfirmRecon other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_QueryScene : pb::IMessage<C2S_QueryScene> {
    private static readonly pb::MessageParser<C2S_QueryScene> _parser = new pb::MessageParser<C2S_QueryScene>(() => pb.ProtobufManager.New<C2S_QueryScene>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_QueryScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryScene(C2S_QueryScene other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryScene Clone() {
      return new C2S_QueryScene(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_QueryScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_QueryScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_QueryScene other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_QueryScene : pb::IMessage<S2C_QueryScene> {
    private static readonly pb::MessageParser<S2C_QueryScene> _parser = new pb::MessageParser<S2C_QueryScene>(() => pb.ProtobufManager.New<S2C_QueryScene>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_QueryScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryScene(S2C_QueryScene other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryScene Clone() {
      return new S2C_QueryScene(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_QueryScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_QueryScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_QueryScene other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyInfo : pb::IMessage<ApplyInfo> {
    private static readonly pb::MessageParser<ApplyInfo> _parser = new pb::MessageParser<ApplyInfo>(() => pb.ProtobufManager.New<ApplyInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
      Reason = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyInfo(ApplyInfo other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyInfo Clone() {
      return new ApplyInfo(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendAdd : pb::IMessage<C2S_FriendAdd> {
    private static readonly pb::MessageParser<C2S_FriendAdd> _parser = new pb::MessageParser<C2S_FriendAdd>(() => pb.ProtobufManager.New<C2S_FriendAdd>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Reason = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendAdd(C2S_FriendAdd other) : this() {
      roleid_ = other.roleid_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendAdd Clone() {
      return new C2S_FriendAdd(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendAdd other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_FriendAdd : pb::IMessage<S2C_FriendAdd> {
    private static readonly pb::MessageParser<S2C_FriendAdd> _parser = new pb::MessageParser<S2C_FriendAdd>(() => pb.ProtobufManager.New<S2C_FriendAdd>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
      pb.ProtobufManager.Reclaim<global::Pb.ApplyInfo>(applyinfo_);
      applyinfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendAdd(S2C_FriendAdd other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
      Applyinfo = other.applyinfo_ != null ? other.Applyinfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendAdd Clone() {
      return new S2C_FriendAdd(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "applyinfo" field.</summary>
    public const int ApplyinfoFieldNumber = 3;
    private global::Pb.ApplyInfo applyinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ApplyInfo Applyinfo {
      get { return applyinfo_; }
      set {
        applyinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      if (!object.Equals(Applyinfo, other.Applyinfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (applyinfo_ != null) hash ^= Applyinfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (applyinfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Applyinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (applyinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Applyinfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendAdd other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.applyinfo_ != null) {
        if (applyinfo_ == null) {
          applyinfo_ = pb.ProtobufManager.New<global::Pb.ApplyInfo>();
        }
        Applyinfo.MergeFrom(other.Applyinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (applyinfo_ == null) {
              applyinfo_ = pb.ProtobufManager.New<global::Pb.ApplyInfo>();
            }
            input.ReadMessage(applyinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_Applylist : pb::IMessage<C2S_Applylist> {
    private static readonly pb::MessageParser<C2S_Applylist> _parser = new pb::MessageParser<C2S_Applylist>(() => pb.ProtobufManager.New<C2S_Applylist>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Applylist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Applylist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Applylist(C2S_Applylist other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Applylist Clone() {
      return new C2S_Applylist(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Applylist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Applylist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Applylist other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_Applylist : pb::IMessage<S2C_Applylist> {
    private static readonly pb::MessageParser<S2C_Applylist> _parser = new pb::MessageParser<S2C_Applylist>(() => pb.ProtobufManager.New<S2C_Applylist>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Applylist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Applylist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      for (int i = 0; i < listdata_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.ApplyInfo>(listdata_[i]);
      }
      listdata_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Applylist(S2C_Applylist other) : this() {
      errno_ = other.errno_;
      listdata_ = other.listdata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Applylist Clone() {
      return new S2C_Applylist(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "listdata" field.</summary>
    public const int ListdataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.ApplyInfo> _repeated_listdata_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.ApplyInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.ApplyInfo> listdata_ = new pbc::RepeatedField<global::Pb.ApplyInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ApplyInfo> Listdata {
      get { return listdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Applylist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Applylist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if(!listdata_.Equals(other.listdata_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      hash ^= listdata_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      listdata_.WriteTo(output, _repeated_listdata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      size += listdata_.CalculateSize(_repeated_listdata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Applylist other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      listdata_.Add(other.listdata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            listdata_.AddEntriesFrom(input, _repeated_listdata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendAccept : pb::IMessage<C2S_FriendAccept> {
    private static readonly pb::MessageParser<C2S_FriendAccept> _parser = new pb::MessageParser<C2S_FriendAccept>(() => pb.ProtobufManager.New<C2S_FriendAccept>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendAccept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendAccept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendAccept(C2S_FriendAccept other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendAccept Clone() {
      return new C2S_FriendAccept(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendAccept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendAccept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendAccept other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_FriendAccept : pb::IMessage<S2C_FriendAccept> {
    private static readonly pb::MessageParser<S2C_FriendAccept> _parser = new pb::MessageParser<S2C_FriendAccept>(() => pb.ProtobufManager.New<S2C_FriendAccept>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendAccept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendAccept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Srcid = 0;
      Name = "";
      Online = false;
      Destid = 0;
      Roomid = 0;
      Teamid = 0;
      Sceneid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendAccept(S2C_FriendAccept other) : this() {
      errno_ = other.errno_;
      srcid_ = other.srcid_;
      name_ = other.name_;
      online_ = other.online_;
      destid_ = other.destid_;
      roomid_ = other.roomid_;
      teamid_ = other.teamid_;
      sceneid_ = other.sceneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendAccept Clone() {
      return new S2C_FriendAccept(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "srcid" field.</summary>
    public const int SrcidFieldNumber = 2;
    private uint srcid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Srcid {
      get { return srcid_; }
      set {
        srcid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private bool online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "destid" field.</summary>
    public const int DestidFieldNumber = 5;
    private uint destid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Destid {
      get { return destid_; }
      set {
        destid_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 6;
    private ulong roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 7;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 8;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendAccept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendAccept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Srcid != other.Srcid) return false;
      if (Name != other.Name) return false;
      if (Online != other.Online) return false;
      if (Destid != other.Destid) return false;
      if (Roomid != other.Roomid) return false;
      if (Teamid != other.Teamid) return false;
      if (Sceneid != other.Sceneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Srcid != 0) hash ^= Srcid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Online != false) hash ^= Online.GetHashCode();
      if (Destid != 0) hash ^= Destid.GetHashCode();
      if (Roomid != 0UL) hash ^= Roomid.GetHashCode();
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Srcid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Srcid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Online != false) {
        output.WriteRawTag(32);
        output.WriteBool(Online);
      }
      if (Destid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Destid);
      }
      if (Roomid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Roomid);
      }
      if (Teamid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Teamid);
      }
      if (Sceneid != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Sceneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Srcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Srcid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (Destid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Destid);
      }
      if (Roomid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roomid);
      }
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendAccept other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Srcid != 0) {
        Srcid = other.Srcid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Online != false) {
        Online = other.Online;
      }
      if (other.Destid != 0) {
        Destid = other.Destid;
      }
      if (other.Roomid != 0UL) {
        Roomid = other.Roomid;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Srcid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Online = input.ReadBool();
            break;
          }
          case 40: {
            Destid = input.ReadUInt32();
            break;
          }
          case 48: {
            Roomid = input.ReadUInt64();
            break;
          }
          case 56: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 64: {
            Sceneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendRefuse : pb::IMessage<C2S_FriendRefuse> {
    private static readonly pb::MessageParser<C2S_FriendRefuse> _parser = new pb::MessageParser<C2S_FriendRefuse>(() => pb.ProtobufManager.New<C2S_FriendRefuse>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendRefuse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendRefuse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendRefuse(C2S_FriendRefuse other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendRefuse Clone() {
      return new C2S_FriendRefuse(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendRefuse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendRefuse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendRefuse other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_FriendRefuse : pb::IMessage<S2C_FriendRefuse> {
    private static readonly pb::MessageParser<S2C_FriendRefuse> _parser = new pb::MessageParser<S2C_FriendRefuse>(() => pb.ProtobufManager.New<S2C_FriendRefuse>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendRefuse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendRefuse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
      Name = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendRefuse(S2C_FriendRefuse other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendRefuse Clone() {
      return new S2C_FriendRefuse(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendRefuse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendRefuse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendRefuse other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendDel : pb::IMessage<C2S_FriendDel> {
    private static readonly pb::MessageParser<C2S_FriendDel> _parser = new pb::MessageParser<C2S_FriendDel>(() => pb.ProtobufManager.New<C2S_FriendDel>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendDel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendDel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendDel(C2S_FriendDel other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendDel Clone() {
      return new C2S_FriendDel(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendDel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendDel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendDel other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_FriendDel : pb::IMessage<S2C_FriendDel> {
    private static readonly pb::MessageParser<S2C_FriendDel> _parser = new pb::MessageParser<S2C_FriendDel>(() => pb.ProtobufManager.New<S2C_FriendDel>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendDel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendDel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Srcid = 0;
      Destid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendDel(S2C_FriendDel other) : this() {
      errno_ = other.errno_;
      srcid_ = other.srcid_;
      destid_ = other.destid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendDel Clone() {
      return new S2C_FriendDel(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "srcid" field.</summary>
    public const int SrcidFieldNumber = 2;
    private uint srcid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Srcid {
      get { return srcid_; }
      set {
        srcid_ = value;
      }
    }

    /// <summary>Field number for the "destid" field.</summary>
    public const int DestidFieldNumber = 3;
    private uint destid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Destid {
      get { return destid_; }
      set {
        destid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendDel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendDel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Srcid != other.Srcid) return false;
      if (Destid != other.Destid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Srcid != 0) hash ^= Srcid.GetHashCode();
      if (Destid != 0) hash ^= Destid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Srcid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Srcid);
      }
      if (Destid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Destid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Srcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Srcid);
      }
      if (Destid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Destid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendDel other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Srcid != 0) {
        Srcid = other.Srcid;
      }
      if (other.Destid != 0) {
        Destid = other.Destid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Srcid = input.ReadUInt32();
            break;
          }
          case 24: {
            Destid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryInfo : pb::IMessage<QueryInfo> {
    private static readonly pb::MessageParser<QueryInfo> _parser = new pb::MessageParser<QueryInfo>(() => pb.ProtobufManager.New<QueryInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInfo(QueryInfo other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInfo Clone() {
      return new QueryInfo(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryInfo other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendFind : pb::IMessage<C2S_FriendFind> {
    private static readonly pb::MessageParser<C2S_FriendFind> _parser = new pb::MessageParser<C2S_FriendFind>(() => pb.ProtobufManager.New<C2S_FriendFind>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendFind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendFind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendFind(C2S_FriendFind other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendFind Clone() {
      return new C2S_FriendFind(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendFind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendFind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendFind other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_FriendFind : pb::IMessage<S2C_FriendFind> {
    private static readonly pb::MessageParser<S2C_FriendFind> _parser = new pb::MessageParser<S2C_FriendFind>(() => pb.ProtobufManager.New<S2C_FriendFind>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendFind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendFind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      for (int i = 0; i < queryinfo_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.QueryInfo>(queryinfo_[i]);
      }
      queryinfo_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendFind(S2C_FriendFind other) : this() {
      errno_ = other.errno_;
      queryinfo_ = other.queryinfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendFind Clone() {
      return new S2C_FriendFind(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "queryinfo" field.</summary>
    public const int QueryinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.QueryInfo> _repeated_queryinfo_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.QueryInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.QueryInfo> queryinfo_ = new pbc::RepeatedField<global::Pb.QueryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.QueryInfo> Queryinfo {
      get { return queryinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendFind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendFind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if(!queryinfo_.Equals(other.queryinfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      hash ^= queryinfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      queryinfo_.WriteTo(output, _repeated_queryinfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      size += queryinfo_.CalculateSize(_repeated_queryinfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendFind other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      queryinfo_.Add(other.queryinfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            queryinfo_.AddEntriesFrom(input, _repeated_queryinfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendInfo : pb::IMessage<FriendInfo> {
    private static readonly pb::MessageParser<FriendInfo> _parser = new pb::MessageParser<FriendInfo>(() => pb.ProtobufManager.New<FriendInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
      Online = false;
      Roomid = 0;
      Teamid = 0;
      Sceneid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfo(FriendInfo other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
      online_ = other.online_;
      roomid_ = other.roomid_;
      teamid_ = other.teamid_;
      sceneid_ = other.sceneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfo Clone() {
      return new FriendInfo(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 3;
    private bool online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 4;
    private ulong roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 5;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 6;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Online != other.Online) return false;
      if (Roomid != other.Roomid) return false;
      if (Teamid != other.Teamid) return false;
      if (Sceneid != other.Sceneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Online != false) hash ^= Online.GetHashCode();
      if (Roomid != 0UL) hash ^= Roomid.GetHashCode();
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Online != false) {
        output.WriteRawTag(24);
        output.WriteBool(Online);
      }
      if (Roomid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Roomid);
      }
      if (Teamid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Teamid);
      }
      if (Sceneid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Sceneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (Roomid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roomid);
      }
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendInfo other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Online != false) {
        Online = other.Online;
      }
      if (other.Roomid != 0UL) {
        Roomid = other.Roomid;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Online = input.ReadBool();
            break;
          }
          case 32: {
            Roomid = input.ReadUInt64();
            break;
          }
          case 40: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 48: {
            Sceneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendList : pb::IMessage<C2S_FriendList> {
    private static readonly pb::MessageParser<C2S_FriendList> _parser = new pb::MessageParser<C2S_FriendList>(() => pb.ProtobufManager.New<C2S_FriendList>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendList(C2S_FriendList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendList Clone() {
      return new C2S_FriendList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_FriendList : pb::IMessage<S2C_FriendList> {
    private static readonly pb::MessageParser<S2C_FriendList> _parser = new pb::MessageParser<S2C_FriendList>(() => pb.ProtobufManager.New<S2C_FriendList>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      for (int i = 0; i < friendinfo_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.FriendInfo>(friendinfo_[i]);
      }
      friendinfo_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendList(S2C_FriendList other) : this() {
      errno_ = other.errno_;
      friendinfo_ = other.friendinfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendList Clone() {
      return new S2C_FriendList(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "friendinfo" field.</summary>
    public const int FriendinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.FriendInfo> _repeated_friendinfo_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.FriendInfo> friendinfo_ = new pbc::RepeatedField<global::Pb.FriendInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.FriendInfo> Friendinfo {
      get { return friendinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if(!friendinfo_.Equals(other.friendinfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      hash ^= friendinfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      friendinfo_.WriteTo(output, _repeated_friendinfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      size += friendinfo_.CalculateSize(_repeated_friendinfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendList other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      friendinfo_.Add(other.friendinfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 18: {
            friendinfo_.AddEntriesFrom(input, _repeated_friendinfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_FriendUpdate : pb::IMessage<S2C_FriendUpdate> {
    private static readonly pb::MessageParser<S2C_FriendUpdate> _parser = new pb::MessageParser<S2C_FriendUpdate>(() => pb.ProtobufManager.New<S2C_FriendUpdate>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.FriendInfo>(friendinfo_);
      friendinfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendUpdate(S2C_FriendUpdate other) : this() {
      Friendinfo = other.friendinfo_ != null ? other.Friendinfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendUpdate Clone() {
      return new S2C_FriendUpdate(this);
    }

    /// <summary>Field number for the "friendinfo" field.</summary>
    public const int FriendinfoFieldNumber = 1;
    private global::Pb.FriendInfo friendinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.FriendInfo Friendinfo {
      get { return friendinfo_; }
      set {
        friendinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Friendinfo, other.Friendinfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (friendinfo_ != null) hash ^= Friendinfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (friendinfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Friendinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (friendinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friendinfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendUpdate other) {
      if (other == null) {
        return;
      }
      if (other.friendinfo_ != null) {
        if (friendinfo_ == null) {
          friendinfo_ = pb.ProtobufManager.New<global::Pb.FriendInfo>();
        }
        Friendinfo.MergeFrom(other.Friendinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (friendinfo_ == null) {
              friendinfo_ = pb.ProtobufManager.New<global::Pb.FriendInfo>();
            }
            input.ReadMessage(friendinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_RequestTeam : pb::IMessage<C2S_RequestTeam> {
    private static readonly pb::MessageParser<C2S_RequestTeam> _parser = new pb::MessageParser<C2S_RequestTeam>(() => pb.ProtobufManager.New<C2S_RequestTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RequestTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RequestTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RequestTeam(C2S_RequestTeam other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RequestTeam Clone() {
      return new C2S_RequestTeam(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RequestTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RequestTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RequestTeam other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RequestTeam : pb::IMessage<S2C_RequestTeam> {
    private static readonly pb::MessageParser<S2C_RequestTeam> _parser = new pb::MessageParser<S2C_RequestTeam>(() => pb.ProtobufManager.New<S2C_RequestTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RequestTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RequestTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Request = 0;
      Teamid = 0;
      Name = "";
      Roleid = 0;
      Destcharid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RequestTeam(S2C_RequestTeam other) : this() {
      errno_ = other.errno_;
      request_ = other.request_;
      teamid_ = other.teamid_;
      name_ = other.name_;
      roleid_ = other.roleid_;
      destcharid_ = other.destcharid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RequestTeam Clone() {
      return new S2C_RequestTeam(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 3;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 5;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "destcharid" field.</summary>
    public const int DestcharidFieldNumber = 6;
    private uint destcharid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Destcharid {
      get { return destcharid_; }
      set {
        destcharid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RequestTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RequestTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Request != other.Request) return false;
      if (Teamid != other.Teamid) return false;
      if (Name != other.Name) return false;
      if (Roleid != other.Roleid) return false;
      if (Destcharid != other.Destcharid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Destcharid != 0) hash ^= Destcharid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Request != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Request);
      }
      if (Teamid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Teamid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Roleid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Roleid);
      }
      if (Destcharid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Destcharid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Destcharid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Destcharid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RequestTeam other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Destcharid != 0) {
        Destcharid = other.Destcharid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Request = input.ReadUInt32();
            break;
          }
          case 24: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 48: {
            Destcharid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_AcceptTeam : pb::IMessage<C2S_AcceptTeam> {
    private static readonly pb::MessageParser<C2S_AcceptTeam> _parser = new pb::MessageParser<C2S_AcceptTeam>(() => pb.ProtobufManager.New<C2S_AcceptTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AcceptTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AcceptTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teamid = 0;
      Request = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AcceptTeam(C2S_AcceptTeam other) : this() {
      teamid_ = other.teamid_;
      request_ = other.request_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AcceptTeam Clone() {
      return new C2S_AcceptTeam(this);
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 1;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AcceptTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AcceptTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teamid != other.Teamid) return false;
      if (Request != other.Request) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teamid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Teamid);
      }
      if (Request != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AcceptTeam other) {
      if (other == null) {
        return;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 16: {
            Request = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AcceptTeam : pb::IMessage<S2C_AcceptTeam> {
    private static readonly pb::MessageParser<S2C_AcceptTeam> _parser = new pb::MessageParser<S2C_AcceptTeam>(() => pb.ProtobufManager.New<S2C_AcceptTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AcceptTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AcceptTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
      Request = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AcceptTeam(S2C_AcceptTeam other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
      request_ = other.request_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AcceptTeam Clone() {
      return new S2C_AcceptTeam(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AcceptTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AcceptTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      if (Request != other.Request) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (Request != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AcceptTeam other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 24: {
            Request = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_LeaveTeam : pb::IMessage<C2S_LeaveTeam> {
    private static readonly pb::MessageParser<C2S_LeaveTeam> _parser = new pb::MessageParser<C2S_LeaveTeam>(() => pb.ProtobufManager.New<C2S_LeaveTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LeaveTeam(C2S_LeaveTeam other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LeaveTeam Clone() {
      return new C2S_LeaveTeam(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LeaveTeam other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_LeaveTeam : pb::IMessage<S2C_LeaveTeam> {
    private static readonly pb::MessageParser<S2C_LeaveTeam> _parser = new pb::MessageParser<S2C_LeaveTeam>(() => pb.ProtobufManager.New<S2C_LeaveTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveTeam(S2C_LeaveTeam other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LeaveTeam Clone() {
      return new S2C_LeaveTeam(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LeaveTeam other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_KickTeam : pb::IMessage<C2S_KickTeam> {
    private static readonly pb::MessageParser<C2S_KickTeam> _parser = new pb::MessageParser<C2S_KickTeam>(() => pb.ProtobufManager.New<C2S_KickTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_KickTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_KickTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_KickTeam(C2S_KickTeam other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_KickTeam Clone() {
      return new C2S_KickTeam(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_KickTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_KickTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_KickTeam other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_KickTeam : pb::IMessage<S2C_KickTeam> {
    private static readonly pb::MessageParser<S2C_KickTeam> _parser = new pb::MessageParser<S2C_KickTeam>(() => pb.ProtobufManager.New<S2C_KickTeam>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_KickTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_KickTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Kicker = 0;
      Name = "";
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_KickTeam(S2C_KickTeam other) : this() {
      errno_ = other.errno_;
      kicker_ = other.kicker_;
      name_ = other.name_;
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_KickTeam Clone() {
      return new S2C_KickTeam(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "kicker" field.</summary>
    public const int KickerFieldNumber = 2;
    private uint kicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kicker {
      get { return kicker_; }
      set {
        kicker_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 4;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_KickTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_KickTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Kicker != other.Kicker) return false;
      if (Name != other.Name) return false;
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Kicker != 0) hash ^= Kicker.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Kicker != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Kicker);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Roleid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Kicker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kicker);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_KickTeam other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Kicker != 0) {
        Kicker = other.Kicker;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Kicker = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_TeamReady : pb::IMessage<C2S_TeamReady> {
    private static readonly pb::MessageParser<C2S_TeamReady> _parser = new pb::MessageParser<C2S_TeamReady>(() => pb.ProtobufManager.New<C2S_TeamReady>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TeamReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Ready = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamReady(C2S_TeamReady other) : this() {
      ready_ = other.ready_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamReady Clone() {
      return new C2S_TeamReady(this);
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 1;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TeamReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TeamReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ready != other.Ready) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ready != false) hash ^= Ready.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ready != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ready);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ready != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TeamReady other) {
      if (other == null) {
        return;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_TeamReady : pb::IMessage<S2C_TeamReady> {
    private static readonly pb::MessageParser<S2C_TeamReady> _parser = new pb::MessageParser<S2C_TeamReady>(() => pb.ProtobufManager.New<S2C_TeamReady>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TeamReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamReady(S2C_TeamReady other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamReady Clone() {
      return new S2C_TeamReady(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TeamReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TeamReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TeamReady other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_TeamRefuse : pb::IMessage<C2S_TeamRefuse> {
    private static readonly pb::MessageParser<C2S_TeamRefuse> _parser = new pb::MessageParser<C2S_TeamRefuse>(() => pb.ProtobufManager.New<C2S_TeamRefuse>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TeamRefuse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamRefuse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teamid = 0;
      Request = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamRefuse(C2S_TeamRefuse other) : this() {
      teamid_ = other.teamid_;
      request_ = other.request_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamRefuse Clone() {
      return new C2S_TeamRefuse(this);
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 1;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TeamRefuse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TeamRefuse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teamid != other.Teamid) return false;
      if (Request != other.Request) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teamid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Teamid);
      }
      if (Request != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TeamRefuse other) {
      if (other == null) {
        return;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 16: {
            Request = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_TeamRefuse : pb::IMessage<S2C_TeamRefuse> {
    private static readonly pb::MessageParser<S2C_TeamRefuse> _parser = new pb::MessageParser<S2C_TeamRefuse>(() => pb.ProtobufManager.New<S2C_TeamRefuse>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TeamRefuse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamRefuse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
      Name = "";
      Request = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamRefuse(S2C_TeamRefuse other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
      name_ = other.name_;
      request_ = other.request_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamRefuse Clone() {
      return new S2C_TeamRefuse(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TeamRefuse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TeamRefuse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Request != other.Request) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Request != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TeamRefuse other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Request = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_TeamCancel : pb::IMessage<C2S_TeamCancel> {
    private static readonly pb::MessageParser<C2S_TeamCancel> _parser = new pb::MessageParser<C2S_TeamCancel>(() => pb.ProtobufManager.New<C2S_TeamCancel>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TeamCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamCancel(C2S_TeamCancel other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TeamCancel Clone() {
      return new C2S_TeamCancel(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TeamCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TeamCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TeamCancel other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_TeamCancel : pb::IMessage<S2C_TeamCancel> {
    private static readonly pb::MessageParser<S2C_TeamCancel> _parser = new pb::MessageParser<S2C_TeamCancel>(() => pb.ProtobufManager.New<S2C_TeamCancel>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TeamCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Roleid = 0;
      Teamid = 0;
      Request = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamCancel(S2C_TeamCancel other) : this() {
      errno_ = other.errno_;
      roleid_ = other.roleid_;
      teamid_ = other.teamid_;
      request_ = other.request_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamCancel Clone() {
      return new S2C_TeamCancel(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 3;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TeamCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TeamCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Roleid != other.Roleid) return false;
      if (Teamid != other.Teamid) return false;
      if (Request != other.Request) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (Teamid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Teamid);
      }
      if (Request != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TeamCancel other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 24: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 32: {
            Request = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GsTeamInfo : pb::IMessage<GsTeamInfo> {
    private static readonly pb::MessageParser<GsTeamInfo> _parser = new pb::MessageParser<GsTeamInfo>(() => pb.ProtobufManager.New<GsTeamInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teamid = 0;
      Owner = 0;
      Maxnum = 0;
      Matchmode = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsTeamInfo(GsTeamInfo other) : this() {
      teamid_ = other.teamid_;
      owner_ = other.owner_;
      maxnum_ = other.maxnum_;
      matchmode_ = other.matchmode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsTeamInfo Clone() {
      return new GsTeamInfo(this);
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 1;
    private ulong teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "maxnum" field.</summary>
    public const int MaxnumFieldNumber = 3;
    private uint maxnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxnum {
      get { return maxnum_; }
      set {
        maxnum_ = value;
      }
    }

    /// <summary>Field number for the "matchmode" field.</summary>
    public const int MatchmodeFieldNumber = 4;
    private uint matchmode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchmode {
      get { return matchmode_; }
      set {
        matchmode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teamid != other.Teamid) return false;
      if (Owner != other.Owner) return false;
      if (Maxnum != other.Maxnum) return false;
      if (Matchmode != other.Matchmode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teamid != 0UL) hash ^= Teamid.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Maxnum != 0) hash ^= Maxnum.GetHashCode();
      if (Matchmode != 0) hash ^= Matchmode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teamid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Teamid);
      }
      if (Owner != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Owner);
      }
      if (Maxnum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maxnum);
      }
      if (Matchmode != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Matchmode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teamid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Teamid);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (Maxnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxnum);
      }
      if (Matchmode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchmode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsTeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.Teamid != 0UL) {
        Teamid = other.Teamid;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Maxnum != 0) {
        Maxnum = other.Maxnum;
      }
      if (other.Matchmode != 0) {
        Matchmode = other.Matchmode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Teamid = input.ReadUInt64();
            break;
          }
          case 16: {
            Owner = input.ReadUInt32();
            break;
          }
          case 24: {
            Maxnum = input.ReadUInt32();
            break;
          }
          case 32: {
            Matchmode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GsTeamMember : pb::IMessage<GsTeamMember> {
    private static readonly pb::MessageParser<GsTeamMember> _parser = new pb::MessageParser<GsTeamMember>(() => pb.ProtobufManager.New<GsTeamMember>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsTeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsTeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Name = "";
      Pos = 0;
      Accept = false;
      Ready = false;
      Request = 0;
      Logout = false;
      Charid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsTeamMember(GsTeamMember other) : this() {
      roleid_ = other.roleid_;
      name_ = other.name_;
      pos_ = other.pos_;
      accept_ = other.accept_;
      ready_ = other.ready_;
      request_ = other.request_;
      logout_ = other.logout_;
      charid_ = other.charid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsTeamMember Clone() {
      return new GsTeamMember(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 4;
    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { return accept_; }
      set {
        accept_ = value;
      }
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 5;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 6;
    private uint request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "logout" field.</summary>
    public const int LogoutFieldNumber = 7;
    private bool logout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Logout {
      get { return logout_; }
      set {
        logout_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 8;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsTeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsTeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Pos != other.Pos) return false;
      if (Accept != other.Accept) return false;
      if (Ready != other.Ready) return false;
      if (Request != other.Request) return false;
      if (Logout != other.Logout) return false;
      if (Charid != other.Charid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Accept != false) hash ^= Accept.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      if (Logout != false) hash ^= Logout.GetHashCode();
      if (Charid != 0) hash ^= Charid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      if (Accept != false) {
        output.WriteRawTag(32);
        output.WriteBool(Accept);
      }
      if (Ready != false) {
        output.WriteRawTag(40);
        output.WriteBool(Ready);
      }
      if (Request != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Request);
      }
      if (Logout != false) {
        output.WriteRawTag(56);
        output.WriteBool(Logout);
      }
      if (Charid != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Charid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Accept != false) {
        size += 1 + 1;
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Request);
      }
      if (Logout != false) {
        size += 1 + 1;
      }
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsTeamMember other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Accept != false) {
        Accept = other.Accept;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
      if (other.Logout != false) {
        Logout = other.Logout;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 32: {
            Accept = input.ReadBool();
            break;
          }
          case 40: {
            Ready = input.ReadBool();
            break;
          }
          case 48: {
            Request = input.ReadUInt32();
            break;
          }
          case 56: {
            Logout = input.ReadBool();
            break;
          }
          case 64: {
            Charid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_TeamUpdate : pb::IMessage<S2C_TeamUpdate> {
    private static readonly pb::MessageParser<S2C_TeamUpdate> _parser = new pb::MessageParser<S2C_TeamUpdate>(() => pb.ProtobufManager.New<S2C_TeamUpdate>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TeamUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.GsTeamInfo>(infos_);
      infos_ = null;
      for (int i = 0; i < members_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.GsTeamMember>(members_[i]);
      }
      members_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamUpdate(S2C_TeamUpdate other) : this() {
      Infos = other.infos_ != null ? other.Infos.Clone() : null;
      members_ = other.members_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TeamUpdate Clone() {
      return new S2C_TeamUpdate(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private global::Pb.GsTeamInfo infos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.GsTeamInfo Infos {
      get { return infos_; }
      set {
        infos_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.GsTeamMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.GsTeamMember.Parser);
    private readonly pbc::RepeatedField<global::Pb.GsTeamMember> members_ = new pbc::RepeatedField<global::Pb.GsTeamMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.GsTeamMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TeamUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TeamUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Infos, other.Infos)) return false;
      if(!members_.Equals(other.members_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infos_ != null) hash ^= Infos.GetHashCode();
      hash ^= members_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Infos);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Infos);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TeamUpdate other) {
      if (other == null) {
        return;
      }
      if (other.infos_ != null) {
        if (infos_ == null) {
          infos_ = pb.ProtobufManager.New<global::Pb.GsTeamInfo>();
        }
        Infos.MergeFrom(other.Infos);
      }
      members_.Add(other.members_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infos_ == null) {
              infos_ = pb.ProtobufManager.New<global::Pb.GsTeamInfo>();
            }
            input.ReadMessage(infos_);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_UpgradeLeader : pb::IMessage<C2S_UpgradeLeader> {
    private static readonly pb::MessageParser<C2S_UpgradeLeader> _parser = new pb::MessageParser<C2S_UpgradeLeader>(() => pb.ProtobufManager.New<C2S_UpgradeLeader>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UpgradeLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpgradeLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpgradeLeader(C2S_UpgradeLeader other) : this() {
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpgradeLeader Clone() {
      return new C2S_UpgradeLeader(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UpgradeLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UpgradeLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UpgradeLeader other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_UpgradeLeader : pb::IMessage<S2C_UpgradeLeader> {
    private static readonly pb::MessageParser<S2C_UpgradeLeader> _parser = new pb::MessageParser<S2C_UpgradeLeader>(() => pb.ProtobufManager.New<S2C_UpgradeLeader>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpgradeLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpgradeLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpgradeLeader(S2C_UpgradeLeader other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpgradeLeader Clone() {
      return new S2C_UpgradeLeader(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpgradeLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpgradeLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpgradeLeader other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ReloadInter : pb::IMessage<S2C_ReloadInter> {
    private static readonly pb::MessageParser<S2C_ReloadInter> _parser = new pb::MessageParser<S2C_ReloadInter>(() => pb.ProtobufManager.New<S2C_ReloadInter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ReloadInter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReloadInter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReloadInter(S2C_ReloadInter other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReloadInter Clone() {
      return new S2C_ReloadInter(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ReloadInter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ReloadInter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ReloadInter other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_ChangeCharacter : pb::IMessage<C2S_ChangeCharacter> {
    private static readonly pb::MessageParser<C2S_ChangeCharacter> _parser = new pb::MessageParser<C2S_ChangeCharacter>(() => pb.ProtobufManager.New<C2S_ChangeCharacter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ChangeCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChangeCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Charid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChangeCharacter(C2S_ChangeCharacter other) : this() {
      charid_ = other.charid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChangeCharacter Clone() {
      return new C2S_ChangeCharacter(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ChangeCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ChangeCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0) hash ^= Charid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Charid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ChangeCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ChangeCharacter : pb::IMessage<S2C_ChangeCharacter> {
    private static readonly pb::MessageParser<S2C_ChangeCharacter> _parser = new pb::MessageParser<S2C_ChangeCharacter>(() => pb.ProtobufManager.New<S2C_ChangeCharacter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ChangeCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChangeCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
      Charid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChangeCharacter(S2C_ChangeCharacter other) : this() {
      errno_ = other.errno_;
      charid_ = other.charid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChangeCharacter Clone() {
      return new S2C_ChangeCharacter(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 2;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ChangeCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ChangeCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      if (Charid != other.Charid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      if (Charid != 0) hash ^= Charid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
      if (Charid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Charid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ChangeCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
          case 16: {
            Charid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_EchoTest : pb::IMessage<C2S_EchoTest> {
    private static readonly pb::MessageParser<C2S_EchoTest> _parser = new pb::MessageParser<C2S_EchoTest>(() => pb.ProtobufManager.New<C2S_EchoTest>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_EchoTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EchoTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teststr = pb::ByteString.Empty;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EchoTest(C2S_EchoTest other) : this() {
      teststr_ = other.teststr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EchoTest Clone() {
      return new C2S_EchoTest(this);
    }

    /// <summary>Field number for the "teststr" field.</summary>
    public const int TeststrFieldNumber = 1;
    private pb::ByteString teststr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Teststr {
      get { return teststr_; }
      set {
        teststr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_EchoTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_EchoTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teststr != other.Teststr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teststr.Length != 0) hash ^= Teststr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teststr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Teststr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teststr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Teststr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_EchoTest other) {
      if (other == null) {
        return;
      }
      if (other.Teststr.Length != 0) {
        Teststr = other.Teststr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Teststr = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_EchoTest : pb::IMessage<S2C_EchoTest> {
    private static readonly pb::MessageParser<S2C_EchoTest> _parser = new pb::MessageParser<S2C_EchoTest>(() => pb.ProtobufManager.New<S2C_EchoTest>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EchoTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EchoTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teststr = pb::ByteString.Empty;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EchoTest(S2C_EchoTest other) : this() {
      teststr_ = other.teststr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EchoTest Clone() {
      return new S2C_EchoTest(this);
    }

    /// <summary>Field number for the "teststr" field.</summary>
    public const int TeststrFieldNumber = 1;
    private pb::ByteString teststr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Teststr {
      get { return teststr_; }
      set {
        teststr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EchoTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EchoTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teststr != other.Teststr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teststr.Length != 0) hash ^= Teststr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teststr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Teststr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teststr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Teststr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EchoTest other) {
      if (other == null) {
        return;
      }
      if (other.Teststr.Length != 0) {
        Teststr = other.Teststr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Teststr = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_Chat : pb::IMessage<C2S_Chat> {
    private static readonly pb::MessageParser<C2S_Chat> _parser = new pb::MessageParser<C2S_Chat>(() => pb.ProtobufManager.New<C2S_Chat>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Type = 0;
      Data = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Chat(C2S_Chat other) : this() {
      type_ = other.type_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Chat Clone() {
      return new C2S_Chat(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Pb.ChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Chat other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Pb.ChatType) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_Chat : pb::IMessage<S2C_Chat> {
    private static readonly pb::MessageParser<S2C_Chat> _parser = new pb::MessageParser<S2C_Chat>(() => pb.ProtobufManager.New<S2C_Chat>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Sender = 0;
      Name = "";
      Type = 0;
      Data = "";
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Chat(S2C_Chat other) : this() {
      sender_ = other.sender_;
      name_ = other.name_;
      type_ = other.type_;
      data_ = other.data_;
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Chat Clone() {
      return new S2C_Chat(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private uint sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Pb.ChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 5;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sender != other.Sender) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sender != 0) hash ^= Sender.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sender != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sender);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Data);
      }
      if (Errno != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sender);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Chat other) {
      if (other == null) {
        return;
      }
      if (other.Sender != 0) {
        Sender = other.Sender;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sender = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::Pb.ChatType) input.ReadEnum();
            break;
          }
          case 34: {
            Data = input.ReadString();
            break;
          }
          case 40: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_FriendChat : pb::IMessage<C2S_FriendChat> {
    private static readonly pb::MessageParser<C2S_FriendChat> _parser = new pb::MessageParser<C2S_FriendChat>(() => pb.ProtobufManager.New<C2S_FriendChat>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FriendChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Destid = 0;
      Data = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendChat(C2S_FriendChat other) : this() {
      destid_ = other.destid_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FriendChat Clone() {
      return new C2S_FriendChat(this);
    }

    /// <summary>Field number for the "destid" field.</summary>
    public const int DestidFieldNumber = 1;
    private uint destid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Destid {
      get { return destid_; }
      set {
        destid_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FriendChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FriendChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destid != other.Destid) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destid != 0) hash ^= Destid.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Destid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Destid);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Destid);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FriendChat other) {
      if (other == null) {
        return;
      }
      if (other.Destid != 0) {
        Destid = other.Destid;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Destid = input.ReadUInt32();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_PullFriendMsg : pb::IMessage<C2S_PullFriendMsg> {
    private static readonly pb::MessageParser<C2S_PullFriendMsg> _parser = new pb::MessageParser<C2S_PullFriendMsg>(() => pb.ProtobufManager.New<C2S_PullFriendMsg>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PullFriendMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PullFriendMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PullFriendMsg(C2S_PullFriendMsg other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PullFriendMsg Clone() {
      return new C2S_PullFriendMsg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PullFriendMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PullFriendMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PullFriendMsg other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_FriendMsg : pb::IMessage<S2C_FriendMsg> {
    private static readonly pb::MessageParser<S2C_FriendMsg> _parser = new pb::MessageParser<S2C_FriendMsg>(() => pb.ProtobufManager.New<S2C_FriendMsg>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FriendMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < allmsg_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.S2C_FriendMsg.Types.OneMessage>(allmsg_[i]);
      }
      allmsg_.Clear();
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendMsg(S2C_FriendMsg other) : this() {
      allmsg_ = other.allmsg_.Clone();
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FriendMsg Clone() {
      return new S2C_FriendMsg(this);
    }

    /// <summary>Field number for the "allmsg" field.</summary>
    public const int AllmsgFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.S2C_FriendMsg.Types.OneMessage> _repeated_allmsg_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.S2C_FriendMsg.Types.OneMessage.Parser);
    private readonly pbc::RepeatedField<global::Pb.S2C_FriendMsg.Types.OneMessage> allmsg_ = new pbc::RepeatedField<global::Pb.S2C_FriendMsg.Types.OneMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.S2C_FriendMsg.Types.OneMessage> Allmsg {
      get { return allmsg_; }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 2;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FriendMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FriendMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allmsg_.Equals(other.allmsg_)) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allmsg_.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allmsg_.WriteTo(output, _repeated_allmsg_codec);
      if (Errno != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allmsg_.CalculateSize(_repeated_allmsg_codec);
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FriendMsg other) {
      if (other == null) {
        return;
      }
      allmsg_.Add(other.allmsg_);
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allmsg_.AddEntriesFrom(input, _repeated_allmsg_codec);
            break;
          }
          case 16: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_FriendMsg message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class OneMessage : pb::IMessage<OneMessage> {
        private static readonly pb::MessageParser<OneMessage> _parser = new pb::MessageParser<OneMessage>(() => pb.ProtobufManager.New<OneMessage>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OneMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.S2C_FriendMsg.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Sender = 0;
          Name = "";
          Sendtime = 0;
          Data = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage(OneMessage other) : this() {
          sender_ = other.sender_;
          name_ = other.name_;
          sendtime_ = other.sendtime_;
          data_ = other.data_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage Clone() {
          return new OneMessage(this);
        }

        /// <summary>Field number for the "sender" field.</summary>
        public const int SenderFieldNumber = 1;
        private uint sender_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Sender {
          get { return sender_; }
          set {
            sender_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sendtime" field.</summary>
        public const int SendtimeFieldNumber = 3;
        private long sendtime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Sendtime {
          get { return sendtime_; }
          set {
            sendtime_ = value;
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 4;
        private string data_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OneMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OneMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sender != other.Sender) return false;
          if (Name != other.Name) return false;
          if (Sendtime != other.Sendtime) return false;
          if (Data != other.Data) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Sender != 0) hash ^= Sender.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Sendtime != 0L) hash ^= Sendtime.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Sender != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Sender);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Sendtime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Sendtime);
          }
          if (Data.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Data);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Sender != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sender);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Sendtime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sendtime);
          }
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OneMessage other) {
          if (other == null) {
            return;
          }
          if (other.Sender != 0) {
            Sender = other.Sender;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Sendtime != 0L) {
            Sendtime = other.Sendtime;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Sender = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Sendtime = input.ReadInt64();
                break;
              }
              case 34: {
                Data = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CheckPointOneChoice : pb::IMessage<CheckPointOneChoice> {
    private static readonly pb::MessageParser<CheckPointOneChoice> _parser = new pb::MessageParser<CheckPointOneChoice>(() => pb.ProtobufManager.New<CheckPointOneChoice>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckPointOneChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointOneChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Elemid = 0;
      Mapid = 0;
      Grade = 0;
      Quetype = 0;
      Isnext = false;
      chooseteamr_.Clear();
      Openlimit = 0;
      Rewardid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointOneChoice(CheckPointOneChoice other) : this() {
      elemid_ = other.elemid_;
      mapid_ = other.mapid_;
      grade_ = other.grade_;
      quetype_ = other.quetype_;
      isnext_ = other.isnext_;
      chooseteamr_ = other.chooseteamr_.Clone();
      openlimit_ = other.openlimit_;
      rewardid_ = other.rewardid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointOneChoice Clone() {
      return new CheckPointOneChoice(this);
    }

    /// <summary>Field number for the "elemid" field.</summary>
    public const int ElemidFieldNumber = 1;
    private uint elemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Elemid {
      get { return elemid_; }
      set {
        elemid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 2;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 3;
    private uint grade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "quetype" field.</summary>
    public const int QuetypeFieldNumber = 4;
    private uint quetype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quetype {
      get { return quetype_; }
      set {
        quetype_ = value;
      }
    }

    /// <summary>Field number for the "isnext" field.</summary>
    public const int IsnextFieldNumber = 5;
    private bool isnext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isnext {
      get { return isnext_; }
      set {
        isnext_ = value;
      }
    }

    /// <summary>Field number for the "chooseteamr" field.</summary>
    public const int ChooseteamrFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_chooseteamr_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> chooseteamr_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Chooseteamr {
      get { return chooseteamr_; }
    }

    /// <summary>Field number for the "openlimit" field.</summary>
    public const int OpenlimitFieldNumber = 7;
    private uint openlimit_;
    /// <summary>
    ///选择限制(0无,1Gold,2挑战次数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Openlimit {
      get { return openlimit_; }
      set {
        openlimit_ = value;
      }
    }

    /// <summary>Field number for the "rewardid" field.</summary>
    public const int RewardidFieldNumber = 8;
    private uint rewardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rewardid {
      get { return rewardid_; }
      set {
        rewardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckPointOneChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckPointOneChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Elemid != other.Elemid) return false;
      if (Mapid != other.Mapid) return false;
      if (Grade != other.Grade) return false;
      if (Quetype != other.Quetype) return false;
      if (Isnext != other.Isnext) return false;
      if(!chooseteamr_.Equals(other.chooseteamr_)) return false;
      if (Openlimit != other.Openlimit) return false;
      if (Rewardid != other.Rewardid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Elemid != 0) hash ^= Elemid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Quetype != 0) hash ^= Quetype.GetHashCode();
      if (Isnext != false) hash ^= Isnext.GetHashCode();
      hash ^= chooseteamr_.GetHashCode();
      if (Openlimit != 0) hash ^= Openlimit.GetHashCode();
      if (Rewardid != 0) hash ^= Rewardid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Elemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Elemid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mapid);
      }
      if (Grade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Grade);
      }
      if (Quetype != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quetype);
      }
      if (Isnext != false) {
        output.WriteRawTag(40);
        output.WriteBool(Isnext);
      }
      chooseteamr_.WriteTo(output, _repeated_chooseteamr_codec);
      if (Openlimit != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Openlimit);
      }
      if (Rewardid != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Rewardid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Elemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Elemid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (Quetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quetype);
      }
      if (Isnext != false) {
        size += 1 + 1;
      }
      size += chooseteamr_.CalculateSize(_repeated_chooseteamr_codec);
      if (Openlimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Openlimit);
      }
      if (Rewardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rewardid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckPointOneChoice other) {
      if (other == null) {
        return;
      }
      if (other.Elemid != 0) {
        Elemid = other.Elemid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Quetype != 0) {
        Quetype = other.Quetype;
      }
      if (other.Isnext != false) {
        Isnext = other.Isnext;
      }
      chooseteamr_.Add(other.chooseteamr_);
      if (other.Openlimit != 0) {
        Openlimit = other.Openlimit;
      }
      if (other.Rewardid != 0) {
        Rewardid = other.Rewardid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Elemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 24: {
            Grade = input.ReadUInt32();
            break;
          }
          case 32: {
            Quetype = input.ReadUInt32();
            break;
          }
          case 40: {
            Isnext = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            chooseteamr_.AddEntriesFrom(input, _repeated_chooseteamr_codec);
            break;
          }
          case 56: {
            Openlimit = input.ReadUInt32();
            break;
          }
          case 64: {
            Rewardid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckPointChoicesRole : pb::IMessage<CheckPointChoicesRole> {
    private static readonly pb::MessageParser<CheckPointChoicesRole> _parser = new pb::MessageParser<CheckPointChoicesRole>(() => pb.ProtobufManager.New<CheckPointChoicesRole>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckPointChoicesRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointChoicesRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Goldnum = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointChoicesRole(CheckPointChoicesRole other) : this() {
      roleid_ = other.roleid_;
      goldnum_ = other.goldnum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointChoicesRole Clone() {
      return new CheckPointChoicesRole(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "goldnum" field.</summary>
    public const int GoldnumFieldNumber = 2;
    private int goldnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goldnum {
      get { return goldnum_; }
      set {
        goldnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckPointChoicesRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckPointChoicesRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Goldnum != other.Goldnum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Goldnum != 0) hash ^= Goldnum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Goldnum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Goldnum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Goldnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goldnum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckPointChoicesRole other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Goldnum != 0) {
        Goldnum = other.Goldnum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 16: {
            Goldnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CheckPointChoices : pb::IMessage<S2C_CheckPointChoices> {
    private static readonly pb::MessageParser<S2C_CheckPointChoices> _parser = new pb::MessageParser<S2C_CheckPointChoices>(() => pb.ProtobufManager.New<S2C_CheckPointChoices>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CheckPointChoices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointChoices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < choices_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.CheckPointOneChoice>(choices_[i]);
      }
      choices_.Clear();
      Schemeid = 0;
      Pointnum = 0;
      Endsecond = 0;
      Collid = 0;
      Fromgs = 0;
      Maxfailnum = 0;
      Nowfailnum = 0;
      Maxpointnum = 0;
      Maxfinishnum = 0;
      Nowfinishnum = 0;
      for (int i = 0; i < roleinfo_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.CheckPointChoicesRole>(roleinfo_[i]);
      }
      roleinfo_.Clear();
      Allfinishnum = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointChoices(S2C_CheckPointChoices other) : this() {
      choices_ = other.choices_.Clone();
      schemeid_ = other.schemeid_;
      pointnum_ = other.pointnum_;
      endsecond_ = other.endsecond_;
      collid_ = other.collid_;
      fromgs_ = other.fromgs_;
      maxfailnum_ = other.maxfailnum_;
      nowfailnum_ = other.nowfailnum_;
      maxpointnum_ = other.maxpointnum_;
      maxfinishnum_ = other.maxfinishnum_;
      nowfinishnum_ = other.nowfinishnum_;
      roleinfo_ = other.roleinfo_.Clone();
      allfinishnum_ = other.allfinishnum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointChoices Clone() {
      return new S2C_CheckPointChoices(this);
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.CheckPointOneChoice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.CheckPointOneChoice.Parser);
    private readonly pbc::RepeatedField<global::Pb.CheckPointOneChoice> choices_ = new pbc::RepeatedField<global::Pb.CheckPointOneChoice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.CheckPointOneChoice> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "schemeid" field.</summary>
    public const int SchemeidFieldNumber = 2;
    private uint schemeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Schemeid {
      get { return schemeid_; }
      set {
        schemeid_ = value;
      }
    }

    /// <summary>Field number for the "pointnum" field.</summary>
    public const int PointnumFieldNumber = 3;
    private uint pointnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pointnum {
      get { return pointnum_; }
      set {
        pointnum_ = value;
      }
    }

    /// <summary>Field number for the "endsecond" field.</summary>
    public const int EndsecondFieldNumber = 4;
    private long endsecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Endsecond {
      get { return endsecond_; }
      set {
        endsecond_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 5;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    /// <summary>Field number for the "fromgs" field.</summary>
    public const int FromgsFieldNumber = 6;
    private uint fromgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromgs {
      get { return fromgs_; }
      set {
        fromgs_ = value;
      }
    }

    /// <summary>Field number for the "maxfailnum" field.</summary>
    public const int MaxfailnumFieldNumber = 7;
    private int maxfailnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxfailnum {
      get { return maxfailnum_; }
      set {
        maxfailnum_ = value;
      }
    }

    /// <summary>Field number for the "nowfailnum" field.</summary>
    public const int NowfailnumFieldNumber = 8;
    private int nowfailnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nowfailnum {
      get { return nowfailnum_; }
      set {
        nowfailnum_ = value;
      }
    }

    /// <summary>Field number for the "maxpointnum" field.</summary>
    public const int MaxpointnumFieldNumber = 9;
    private int maxpointnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxpointnum {
      get { return maxpointnum_; }
      set {
        maxpointnum_ = value;
      }
    }

    /// <summary>Field number for the "maxfinishnum" field.</summary>
    public const int MaxfinishnumFieldNumber = 10;
    private int maxfinishnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxfinishnum {
      get { return maxfinishnum_; }
      set {
        maxfinishnum_ = value;
      }
    }

    /// <summary>Field number for the "nowfinishnum" field.</summary>
    public const int NowfinishnumFieldNumber = 11;
    private int nowfinishnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nowfinishnum {
      get { return nowfinishnum_; }
      set {
        nowfinishnum_ = value;
      }
    }

    /// <summary>Field number for the "roleinfo" field.</summary>
    public const int RoleinfoFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Pb.CheckPointChoicesRole> _repeated_roleinfo_codec
        = pb::FieldCodec.ForMessage(98, global::Pb.CheckPointChoicesRole.Parser);
    private readonly pbc::RepeatedField<global::Pb.CheckPointChoicesRole> roleinfo_ = new pbc::RepeatedField<global::Pb.CheckPointChoicesRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.CheckPointChoicesRole> Roleinfo {
      get { return roleinfo_; }
    }

    /// <summary>Field number for the "allfinishnum" field.</summary>
    public const int AllfinishnumFieldNumber = 13;
    private int allfinishnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Allfinishnum {
      get { return allfinishnum_; }
      set {
        allfinishnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CheckPointChoices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CheckPointChoices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!choices_.Equals(other.choices_)) return false;
      if (Schemeid != other.Schemeid) return false;
      if (Pointnum != other.Pointnum) return false;
      if (Endsecond != other.Endsecond) return false;
      if (Collid != other.Collid) return false;
      if (Fromgs != other.Fromgs) return false;
      if (Maxfailnum != other.Maxfailnum) return false;
      if (Nowfailnum != other.Nowfailnum) return false;
      if (Maxpointnum != other.Maxpointnum) return false;
      if (Maxfinishnum != other.Maxfinishnum) return false;
      if (Nowfinishnum != other.Nowfinishnum) return false;
      if(!roleinfo_.Equals(other.roleinfo_)) return false;
      if (Allfinishnum != other.Allfinishnum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= choices_.GetHashCode();
      if (Schemeid != 0) hash ^= Schemeid.GetHashCode();
      if (Pointnum != 0) hash ^= Pointnum.GetHashCode();
      if (Endsecond != 0L) hash ^= Endsecond.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      if (Fromgs != 0) hash ^= Fromgs.GetHashCode();
      if (Maxfailnum != 0) hash ^= Maxfailnum.GetHashCode();
      if (Nowfailnum != 0) hash ^= Nowfailnum.GetHashCode();
      if (Maxpointnum != 0) hash ^= Maxpointnum.GetHashCode();
      if (Maxfinishnum != 0) hash ^= Maxfinishnum.GetHashCode();
      if (Nowfinishnum != 0) hash ^= Nowfinishnum.GetHashCode();
      hash ^= roleinfo_.GetHashCode();
      if (Allfinishnum != 0) hash ^= Allfinishnum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      choices_.WriteTo(output, _repeated_choices_codec);
      if (Schemeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Schemeid);
      }
      if (Pointnum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pointnum);
      }
      if (Endsecond != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Endsecond);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Collid);
      }
      if (Fromgs != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Fromgs);
      }
      if (Maxfailnum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Maxfailnum);
      }
      if (Nowfailnum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Nowfailnum);
      }
      if (Maxpointnum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Maxpointnum);
      }
      if (Maxfinishnum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Maxfinishnum);
      }
      if (Nowfinishnum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Nowfinishnum);
      }
      roleinfo_.WriteTo(output, _repeated_roleinfo_codec);
      if (Allfinishnum != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Allfinishnum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (Schemeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Schemeid);
      }
      if (Pointnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pointnum);
      }
      if (Endsecond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Endsecond);
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      if (Fromgs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromgs);
      }
      if (Maxfailnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxfailnum);
      }
      if (Nowfailnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nowfailnum);
      }
      if (Maxpointnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxpointnum);
      }
      if (Maxfinishnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxfinishnum);
      }
      if (Nowfinishnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nowfinishnum);
      }
      size += roleinfo_.CalculateSize(_repeated_roleinfo_codec);
      if (Allfinishnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Allfinishnum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CheckPointChoices other) {
      if (other == null) {
        return;
      }
      choices_.Add(other.choices_);
      if (other.Schemeid != 0) {
        Schemeid = other.Schemeid;
      }
      if (other.Pointnum != 0) {
        Pointnum = other.Pointnum;
      }
      if (other.Endsecond != 0L) {
        Endsecond = other.Endsecond;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
      if (other.Fromgs != 0) {
        Fromgs = other.Fromgs;
      }
      if (other.Maxfailnum != 0) {
        Maxfailnum = other.Maxfailnum;
      }
      if (other.Nowfailnum != 0) {
        Nowfailnum = other.Nowfailnum;
      }
      if (other.Maxpointnum != 0) {
        Maxpointnum = other.Maxpointnum;
      }
      if (other.Maxfinishnum != 0) {
        Maxfinishnum = other.Maxfinishnum;
      }
      if (other.Nowfinishnum != 0) {
        Nowfinishnum = other.Nowfinishnum;
      }
      roleinfo_.Add(other.roleinfo_);
      if (other.Allfinishnum != 0) {
        Allfinishnum = other.Allfinishnum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 16: {
            Schemeid = input.ReadUInt32();
            break;
          }
          case 24: {
            Pointnum = input.ReadUInt32();
            break;
          }
          case 32: {
            Endsecond = input.ReadInt64();
            break;
          }
          case 40: {
            Collid = input.ReadUInt64();
            break;
          }
          case 48: {
            Fromgs = input.ReadUInt32();
            break;
          }
          case 56: {
            Maxfailnum = input.ReadInt32();
            break;
          }
          case 64: {
            Nowfailnum = input.ReadInt32();
            break;
          }
          case 72: {
            Maxpointnum = input.ReadInt32();
            break;
          }
          case 80: {
            Maxfinishnum = input.ReadInt32();
            break;
          }
          case 88: {
            Nowfinishnum = input.ReadInt32();
            break;
          }
          case 98: {
            roleinfo_.AddEntriesFrom(input, _repeated_roleinfo_codec);
            break;
          }
          case 104: {
            Allfinishnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_CheckPointChoose : pb::IMessage<C2S_CheckPointChoose> {
    private static readonly pb::MessageParser<C2S_CheckPointChoose> _parser = new pb::MessageParser<C2S_CheckPointChoose>(() => pb.ProtobufManager.New<C2S_CheckPointChoose>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CheckPointChoose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointChoose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Elemid = 0;
      Collid = 0;
      Fromgs = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointChoose(C2S_CheckPointChoose other) : this() {
      elemid_ = other.elemid_;
      collid_ = other.collid_;
      fromgs_ = other.fromgs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointChoose Clone() {
      return new C2S_CheckPointChoose(this);
    }

    /// <summary>Field number for the "elemid" field.</summary>
    public const int ElemidFieldNumber = 1;
    private uint elemid_;
    /// <summary>
    /// elemid为0即选择下一关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Elemid {
      get { return elemid_; }
      set {
        elemid_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 2;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    /// <summary>Field number for the "fromgs" field.</summary>
    public const int FromgsFieldNumber = 3;
    private uint fromgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromgs {
      get { return fromgs_; }
      set {
        fromgs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CheckPointChoose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CheckPointChoose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Elemid != other.Elemid) return false;
      if (Collid != other.Collid) return false;
      if (Fromgs != other.Fromgs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Elemid != 0) hash ^= Elemid.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      if (Fromgs != 0) hash ^= Fromgs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Elemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Elemid);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Collid);
      }
      if (Fromgs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fromgs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Elemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Elemid);
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      if (Fromgs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromgs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CheckPointChoose other) {
      if (other == null) {
        return;
      }
      if (other.Elemid != 0) {
        Elemid = other.Elemid;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
      if (other.Fromgs != 0) {
        Fromgs = other.Fromgs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Elemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Collid = input.ReadUInt64();
            break;
          }
          case 24: {
            Fromgs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CheckPointResult : pb::IMessage<S2C_CheckPointResult> {
    private static readonly pb::MessageParser<S2C_CheckPointResult> _parser = new pb::MessageParser<S2C_CheckPointResult>(() => pb.ProtobufManager.New<S2C_CheckPointResult>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CheckPointResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < choice_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.CheckPointOneChoice>(choice_[i]);
      }
      choice_.Clear();
      Schemeid = 0;
      Pointnum = 0;
      Finalelemid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointResult(S2C_CheckPointResult other) : this() {
      choice_ = other.choice_.Clone();
      schemeid_ = other.schemeid_;
      pointnum_ = other.pointnum_;
      finalelemid_ = other.finalelemid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointResult Clone() {
      return new S2C_CheckPointResult(this);
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.CheckPointOneChoice> _repeated_choice_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.CheckPointOneChoice.Parser);
    private readonly pbc::RepeatedField<global::Pb.CheckPointOneChoice> choice_ = new pbc::RepeatedField<global::Pb.CheckPointOneChoice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.CheckPointOneChoice> Choice {
      get { return choice_; }
    }

    /// <summary>Field number for the "schemeid" field.</summary>
    public const int SchemeidFieldNumber = 2;
    private uint schemeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Schemeid {
      get { return schemeid_; }
      set {
        schemeid_ = value;
      }
    }

    /// <summary>Field number for the "pointnum" field.</summary>
    public const int PointnumFieldNumber = 3;
    private uint pointnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pointnum {
      get { return pointnum_; }
      set {
        pointnum_ = value;
      }
    }

    /// <summary>Field number for the "finalelemid" field.</summary>
    public const int FinalelemidFieldNumber = 4;
    private int finalelemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Finalelemid {
      get { return finalelemid_; }
      set {
        finalelemid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CheckPointResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CheckPointResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!choice_.Equals(other.choice_)) return false;
      if (Schemeid != other.Schemeid) return false;
      if (Pointnum != other.Pointnum) return false;
      if (Finalelemid != other.Finalelemid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= choice_.GetHashCode();
      if (Schemeid != 0) hash ^= Schemeid.GetHashCode();
      if (Pointnum != 0) hash ^= Pointnum.GetHashCode();
      if (Finalelemid != 0) hash ^= Finalelemid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      choice_.WriteTo(output, _repeated_choice_codec);
      if (Schemeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Schemeid);
      }
      if (Pointnum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pointnum);
      }
      if (Finalelemid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Finalelemid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += choice_.CalculateSize(_repeated_choice_codec);
      if (Schemeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Schemeid);
      }
      if (Pointnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pointnum);
      }
      if (Finalelemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Finalelemid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CheckPointResult other) {
      if (other == null) {
        return;
      }
      choice_.Add(other.choice_);
      if (other.Schemeid != 0) {
        Schemeid = other.Schemeid;
      }
      if (other.Pointnum != 0) {
        Pointnum = other.Pointnum;
      }
      if (other.Finalelemid != 0) {
        Finalelemid = other.Finalelemid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            choice_.AddEntriesFrom(input, _repeated_choice_codec);
            break;
          }
          case 16: {
            Schemeid = input.ReadUInt32();
            break;
          }
          case 24: {
            Pointnum = input.ReadUInt32();
            break;
          }
          case 32: {
            Finalelemid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckPointInitChar : pb::IMessage<CheckPointInitChar> {
    private static readonly pb::MessageParser<CheckPointInitChar> _parser = new pb::MessageParser<CheckPointInitChar>(() => pb.ProtobufManager.New<CheckPointInitChar>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckPointInitChar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointInitChar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Charid = 0;
      Hp = 0;
      Shield = 0;
      Speed = 0;
      finefeatures_.Clear();
      badfeatures_.Clear();
      initweapon_.Clear();
      defskill_.Clear();
      Energy = 0;
      Energymax = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointInitChar(CheckPointInitChar other) : this() {
      charid_ = other.charid_;
      hp_ = other.hp_;
      shield_ = other.shield_;
      speed_ = other.speed_;
      finefeatures_ = other.finefeatures_.Clone();
      badfeatures_ = other.badfeatures_.Clone();
      initweapon_ = other.initweapon_.Clone();
      defskill_ = other.defskill_.Clone();
      energy_ = other.energy_;
      energymax_ = other.energymax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPointInitChar Clone() {
      return new CheckPointInitChar(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 3;
    private int shield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "finefeatures" field.</summary>
    public const int FinefeaturesFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_finefeatures_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> finefeatures_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Finefeatures {
      get { return finefeatures_; }
    }

    /// <summary>Field number for the "badfeatures" field.</summary>
    public const int BadfeaturesFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_badfeatures_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> badfeatures_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Badfeatures {
      get { return badfeatures_; }
    }

    /// <summary>Field number for the "initweapon" field.</summary>
    public const int InitweaponFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_initweapon_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> initweapon_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Initweapon {
      get { return initweapon_; }
    }

    /// <summary>Field number for the "defskill" field.</summary>
    public const int DefskillFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_defskill_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> defskill_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Defskill {
      get { return defskill_; }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 9;
    private int energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "energymax" field.</summary>
    public const int EnergymaxFieldNumber = 10;
    private int energymax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energymax {
      get { return energymax_; }
      set {
        energymax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckPointInitChar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckPointInitChar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Hp != other.Hp) return false;
      if (Shield != other.Shield) return false;
      if (Speed != other.Speed) return false;
      if(!finefeatures_.Equals(other.finefeatures_)) return false;
      if(!badfeatures_.Equals(other.badfeatures_)) return false;
      if(!initweapon_.Equals(other.initweapon_)) return false;
      if(!defskill_.Equals(other.defskill_)) return false;
      if (Energy != other.Energy) return false;
      if (Energymax != other.Energymax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0) hash ^= Charid.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Shield != 0) hash ^= Shield.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      hash ^= finefeatures_.GetHashCode();
      hash ^= badfeatures_.GetHashCode();
      hash ^= initweapon_.GetHashCode();
      hash ^= defskill_.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (Energymax != 0) hash ^= Energymax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Charid);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (Shield != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Shield);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      finefeatures_.WriteTo(output, _repeated_finefeatures_codec);
      badfeatures_.WriteTo(output, _repeated_badfeatures_codec);
      initweapon_.WriteTo(output, _repeated_initweapon_codec);
      defskill_.WriteTo(output, _repeated_defskill_codec);
      if (Energy != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Energy);
      }
      if (Energymax != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Energymax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Shield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shield);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      size += finefeatures_.CalculateSize(_repeated_finefeatures_codec);
      size += badfeatures_.CalculateSize(_repeated_badfeatures_codec);
      size += initweapon_.CalculateSize(_repeated_initweapon_codec);
      size += defskill_.CalculateSize(_repeated_defskill_codec);
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (Energymax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energymax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckPointInitChar other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Shield != 0) {
        Shield = other.Shield;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      finefeatures_.Add(other.finefeatures_);
      badfeatures_.Add(other.badfeatures_);
      initweapon_.Add(other.initweapon_);
      defskill_.Add(other.defskill_);
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.Energymax != 0) {
        Energymax = other.Energymax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 24: {
            Shield = input.ReadInt32();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 42:
          case 40: {
            finefeatures_.AddEntriesFrom(input, _repeated_finefeatures_codec);
            break;
          }
          case 50:
          case 48: {
            badfeatures_.AddEntriesFrom(input, _repeated_badfeatures_codec);
            break;
          }
          case 58:
          case 56: {
            initweapon_.AddEntriesFrom(input, _repeated_initweapon_codec);
            break;
          }
          case 66:
          case 64: {
            defskill_.AddEntriesFrom(input, _repeated_defskill_codec);
            break;
          }
          case 72: {
            Energy = input.ReadInt32();
            break;
          }
          case 80: {
            Energymax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CheckPointCharChoice : pb::IMessage<S2C_CheckPointCharChoice> {
    private static readonly pb::MessageParser<S2C_CheckPointCharChoice> _parser = new pb::MessageParser<S2C_CheckPointCharChoice>(() => pb.ProtobufManager.New<S2C_CheckPointCharChoice>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CheckPointCharChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointCharChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < choices_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.CheckPointInitChar>(choices_[i]);
      }
      choices_.Clear();
      Endsecond = 0;
      Collid = 0;
      Fromgs = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointCharChoice(S2C_CheckPointCharChoice other) : this() {
      choices_ = other.choices_.Clone();
      endsecond_ = other.endsecond_;
      collid_ = other.collid_;
      fromgs_ = other.fromgs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointCharChoice Clone() {
      return new S2C_CheckPointCharChoice(this);
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.CheckPointInitChar> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.CheckPointInitChar.Parser);
    private readonly pbc::RepeatedField<global::Pb.CheckPointInitChar> choices_ = new pbc::RepeatedField<global::Pb.CheckPointInitChar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.CheckPointInitChar> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "endsecond" field.</summary>
    public const int EndsecondFieldNumber = 2;
    private long endsecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Endsecond {
      get { return endsecond_; }
      set {
        endsecond_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 3;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    /// <summary>Field number for the "fromgs" field.</summary>
    public const int FromgsFieldNumber = 4;
    private uint fromgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromgs {
      get { return fromgs_; }
      set {
        fromgs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CheckPointCharChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CheckPointCharChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!choices_.Equals(other.choices_)) return false;
      if (Endsecond != other.Endsecond) return false;
      if (Collid != other.Collid) return false;
      if (Fromgs != other.Fromgs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= choices_.GetHashCode();
      if (Endsecond != 0L) hash ^= Endsecond.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      if (Fromgs != 0) hash ^= Fromgs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      choices_.WriteTo(output, _repeated_choices_codec);
      if (Endsecond != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Endsecond);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Collid);
      }
      if (Fromgs != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Fromgs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (Endsecond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Endsecond);
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      if (Fromgs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromgs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CheckPointCharChoice other) {
      if (other == null) {
        return;
      }
      choices_.Add(other.choices_);
      if (other.Endsecond != 0L) {
        Endsecond = other.Endsecond;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
      if (other.Fromgs != 0) {
        Fromgs = other.Fromgs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 16: {
            Endsecond = input.ReadInt64();
            break;
          }
          case 24: {
            Collid = input.ReadUInt64();
            break;
          }
          case 32: {
            Fromgs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_CheckPointCharChoice : pb::IMessage<C2S_CheckPointCharChoice> {
    private static readonly pb::MessageParser<C2S_CheckPointCharChoice> _parser = new pb::MessageParser<C2S_CheckPointCharChoice>(() => pb.ProtobufManager.New<C2S_CheckPointCharChoice>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CheckPointCharChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointCharChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Charid = 0;
      Collid = 0;
      Fromgs = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointCharChoice(C2S_CheckPointCharChoice other) : this() {
      charid_ = other.charid_;
      collid_ = other.collid_;
      fromgs_ = other.fromgs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointCharChoice Clone() {
      return new C2S_CheckPointCharChoice(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 2;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    /// <summary>Field number for the "fromgs" field.</summary>
    public const int FromgsFieldNumber = 3;
    private uint fromgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromgs {
      get { return fromgs_; }
      set {
        fromgs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CheckPointCharChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CheckPointCharChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Collid != other.Collid) return false;
      if (Fromgs != other.Fromgs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0) hash ^= Charid.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      if (Fromgs != 0) hash ^= Fromgs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Charid);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Collid);
      }
      if (Fromgs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fromgs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      if (Fromgs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromgs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CheckPointCharChoice other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
      if (other.Fromgs != 0) {
        Fromgs = other.Fromgs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt32();
            break;
          }
          case 16: {
            Collid = input.ReadUInt64();
            break;
          }
          case 24: {
            Fromgs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_CheckPointCharScan : pb::IMessage<C2S_CheckPointCharScan> {
    private static readonly pb::MessageParser<C2S_CheckPointCharScan> _parser = new pb::MessageParser<C2S_CheckPointCharScan>(() => pb.ProtobufManager.New<C2S_CheckPointCharScan>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CheckPointCharScan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointCharScan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Charid = 0;
      Collid = 0;
      Fromgs = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointCharScan(C2S_CheckPointCharScan other) : this() {
      charid_ = other.charid_;
      collid_ = other.collid_;
      fromgs_ = other.fromgs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckPointCharScan Clone() {
      return new C2S_CheckPointCharScan(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 2;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    /// <summary>Field number for the "fromgs" field.</summary>
    public const int FromgsFieldNumber = 3;
    private uint fromgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromgs {
      get { return fromgs_; }
      set {
        fromgs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CheckPointCharScan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CheckPointCharScan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Collid != other.Collid) return false;
      if (Fromgs != other.Fromgs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0) hash ^= Charid.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      if (Fromgs != 0) hash ^= Fromgs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Charid);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Collid);
      }
      if (Fromgs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fromgs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      if (Fromgs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromgs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CheckPointCharScan other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
      if (other.Fromgs != 0) {
        Fromgs = other.Fromgs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt32();
            break;
          }
          case 16: {
            Collid = input.ReadUInt64();
            break;
          }
          case 24: {
            Fromgs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CheckPointCharInfo : pb::IMessage<S2C_CheckPointCharInfo> {
    private static readonly pb::MessageParser<S2C_CheckPointCharInfo> _parser = new pb::MessageParser<S2C_CheckPointCharInfo>(() => pb.ProtobufManager.New<S2C_CheckPointCharInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CheckPointCharInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointCharInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      pb.ProtobufManager.Reclaim<global::Pb.CheckPointInitChar>(info_);
      info_ = null;
      Confirm = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointCharInfo(S2C_CheckPointCharInfo other) : this() {
      roleid_ = other.roleid_;
      Info = other.info_ != null ? other.Info.Clone() : null;
      confirm_ = other.confirm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckPointCharInfo Clone() {
      return new S2C_CheckPointCharInfo(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Pb.CheckPointInitChar info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.CheckPointInitChar Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "confirm" field.</summary>
    public const int ConfirmFieldNumber = 3;
    private bool confirm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CheckPointCharInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CheckPointCharInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (Confirm != other.Confirm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Confirm != false) hash ^= Confirm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (Confirm != false) {
        output.WriteRawTag(24);
        output.WriteBool(Confirm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (Confirm != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CheckPointCharInfo other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = pb.ProtobufManager.New<global::Pb.CheckPointInitChar>();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.Confirm != false) {
        Confirm = other.Confirm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = pb.ProtobufManager.New<global::Pb.CheckPointInitChar>();
            }
            input.ReadMessage(info_);
            break;
          }
          case 24: {
            Confirm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ComeBackWorld : pb::IMessage<S2C_ComeBackWorld> {
    private static readonly pb::MessageParser<S2C_ComeBackWorld> _parser = new pb::MessageParser<S2C_ComeBackWorld>(() => pb.ProtobufManager.New<S2C_ComeBackWorld>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ComeBackWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.GamemsgReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ComeBackWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.BinBattleData>(worldbsdata_);
      worldbsdata_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ComeBackWorld(S2C_ComeBackWorld other) : this() {
      Worldbsdata = other.worldbsdata_ != null ? other.Worldbsdata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ComeBackWorld Clone() {
      return new S2C_ComeBackWorld(this);
    }

    /// <summary>Field number for the "worldbsdata" field.</summary>
    public const int WorldbsdataFieldNumber = 1;
    private global::Pb.BinBattleData worldbsdata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BinBattleData Worldbsdata {
      get { return worldbsdata_; }
      set {
        worldbsdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ComeBackWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ComeBackWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Worldbsdata, other.Worldbsdata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (worldbsdata_ != null) hash ^= Worldbsdata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (worldbsdata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Worldbsdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (worldbsdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worldbsdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ComeBackWorld other) {
      if (other == null) {
        return;
      }
      if (other.worldbsdata_ != null) {
        if (worldbsdata_ == null) {
          worldbsdata_ = pb.ProtobufManager.New<global::Pb.BinBattleData>();
        }
        Worldbsdata.MergeFrom(other.Worldbsdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (worldbsdata_ == null) {
              worldbsdata_ = pb.ProtobufManager.New<global::Pb.BinBattleData>();
            }
            input.ReadMessage(worldbsdata_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
