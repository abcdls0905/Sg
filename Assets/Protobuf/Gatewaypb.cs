// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gatewaypb.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gatewaypb {

  /// <summary>Holder for reflection information generated from gatewaypb.proto</summary>
  public static partial class GatewaypbReflection {

    #region Descriptor
    /// <summary>File descriptor for gatewaypb.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GatewaypbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9nYXRld2F5cGIucHJvdG8SCWdhdGV3YXlwYiIZCgVIZWFydBIQCghQaW5n",
            "VGltZRgBIAEoAyIeCg5HMkNfRGlzY29ubmVjdBIMCgRHc0lEGAEgASgFIiAK",
            "DkcyU19EaXNjb25uZWN0Eg4KBkNvbm5JRBgBIAEoDSIYCghDMkdfRGlhbBIM",
            "CgRHc0lEGAEgASgFIjUKCEcyQ19EaWFsEgwKBEdzSUQYASABKAUSDgoGQ29u",
            "bklEGAIgASgNEgsKA0VychgDIAEoCSIwCg1HMkNfUmVjb25uZWN0EgwKBEdz",
            "SUQYASABKAUSEQoJUmVjb25uZWN0GAIgASgIIhoKCFMyR19LaWNrEg4KBkNv",
            "bm5JRBgBIAEoDSIaCghHMkNfS2ljaxIOCgZDb25uSUQYASABKA0iLAoJUzJH",
            "X0Nyb3NzEg4KBkNvbm5JRBgBIAEoDRIPCgdEc3RHc0lEGAIgASgFIj0KCUcy",
            "U19Dcm9zcxIOCgZDb25uSUQYASABKA0SDwoHU3JjR3NJRBgCIAEoBRIPCgdE",
            "c3RHc0lEGAMgASgFIh0KC0cyU19Db25uZWN0Eg4KBkNvbm5JRBgBIAEoDSqm",
            "AQoDTVNHEgwKCE1TR19OT05FEAASDQoJTVNHX0hFQVJUEAESEgoOTVNHX0RJ",
            "U0NPTk5DRVQQAhIMCghNU0dfRElBTBADEhMKD01TR19HU1JFQ09OTkVDVBAE",
            "Eg4KCk1TR19SRUdJU1QQBRIPCgtNU0dfQ09OTkVDVBAGEgwKCE1TR19LSUNL",
            "EAcSDQoJTVNHX0NST1NTEAgSDQoJTVNHX0dXTUFYEGRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Gatewaypb.MSG), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.Heart), global::Gatewaypb.Heart.Parser, new[]{ "PingTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2C_Disconnect), global::Gatewaypb.G2C_Disconnect.Parser, new[]{ "GsID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2S_Disconnect), global::Gatewaypb.G2S_Disconnect.Parser, new[]{ "ConnID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.C2G_Dial), global::Gatewaypb.C2G_Dial.Parser, new[]{ "GsID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2C_Dial), global::Gatewaypb.G2C_Dial.Parser, new[]{ "GsID", "ConnID", "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2C_Reconnect), global::Gatewaypb.G2C_Reconnect.Parser, new[]{ "GsID", "Reconnect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.S2G_Kick), global::Gatewaypb.S2G_Kick.Parser, new[]{ "ConnID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2C_Kick), global::Gatewaypb.G2C_Kick.Parser, new[]{ "ConnID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.S2G_Cross), global::Gatewaypb.S2G_Cross.Parser, new[]{ "ConnID", "DstGsID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2S_Cross), global::Gatewaypb.G2S_Cross.Parser, new[]{ "ConnID", "SrcGsID", "DstGsID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gatewaypb.G2S_Connect), global::Gatewaypb.G2S_Connect.Parser, new[]{ "ConnID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSG {
    [pbr::OriginalName("MSG_NONE")] None = 0,
    [pbr::OriginalName("MSG_HEART")] Heart = 1,
    [pbr::OriginalName("MSG_DISCONNCET")] Disconncet = 2,
    [pbr::OriginalName("MSG_DIAL")] Dial = 3,
    [pbr::OriginalName("MSG_GSRECONNECT")] Gsreconnect = 4,
    [pbr::OriginalName("MSG_REGIST")] Regist = 5,
    [pbr::OriginalName("MSG_CONNECT")] Connect = 6,
    [pbr::OriginalName("MSG_KICK")] Kick = 7,
    [pbr::OriginalName("MSG_CROSS")] Cross = 8,
    [pbr::OriginalName("MSG_GWMAX")] Gwmax = 100,
  }

  #endregion

  #region Messages
  public sealed partial class Heart : pb::IMessage<Heart> {
    private static readonly pb::MessageParser<Heart> _parser = new pb::MessageParser<Heart>(() => pb.ProtobufManager.New<Heart>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      PingTime = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heart(Heart other) : this() {
      pingTime_ = other.pingTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heart Clone() {
      return new Heart(this);
    }

    /// <summary>Field number for the "PingTime" field.</summary>
    public const int PingTimeFieldNumber = 1;
    private long pingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PingTime {
      get { return pingTime_; }
      set {
        pingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingTime != other.PingTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingTime != 0L) hash ^= PingTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PingTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PingTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heart other) {
      if (other == null) {
        return;
      }
      if (other.PingTime != 0L) {
        PingTime = other.PingTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PingTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_Disconnect : pb::IMessage<G2C_Disconnect> {
    private static readonly pb::MessageParser<G2C_Disconnect> _parser = new pb::MessageParser<G2C_Disconnect>(() => pb.ProtobufManager.New<G2C_Disconnect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_Disconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Disconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      GsID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Disconnect(G2C_Disconnect other) : this() {
      gsID_ = other.gsID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Disconnect Clone() {
      return new G2C_Disconnect(this);
    }

    /// <summary>Field number for the "GsID" field.</summary>
    public const int GsIDFieldNumber = 1;
    private int gsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GsID {
      get { return gsID_; }
      set {
        gsID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_Disconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_Disconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsID != other.GsID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GsID != 0) hash ^= GsID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GsID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GsID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GsID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_Disconnect other) {
      if (other == null) {
        return;
      }
      if (other.GsID != 0) {
        GsID = other.GsID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GsID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2S_Disconnect : pb::IMessage<G2S_Disconnect> {
    private static readonly pb::MessageParser<G2S_Disconnect> _parser = new pb::MessageParser<G2S_Disconnect>(() => pb.ProtobufManager.New<G2S_Disconnect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2S_Disconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Disconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      ConnID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Disconnect(G2S_Disconnect other) : this() {
      connID_ = other.connID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Disconnect Clone() {
      return new G2S_Disconnect(this);
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2S_Disconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2S_Disconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2S_Disconnect other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2G_Dial : pb::IMessage<C2G_Dial> {
    private static readonly pb::MessageParser<C2G_Dial> _parser = new pb::MessageParser<C2G_Dial>(() => pb.ProtobufManager.New<C2G_Dial>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_Dial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_Dial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      GsID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_Dial(C2G_Dial other) : this() {
      gsID_ = other.gsID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_Dial Clone() {
      return new C2G_Dial(this);
    }

    /// <summary>Field number for the "GsID" field.</summary>
    public const int GsIDFieldNumber = 1;
    private int gsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GsID {
      get { return gsID_; }
      set {
        gsID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_Dial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_Dial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsID != other.GsID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GsID != 0) hash ^= GsID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GsID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GsID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GsID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_Dial other) {
      if (other == null) {
        return;
      }
      if (other.GsID != 0) {
        GsID = other.GsID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GsID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_Dial : pb::IMessage<G2C_Dial> {
    private static readonly pb::MessageParser<G2C_Dial> _parser = new pb::MessageParser<G2C_Dial>(() => pb.ProtobufManager.New<G2C_Dial>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_Dial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Dial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      GsID = 0;
      ConnID = 0;
      Err = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Dial(G2C_Dial other) : this() {
      gsID_ = other.gsID_;
      connID_ = other.connID_;
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Dial Clone() {
      return new G2C_Dial(this);
    }

    /// <summary>Field number for the "GsID" field.</summary>
    public const int GsIDFieldNumber = 1;
    private int gsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GsID {
      get { return gsID_; }
      set {
        gsID_ = value;
      }
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 2;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    /// <summary>Field number for the "Err" field.</summary>
    public const int ErrFieldNumber = 3;
    private string err_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_Dial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_Dial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsID != other.GsID) return false;
      if (ConnID != other.ConnID) return false;
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GsID != 0) hash ^= GsID.GetHashCode();
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GsID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GsID);
      }
      if (ConnID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConnID);
      }
      if (Err.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GsID);
      }
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_Dial other) {
      if (other == null) {
        return;
      }
      if (other.GsID != 0) {
        GsID = other.GsID;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GsID = input.ReadInt32();
            break;
          }
          case 16: {
            ConnID = input.ReadUInt32();
            break;
          }
          case 26: {
            Err = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_Reconnect : pb::IMessage<G2C_Reconnect> {
    private static readonly pb::MessageParser<G2C_Reconnect> _parser = new pb::MessageParser<G2C_Reconnect>(() => pb.ProtobufManager.New<G2C_Reconnect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_Reconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Reconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      GsID = 0;
      Reconnect = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Reconnect(G2C_Reconnect other) : this() {
      gsID_ = other.gsID_;
      reconnect_ = other.reconnect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Reconnect Clone() {
      return new G2C_Reconnect(this);
    }

    /// <summary>Field number for the "GsID" field.</summary>
    public const int GsIDFieldNumber = 1;
    private int gsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GsID {
      get { return gsID_; }
      set {
        gsID_ = value;
      }
    }

    /// <summary>Field number for the "Reconnect" field.</summary>
    public const int ReconnectFieldNumber = 2;
    private bool reconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reconnect {
      get { return reconnect_; }
      set {
        reconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_Reconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_Reconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GsID != other.GsID) return false;
      if (Reconnect != other.Reconnect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GsID != 0) hash ^= GsID.GetHashCode();
      if (Reconnect != false) hash ^= Reconnect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GsID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GsID);
      }
      if (Reconnect != false) {
        output.WriteRawTag(16);
        output.WriteBool(Reconnect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GsID);
      }
      if (Reconnect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_Reconnect other) {
      if (other == null) {
        return;
      }
      if (other.GsID != 0) {
        GsID = other.GsID;
      }
      if (other.Reconnect != false) {
        Reconnect = other.Reconnect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GsID = input.ReadInt32();
            break;
          }
          case 16: {
            Reconnect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2G_Kick : pb::IMessage<S2G_Kick> {
    private static readonly pb::MessageParser<S2G_Kick> _parser = new pb::MessageParser<S2G_Kick>(() => pb.ProtobufManager.New<S2G_Kick>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2G_Kick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_Kick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      ConnID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_Kick(S2G_Kick other) : this() {
      connID_ = other.connID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_Kick Clone() {
      return new S2G_Kick(this);
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2G_Kick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2G_Kick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2G_Kick other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_Kick : pb::IMessage<G2C_Kick> {
    private static readonly pb::MessageParser<G2C_Kick> _parser = new pb::MessageParser<G2C_Kick>(() => pb.ProtobufManager.New<G2C_Kick>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_Kick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Kick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      ConnID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Kick(G2C_Kick other) : this() {
      connID_ = other.connID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Kick Clone() {
      return new G2C_Kick(this);
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_Kick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_Kick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_Kick other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2G_Cross : pb::IMessage<S2G_Cross> {
    private static readonly pb::MessageParser<S2G_Cross> _parser = new pb::MessageParser<S2G_Cross>(() => pb.ProtobufManager.New<S2G_Cross>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2G_Cross> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_Cross() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      ConnID = 0;
      DstGsID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_Cross(S2G_Cross other) : this() {
      connID_ = other.connID_;
      dstGsID_ = other.dstGsID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_Cross Clone() {
      return new S2G_Cross(this);
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    /// <summary>Field number for the "DstGsID" field.</summary>
    public const int DstGsIDFieldNumber = 2;
    private int dstGsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DstGsID {
      get { return dstGsID_; }
      set {
        dstGsID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2G_Cross);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2G_Cross other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      if (DstGsID != other.DstGsID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      if (DstGsID != 0) hash ^= DstGsID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
      if (DstGsID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DstGsID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      if (DstGsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstGsID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2G_Cross other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
      if (other.DstGsID != 0) {
        DstGsID = other.DstGsID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
          case 16: {
            DstGsID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2S_Cross : pb::IMessage<G2S_Cross> {
    private static readonly pb::MessageParser<G2S_Cross> _parser = new pb::MessageParser<G2S_Cross>(() => pb.ProtobufManager.New<G2S_Cross>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2S_Cross> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Cross() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      ConnID = 0;
      SrcGsID = 0;
      DstGsID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Cross(G2S_Cross other) : this() {
      connID_ = other.connID_;
      srcGsID_ = other.srcGsID_;
      dstGsID_ = other.dstGsID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Cross Clone() {
      return new G2S_Cross(this);
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    /// <summary>Field number for the "SrcGsID" field.</summary>
    public const int SrcGsIDFieldNumber = 2;
    private int srcGsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcGsID {
      get { return srcGsID_; }
      set {
        srcGsID_ = value;
      }
    }

    /// <summary>Field number for the "DstGsID" field.</summary>
    public const int DstGsIDFieldNumber = 3;
    private int dstGsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DstGsID {
      get { return dstGsID_; }
      set {
        dstGsID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2S_Cross);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2S_Cross other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      if (SrcGsID != other.SrcGsID) return false;
      if (DstGsID != other.DstGsID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      if (SrcGsID != 0) hash ^= SrcGsID.GetHashCode();
      if (DstGsID != 0) hash ^= DstGsID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
      if (SrcGsID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SrcGsID);
      }
      if (DstGsID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DstGsID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      if (SrcGsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcGsID);
      }
      if (DstGsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstGsID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2S_Cross other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
      if (other.SrcGsID != 0) {
        SrcGsID = other.SrcGsID;
      }
      if (other.DstGsID != 0) {
        DstGsID = other.DstGsID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
          case 16: {
            SrcGsID = input.ReadInt32();
            break;
          }
          case 24: {
            DstGsID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2S_Connect : pb::IMessage<G2S_Connect> {
    private static readonly pb::MessageParser<G2S_Connect> _parser = new pb::MessageParser<G2S_Connect>(() => pb.ProtobufManager.New<G2S_Connect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2S_Connect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gatewaypb.GatewaypbReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Connect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      ConnID = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Connect(G2S_Connect other) : this() {
      connID_ = other.connID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_Connect Clone() {
      return new G2S_Connect(this);
    }

    /// <summary>Field number for the "ConnID" field.</summary>
    public const int ConnIDFieldNumber = 1;
    private uint connID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2S_Connect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2S_Connect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnID != other.ConnID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnID != 0) hash ^= ConnID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConnID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2S_Connect other) {
      if (other == null) {
        return;
      }
      if (other.ConnID != 0) {
        ConnID = other.ConnID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConnID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
