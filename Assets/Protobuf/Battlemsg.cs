// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battlemsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from battlemsg.proto</summary>
  public static partial class BattlemsgReflection {

    #region Descriptor
    /// <summary>File descriptor for battlemsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattlemsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9iYXR0bGVtc2cucHJvdG8SAnBiIiEKCVZlY3RvcjJQQhIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAIiLAoJVmVjdG9yM1BCEgkKAXgYASABKAISCQoBeRgCIAEo",
            "AhIJCgF6GAMgASgCIjcKCVZlY3RvcjRQQhIJCgF3GAEgASgCEgkKAXgYAiAB",
            "KAISCQoBeRgDIAEoAhIJCgF6GAQgASgCIrEtChFDMkJfUGxheWVyQ29tbWFu",
            "ZBIuCgRtb3ZlGAEgASgLMh4ucGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX01v",
            "dmVIABI2Cghyb3RhdGlvbhgCIAEoCzIiLnBiLkMyQl9QbGF5ZXJDb21tYW5k",
            "LkMyQl9Sb3RhdGlvbkgAEjIKBmF0dGFjaxgDIAEoCzIgLnBiLkMyQl9QbGF5",
            "ZXJDb21tYW5kLkMyQl9BdHRhY2tIABI6CgpwaWNrdXBpdGVtGAQgASgLMiQu",
            "cGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX1BpY2tVcEl0ZW1IABI2Cghkcm9w",
            "aXRlbRgFIAEoCzIiLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9Ecm9wSXRl",
            "bUgAEjIKBm1vdGlvbhgGIAEoCzIgLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMy",
            "Ql9Nb3Rpb25IABI0CgdvcGVuYm94GAcgASgLMiEucGIuQzJCX1BsYXllckNv",
            "bW1hbmQuQzJCX09wZW5Cb3hIABI6CgpnZXRib3hpdGVtGAggASgLMiQucGIu",
            "QzJCX1BsYXllckNvbW1hbmQuQzJCX0dldEJveEl0ZW1IABI0CgdkZXBsYW5l",
            "GAkgASgLMiEucGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX0RlUGxhbmVIABI+",
            "CgxlcXVpcGJveGl0ZW0YCiABKAsyJi5wYi5DMkJfUGxheWVyQ29tbWFuZC5D",
            "MkJfRXF1aXBCb3hJdGVtSAASSAoRZXF1aXBiYWNrcGFja2l0ZW0YCyABKAsy",
            "Ky5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfRXF1aXBCYWNrcGFja0l0ZW1I",
            "ABJCCg5leGNoYW5nZWF0dGFjaBgMIAEoCzIoLnBiLkMyQl9QbGF5ZXJDb21t",
            "YW5kLkMyQl9FeENoYW5nZUF0dGFjaEgAEj4KDHJlbG9hZGJ1bGxldBgNIAEo",
            "CzImLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9SZWxvYWRCdWxsZXRIABI8",
            "Cgt1bmVxdWlwaXRlbRgOIAEoCzIlLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMy",
            "Ql9VbkVxdWlwSXRlbUgAEj4KDGNoYW5nZXdlYXBvbhgPIAEoCzImLnBiLkMy",
            "Ql9QbGF5ZXJDb21tYW5kLkMyQl9DaGFuZ2VXZWFwb25IABI4CgltYXJrcG9p",
            "bnQYECABKAsyIy5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfTWFya1BvaW50",
            "SAASNAoHdXNlaXRlbRgRIAEoCzIhLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMy",
            "Ql9Vc2VJdGVtSAASOAoJcGFyYWNodXRlGBIgASgLMiMucGIuQzJCX1BsYXll",
            "ckNvbW1hbmQuQzJCX1BhcmFjaHV0ZUgAEjYKCGtpbGx3ZWFrGBMgASgLMiIu",
            "cGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX0tpbGxXZWFrSAASNgoIY3VyZXdl",
            "YWsYFCABKAsyIi5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfQ3VyZVdlYWtI",
            "ABI3CgZvcGRvb3IYFSABKAsyJS5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJf",
            "T3BlcmF0ZURvb3JIABI9CglvcHZlaGljbGUYFiABKAsyKC5wYi5DMkJfUGxh",
            "eWVyQ29tbWFuZC5DMkJfT3BlcmF0ZVZlaGljbGVIABI8Cgttb3ZldmVoaWNs",
            "ZRgXIAEoCzIlLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9Nb3ZlVmVoaWNs",
            "ZUgAEkwKE3NlbmRpdGVtdG9zaGFyZXBhY2sYGCABKAsyLS5wYi5DMkJfUGxh",
            "eWVyQ29tbWFuZC5DMkJfU2VuZEl0ZW1Ub1NoYXJlUGFja0gAElAKFXNlbmRp",
            "dGVtZnJvbWVxdWlwbWVudBgZIAEoCzIvLnBiLkMyQl9QbGF5ZXJDb21tYW5k",
            "LkMyQl9TZW5kSXRlbUZyb21FcXVpcG1lbnRIABJQChVwaWNraXRlbWZyb21z",
            "aGFyZXBhY2sYGiABKAsyLy5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfUGlj",
            "a0l0ZW1Gcm9tU2hhcmVQYWNrSAASOgoKZmFsbGdyb3VuZBgbIAEoCzIkLnBi",
            "LkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9GYWxsR3JvdW5kSAASNgoIZW1wdHly",
            "YXkYHCABKAsyIi5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfRW1wdHlHdW5I",
            "ABIyCgZhaW1pbmcYHSABKAsyIC5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJf",
            "QWltaW5nSAASPAoLY2xpbWJlZmZlY3QYHiABKAsyJS5wYi5DMkJfUGxheWVy",
            "Q29tbWFuZC5DMkJfQ2xpbWJFZmZlY3RIABI6Cgpza2lsbHN0YXRlGB8gASgL",
            "MiQucGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX1NraWxsU3RhdGVIABIuCgRq",
            "dW1wGCAgASgLMh4ucGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX0p1bXBIABI0",
            "CgVzaWdodBghIAEoCzIjLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9TaWdo",
            "dEluZm9IABIyCgVibGFzdBgiIAEoCzIhLnBiLkMyQl9QbGF5ZXJDb21tYW5k",
            "LkMyQl9PcEJsYXN0SAASQgoPZm9yY2VlbnRlcmhvdXNlGCMgASgLMicucGIu",
            "QzJCX1BsYXllckNvbW1hbmQuQzJCX0Rlc0VudGVySG91c2VIABIyCgZnYW1i",
            "bGUYJCABKAsyIC5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfR2FtYmxlSAAS",
            "PAoLc2hpZWxkc2tpbGwYJSABKAsyJS5wYi5DMkJfUGxheWVyQ29tbWFuZC5D",
            "MkJfU2hpZWxkU2tpbGxIABJACg13YXJuaW5nZWZmZWN0GCYgASgLMicucGIu",
            "QzJCX1BsYXllckNvbW1hbmQuQzJCX1dhcm5pbmdFZmZlY3RIABI8CghwaWNr",
            "aXRlbRgnIAEoCzIoLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9QaWNrR3Jv",
            "dW5kSXRlbUgAEj4KDGV4Y2hhbmdlY29yZRgoIAEoCzImLnBiLkMyQl9QbGF5",
            "ZXJDb21tYW5kLkMyQl9FeGNoYW5nZUNvcmVIABI2CghjbGlja25wYxgpIAEo",
            "CzIiLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9DbGlja05wY0gAEjYKCGNh",
            "dGNobnBjGCogASgLMiIucGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX0NhdGNo",
            "TnBjSAASRAoPZXF1aXBHcm91bmRJdGVtGCsgASgLMikucGIuQzJCX1BsYXll",
            "ckNvbW1hbmQuQzJCX0VxdWlwR3JvdW5kSXRlbUgAEjkKCW5wY2dhbWJsZRgs",
            "IAEoCzIkLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9OcGNHYW1lYmxlSAAS",
            "RgoQZ2V0R2FtYmxlQm94SXRlbRgtIAEoCzIqLnBiLkMyQl9QbGF5ZXJDb21t",
            "YW5kLkMyQl9HZXRHYW1ibGVCb3hJdGVtSAASOAoHbnBjc2VsbBguIAEoCzIl",
            "LnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9OcGNTZWxsSXRlbUgAEjsKB25w",
            "Y2x2dXAYLyABKAsyKC5wYi5DMkJfUGxheWVyQ29tbWFuZC5DMkJfTnBjTGV2",
            "ZWxVcEl0ZW1IABorCghDMkJfTW92ZRIJCgF4GAEgASgCEgkKAXkYAiABKAIS",
            "CQoBehgDIAEoAhoYCghDMkJfSnVtcBIMCgRqdW1wGAEgASgIGjgKDEMyQl9S",
            "b3RhdGlvbhIMCgRkaXJYGAEgASgCEgwKBGRpclkYAiABKAISDAoEZGlyWhgD",
            "IAEoAhrQBAoKQzJCX0F0dGFjaxIPCgdza2lsbGlkGAEgASgNEiEKCmZvb3Rv",
            "ZmZzZXQYAiABKAsyDS5wYi5WZWN0b3IzUEISOAoGcmF5YXR0GAMgAygLMigu",
            "cGIuQzJCX1BsYXllckNvbW1hbmQuQzJCX0F0dGFjay5SYXljYXN0EjgKBmdy",
            "ZWF0dBgEIAMoCzIoLnBiLkMyQl9QbGF5ZXJDb21tYW5kLkMyQl9BdHRhY2su",
            "R3JlbmFkZRI7CgdhcmVhYXR0GAUgAygLMioucGIuQzJCX1BsYXllckNvbW1h",
            "bmQuQzJCX0F0dGFjay5BcmVhU2tpbGwSEgoKcmVwZWF0ZW51bRgGIAEoDRIT",
            "CgtsYXN0cmVwZWF0ZRgHIAEoCBIRCgl0YXJnZXR1aWQYCCABKAQaeAoHUmF5",
            "Y2FzdBIRCgl0YXJnZXR1aWQYASABKAQSEwoLdGFyZ2V0RnJhbWUYAiABKA0S",
            "DAoEbGVycBgDIAEoAhINCgV0bGVycBgEIAEoAhIMCgRhdHR4GAUgASgCEgwK",
            "BGF0dHkYBiABKAISDAoEYXR0ehgHIAEoAhpwCgdHcmVuYWRlEgwKBGF0dHgY",
            "ASABKAISDAoEYXR0eRgCIAEoAhIMCgRhdHR6GAMgASgCEgwKBGRpcngYBCAB",
            "KAISDAoEZGlyeRgFIAEoAhIMCgRkaXJ6GAYgASgCEhEKCXRhcmdldHVpZBgH",
            "IAEoBBo1CglBcmVhU2tpbGwSDAoEYXR0eBgBIAEoAhIMCgRhdHR5GAIgASgC",
            "EgwKBGF0dHoYAyABKAIaHwoMQzJCX0VtcHR5R3VuEg8KB3NraWxsaWQYASAB",
            "KA0aHAoLQzJCX09wZW5Cb3gSDQoFYm94SUQYASABKAQaHgoOQzJCX0dldEJv",
            "eEl0ZW0SDAoEdXVpZBgBIAEoBBpCCg5DMkJfUGlja1VwSXRlbRIPCgdpdGVt",
            "dWlkGAEgASgEEgsKA251bRgCIAEoBRISCgp0b2JhY2twYWNrGAMgASgIGiwK",
            "DEMyQl9Ecm9wSXRlbRIPCgdpdGVtdWlkGAEgASgEEgsKA251bRgCIAEoBRpL",
            "CgpDMkJfTW90aW9uEg4KBmNyb3VjaBgBIAEoCBINCgVwcm9uZRgCIAEoCBIP",
            "CgdydW5uaW5nGAMgASgIEg0KBWNsaW1iGAQgASgIGjIKCkMyQl9BaW1pbmcS",
            "DgoGYWltaW5nGAEgASgIEhQKDHVzaW5nZ3JlbmFkZRgCIAEoCBoeCgtDMkJf",
            "RGVQbGFuZRIPCgdwbGFuZWlkGAEgASgEGg8KDUMyQl9QYXJhY2h1dGUaUwoQ",
            "QzJCX0VxdWlwQm94SXRlbRIPCgdpdGVtdWlkGAEgASgEEiEKBWluZGV4GAIg",
            "ASgOMhIucGIuUGFja2FnZVBvc1R5cGUSCwoDbnVtGAMgASgFGksKFUMyQl9F",
            "cXVpcEJhY2twYWNrSXRlbRIPCgdpdGVtdWlkGAEgASgEEiEKBWluZGV4GAIg",
            "ASgOMhIucGIuUGFja2FnZVBvc1R5cGUaJgoSQzJCX0V4Q2hhbmdlQXR0YWNo",
            "EhAKCGl0ZW10eXBlGAEgASgNGiIKD0MyQl9VbkVxdWlwSXRlbRIPCgdpdGVt",
            "dWlkGAEgASgEGhIKEEMyQl9SZWxvYWRCdWxsZXQaJQoQQzJCX0NoYW5nZVdl",
            "YXBvbhIRCglhY3RpdmVpZHgYASABKAUaJQoNQzJCX01hcmtQb2ludBIJCgF4",
            "GAEgASgCEgkKAXkYAiABKAIaKwoLQzJCX1VzZUl0ZW0SDwoHaXRlbXVpZBgB",
            "IAEoBBILCgNudW0YAiABKAUaHgoMQzJCX0tpbGxXZWFrEg4KBnRhcmdldBgB",
            "IAEoBBoeCgxDMkJfQ3VyZVdlYWsSDgoGdGFyZ2V0GAEgASgEGjEKD0MyQl9P",
            "cGVyYXRlRG9vchIQCghlbnRpdHlpZBgBIAEoBBIMCgRvcGVuGAIgASgIGkQK",
            "EkMyQl9PcGVyYXRlVmVoaWNsZRIQCghlbnRpdHlpZBgBIAEoBBIMCgRvcGVu",
            "GAIgASgIEg4KBnNlYXRpZBgDIAEoDRpjCg9DMkJfTW92ZVZlaGljbGUSEAoI",
            "ZW50aXR5aWQYASABKAQSHgoHbW92ZXBvcxgCIAEoCzINLnBiLlZlY3RvcjNQ",
            "QhIeCgdmYWNlZGlyGAMgASgLMg0ucGIuVmVjdG9yNFBCGjcKF0MyQl9TZW5k",
            "SXRlbVRvU2hhcmVQYWNrEg8KB2l0ZW11aWQYASABKAQSCwoDbnVtGAIgASgF",
            "GiwKGUMyQl9TZW5kSXRlbUZyb21FcXVpcG1lbnQSDwoHaXRlbXVpZBgBIAEo",
            "BBpKChlDMkJfUGlja0l0ZW1Gcm9tU2hhcmVQYWNrEg8KB2l0ZW11aWQYASAB",
            "KAQSCwoDbnVtGAIgASgFEg8KB293bmVyaWQYAyABKAQaEAoOQzJCX0ZhbGxH",
            "cm91bmQaUwoPQzJCX0NsaW1iRWZmZWN0Eh8KCGNsaW1icG9zGAEgASgLMg0u",
            "cGIuVmVjdG9yM1BCEh8KCGNsaW1iZGlyGAIgASgLMg0ucGIuVmVjdG9yM1BC",
            "GjwKDkMyQl9Ta2lsbFN0YXRlEioKDnNraWxsc3RhdGVkYXRhGAEgASgLMhIu",
            "cGIuU2tpbGxTdGF0ZURhdGEaIQoNQzJCX1NpZ2h0SW5mbxIQCghkaXN0YW5j",
            "ZRgBIAEoAhotCgtDMkJfT3BCbGFzdBIQCghlbnRpdHlpZBgBIAEoBBIMCgRv",
            "cGVuGAIgASgIGiUKEUMyQl9EZXNFbnRlckhvdXNlEhAKCGVudGl0eWlkGAEg",
            "ASgEGjEKD0MyQl9TaGllbGRTa2lsbBIPCgdza2lsbGlkGAEgASgNEg0KBXN0",
            "YXRlGAIgASgNGh0KCkMyQl9HYW1ibGUSDwoHaXRlbXVpZBgBIAEoBBpnChFD",
            "MkJfV2FybmluZ0VmZmVjdBIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
            "IAEoAhIPCgdza2lsbGlkGAQgASgNEhAKCGxpZmV0aW1lGAUgASgFEg4KBnJh",
            "ZGl1cxgGIAEoAho6ChJDMkJfUGlja0dyb3VuZEl0ZW0SEAoIZW50aXR5aWQY",
            "ASABKAQSEgoKdG9iYWNrcGFjaxgCIAEoCBoyChBDMkJfRXhjaGFuZ2VDb3Jl",
            "Eg4KBmRzdElkeBgBIAEoBRIOCgZzcmNJZHgYAiABKAUaHgoMQzJCX0NsaWNr",
            "TnBjEg4KBm5wY3VpZBgBIAEoBBocCgxDMkJfQ2F0Y2hOcGMSDAoEdXVpZBgB",
            "IAEoBBpWChNDMkJfRXF1aXBHcm91bmRJdGVtEg8KB2l0ZW11aWQYASABKAQS",
            "IQoFaW5kZXgYAiABKA4yEi5wYi5QYWNrYWdlUG9zVHlwZRILCgNudW0YAyAB",
            "KAUaPgoOQzJCX05wY0dhbWVibGUSDgoGbnBjdWlkGAEgASgEEg0KBWluZGV4",
            "GAIgASgFEg0KBWxlYXZlGAMgASgIGjUKFEMyQl9HZXRHYW1ibGVCb3hJdGVt",
            "Eg8KB2l0ZW11aWQYASABKAQSDAoEZHJvcBgCIAEoCBo/Cg9DMkJfTnBjU2Vs",
            "bEl0ZW0SDgoGbnBjdWlkGAEgASgEEg8KB2l0ZW11aWQYAiABKAQSCwoDbnVt",
            "GAMgASgFGjUKEkMyQl9OcGNMZXZlbFVwSXRlbRIOCgZucGN1aWQYASABKAQS",
            "DwoHaXRlbXVpZBgCIAEoBEINCgtDb21tYW5kRGF0YSJaCglDMkJfRnJhbWUS",
            "DQoFZnJhbWUYASABKA0SFQoNZnJhbWVSdW5DYWNoZRgCIAEoDRInCghjb21t",
            "YW5kcxgDIAMoCzIVLnBiLkMyQl9QbGF5ZXJDb21tYW5kIqcuCglCMkNfU3Rh",
            "dGUSDQoFZnJhbWUYASABKA0SJgoEbW92ZRgCIAEoCzIWLnBiLkIyQ19TdGF0",
            "ZS5CMkNfTW92ZUgAEi4KCHJvdGF0aW9uGAMgASgLMhoucGIuQjJDX1N0YXRl",
            "LkIyQ19Sb3RhdGlvbkgAEiIKAmhwGAQgASgLMhQucGIuQjJDX1N0YXRlLkIy",
            "Q19IUEgAEiYKBGxpdmUYBSABKAsyFi5wYi5CMkNfU3RhdGUuQjJDX0xpdmVI",
            "ABIqCgZtb3Rpb24YBiABKAsyGC5wYi5CMkNfU3RhdGUuQjJDX01vdGlvbkgA",
            "EiQKA1BvcxgHIAEoCzIVLnBiLkIyQ19TdGF0ZS5CMkNfUG9zSAASLAoHYm94",
            "b3BlbhgIIAEoCzIZLnBiLkIyQ19TdGF0ZS5CMkNfQm94T3BlbkgAEjEKCXBs",
            "YW5laW5mbxgJIAEoCzIcLnBiLkIyQ19TdGF0ZS5CMkNfUGxhbmVTdGF0ZUgA",
            "EigKBW1heGhwGAogASgLMhcucGIuQjJDX1N0YXRlLkIyQ19NYXhIUEgAEjAK",
            "CWVxdWlwbWVudBgLIAEoCzIbLnBiLkIyQ19TdGF0ZS5CMkNfRXF1aXBtZW50",
            "SAASNgoMYmVjdXJlZWZmZWN0GAwgASgLMh4ucGIuQjJDX1N0YXRlLkIyQ19C",
            "ZUN1cmVFZmZlY3RIABIyCgpjdXJlZWZmZWN0GA0gASgLMhwucGIuQjJDX1N0",
            "YXRlLkIyQ19DdXJlRWZmZWN0SAASMgoKa2lsbGVmZmVjdBgOIAEoCzIcLnBi",
            "LkIyQ19TdGF0ZS5CMkNfS2lsbEVmZmVjdEgAEjYKDHNsb3dyZWNvdmVyeRgP",
            "IAEoCzIeLnBiLkIyQ19TdGF0ZS5CMkNfU2xvd1JlY292ZXJ5SAASMAoJaG91",
            "c2VkYXRhGBAgASgLMhsucGIuQjJDX1N0YXRlLkIyQ19Ib3VzZURhdGFIABIy",
            "Cgh2ZWhpZGF0YRgRIAEoCzIeLnBiLkIyQ19TdGF0ZS5CMkNfVmVoaWNsZVN0",
            "YXRlSAASMgoHcGx5dmVoaRgSIAEoCzIfLnBiLkIyQ19TdGF0ZS5CMkNfUGxh",
            "eWVyVmVoaWNsZUgAEiwKB2JveHR5cGUYEyABKAsyGS5wYi5CMkNfU3RhdGUu",
            "QjJDX0JveFR5cGVIABIsCgdwYWNrYWdlGBQgASgLMhkucGIuQjJDX1N0YXRl",
            "LkIyQ19QYWNrYWdlSAASJAoIZmx5c3RhdGUYFSABKA4yEC5wYi5GbHlTdGF0",
            "ZVR5cGVIABIqCgZidWxsZXQYFiABKAsyGC5wYi5CMkNfU3RhdGUuQjJDX0J1",
            "bGxldEgAEioKBndlYXBvbhgXIAEoCzIYLnBiLkIyQ19TdGF0ZS5CMkNfV2Vh",
            "cG9uSAASKgoGYWltaW5nGBggASgLMhgucGIuQjJDX1N0YXRlLkIyQ19BaW1p",
            "bmdIABI2CgxyZWxvYWRlZmZlY3QYGSABKAsyHi5wYi5CMkNfU3RhdGUuQjJD",
            "X1JlbG9hZEVmZmVjdEgAEjYKCnJlY292ZXJpbmcYGiABKAsyIC5wYi5CMkNf",
            "U3RhdGUuQjJDX1JlY292ZXJ5RWZmZWN0SAASMAoHZ3JlbmFkZRgbIAEoCzId",
            "LnBiLkIyQ19TdGF0ZS5CMkNfR3JlbmFkZURhdGFIABIqCgZzaGllbGQYHCAB",
            "KAsyGC5wYi5CMkNfU3RhdGUuQjJDX1NoaWVsZEgAEjAKCWVuZHVyYW5jZRgd",
            "IAEoCzIbLnBiLkIyQ19TdGF0ZS5CMkNfRW5kdXJhbmNlSAASNAoLc2hpZWxk",
            "c3RhdGUYHiABKAsyHS5wYi5CMkNfU3RhdGUuQjJDX1NoaWVsZFN0YXRlSAAS",
            "LAoHb3V0bG9vaxgfIAEoCzIZLnBiLkIyQ19TdGF0ZS5CMkNfT3V0bG9va0gA",
            "EjAKCXN1cGVyaGVhdBggIAEoCzIbLnBiLkIyQ19TdGF0ZS5CMkNfU3VwZXJo",
            "ZWF0SAASLgoIcGx5c3RhdGUYISABKAsyGi5wYi5CMkNfU3RhdGUuQjJDX1Bs",
            "eVN0YXRlSAASKgoGZ2FtYmxlGCIgASgLMhgucGIuQjJDX1N0YXRlLkIyQ19H",
            "YW1ibGVIABI2Cgxtb25zdGVyc3RhdGUYIyABKAsyHi5wYi5CMkNfU3RhdGUu",
            "QjJDX01vbnN0ZXJTdGF0ZUgAEjgKC2Jsb2Nrc2hpZWxkGCQgASgLMiEucGIu",
            "QjJDX1N0YXRlLkIyQ19CbG9ja1NoaWVsZERhdGFIABIqCghzaG9wZGF0YRgl",
            "IAEoCzIWLnBiLkIyQ19TdGF0ZS5CMkNfU2hvcEgAEkAKEWNoYXJhY3RlcnBy",
            "b3BlcnR5GCYgASgLMiMucGIuQjJDX1N0YXRlLkIyQ19DaGFyYWN0ZXJQcm9w",
            "ZXJ0eUgAEjoKC2FsbHByb3BlcnR5GCcgASgLMiMucGIuQjJDX1N0YXRlLkIy",
            "Q19DaGFyYWN0ZXJQcm9wZXJ0eUgAEjYKDGNoYW5nZWVuZXJneRgoIAEoCzIe",
            "LnBiLkIyQ19TdGF0ZS5CMkNfQ2hhcmdlRW5lcmd5SAASNgoMaW5pdGZlYXR1",
            "cmVzGCkgASgLMh4ucGIuQjJDX1N0YXRlLkIyQ19Jbml0RmVhdHVyZXNIABIy",
            "Cgpncm91bmRpdGVtGCogASgLMhwucGIuQjJDX1N0YXRlLkIyQ19Hcm91bmRJ",
            "dGVtSAASJAoDbnBjGCsgASgLMhUucGIuQjJDX1N0YXRlLkIyQ19OcGNIABI4",
            "Cgttb3ZldHJpZ2dlchgsIAEoCzIhLnBiLkIyQ19TdGF0ZS5CMkNfTW92ZVRy",
            "aWdnZXJEYXRhSAASMAoJcG93ZXJjbGlwGC0gASgLMhsucGIuQjJDX1N0YXRl",
            "LkIyQ19Qb3dlckNsaXBIABosCgtCMkNfT3V0bG9vaxIOCgZjaGFyaWQYASAB",
            "KA0SDQoFc2NhbGUYAiABKAIaWQoIQjJDX01vdmUSGgoDcG9zGAEgASgLMg0u",
            "cGIuVmVjdG9yM1BCEh8KCHZlbG9jaXR5GAIgASgLMg0ucGIuVmVjdG9yM1BC",
            "EhAKCHRlbGVwb3J0GAMgASgIGjgKDEIyQ19Sb3RhdGlvbhIMCgRkaXJYGAEg",
            "ASgCEgwKBGRpclkYAiABKAISDAoEZGlyWhgDIAEoAhpECgZCMkNfSFASCgoC",
            "aHAYASABKAUSDgoGd2Vha2hwGAIgASgFEh4KBnJlYXNvbhgDIAEoDjIOLnBi",
            "LktpbGxSZWFzb24aKAoIQjJDX0xpdmUSDAoEbGl2ZRgBIAEoCBIOCgZpbndl",
            "YWsYAiABKAgaLQoJQjJDX01heEhQEg0KBW1heGhwGAEgASgFEhEKCW1heHdl",
            "YWtocBgCIAEoBRpLCgpCMkNfTW90aW9uEg4KBmNyb3VjaBgBIAEoCBINCgVw",
            "cm9uZRgCIAEoCBIPCgdydW5uaW5nGAMgASgIEg0KBWNsaW1iGAQgASgIGjIK",
            "CkIyQ19BaW1pbmcSDgoGYWltaW5nGAEgASgIEhQKDHVzaW5nZ3JlbmFkZRgC",
            "IAEoCBoqCgdCMkNfUG9zEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMg",
            "ASgCGjsKC0IyQ19Cb3hPcGVuEg4KBm9wZW5lZBgBIAEoCBINCgVib3hpZBgC",
            "IAEoDRINCgVlbXB0eRgDIAEoCBpPCgtCMkNfQm94VHlwZRIPCgdib3h0eXBl",
            "GAEgASgNEhEKCWlzYWlyZHJvcBgCIAEoCBINCgVib3hpZBgDIAEoDRINCgVv",
            "d25lchgEIAEoBBqdAQoOQjJDX1BsYW5lU3RhdGUSDwoHcGxhbmVpZBgBIAEo",
            "BBIOCgZzdGFydHgYAiABKAISDgoGc3RhcnR5GAMgASgCEg4KBnN0YXJ0ehgE",
            "IAEoAhIMCgRlbmR4GAUgASgCEgwKBGVuZHkYBiABKAISDAoEZW5kehgHIAEo",
            "AhIRCglzdGFydHRpbWUYCCABKAMSDQoFc3BlZWQYCSABKAIawQEKDUIyQ19F",
            "cXVpcG1lbnQSDgoGaGVsbWV0GAEgASgNEgwKBHZlc3QYAiABKA0SDgoGd2Vh",
            "cG9uGAMgASgNEhAKCGJhY2ttYWluGAQgASgNEhIKCmJhY2tzZWNvbmQYBSAB",
            "KA0SDQoFc2hvZXMYBiABKA0SEwoLd2VhcG9ucmVhZHkYByABKAgSFQoNYmFj",
            "a21haW5yZWFkeRgIIAEoCBIUCgxiYWNrc2VjcmVhZHkYCSABKAgSCwoDcGV0",
            "GAogASgNGiQKEEIyQ19CZUN1cmVFZmZlY3QSEAoIYmVjdXJpbmcYASABKAga",
            "IAoOQjJDX0N1cmVFZmZlY3QSDgoGY3VyaW5nGAEgASgIGiEKDkIyQ19LaWxs",
            "RWZmZWN0Eg8KB2tpbGxpbmcYASABKAgaJAoQQjJDX1Nsb3dSZWNvdmVyeRIQ",
            "CghyZWNvdmVyeRgBIAEoBRo+Cg1CMkNfSG91c2VEYXRhEg0KBXN0YXRlGAEg",
            "ASgFEg4KBmRvb3JpZBgCIAEoBRIOCgZyZXZpdmUYAyABKAgaZQoQQjJDX1Zl",
            "aGljbGVTdGF0ZRIaCgNwb3MYASABKAsyDS5wYi5WZWN0b3IzUEISHgoHZmFj",
            "ZWRpchgCIAEoCzINLnBiLlZlY3RvcjRQQhIVCg12ZWhpY2xldHlwZWlkGAMg",
            "ASgNGlUKEUIyQ19QbGF5ZXJWZWhpY2xlEhEKCXZlaGljbGVpZBgBIAEoBBIO",
            "CgZzZWF0aWQYAiABKA0SHQoEdHlwZRgDIAEoDjIPLnBiLlZlaGljbGVUeXBl",
            "GkkKCkIyQ19CdWxsZXQSEgoKbWFpbmJ1bGxldBgBIAEoBRIUCgxzZWNvbmRi",
            "dWxsZXQYAiABKAUSEQoJZGVmYnVsbGV0GAMgASgFGh8KCkIyQ19XZWFwb24S",
            "EQoJYWN0aXZlSWR4GAEgASgFGosCCgtCMkNfUGFja2FnZRIRCgltYXh3ZWln",
            "aHQYASABKAUSDgoGd2VpZ2h0GAIgASgFEiAKCm1haW53ZWFwb24YAyABKAsy",
            "DC5wYi5JdGVtRGF0YRIiCgxzZWNvbmR3ZWFwb24YBCABKAsyDC5wYi5JdGVt",
            "RGF0YRIbCgVjb3JlcxgFIAMoCzIMLnBiLkl0ZW1EYXRhEh4KCGJhY2twYWNr",
            "GAYgAygLMgwucGIuSXRlbURhdGESHAoGaGVsbWV0GAcgASgLMgwucGIuSXRl",
            "bURhdGESHQoHcGFzc2l2ZRgIIAMoCzIMLnBiLkl0ZW1EYXRhEhkKA3BldBgJ",
            "IAEoCzIMLnBiLkl0ZW1EYXRhGiUKEEIyQ19SZWxvYWRFZmZlY3QSEQoJcmVs",
            "b2FkaW5nGAEgASgIGigKEkIyQ19SZWNvdmVyeUVmZmVjdBISCgpyZWNvdmVy",
            "aW5nGAEgASgIGnwKD0IyQ19HcmVuYWRlRGF0YRIJCgF4GAEgASgCEgkKAXkY",
            "AiABKAISCQoBehgDIAEoAhIPCgdza2lsbGlkGAQgASgNEg0KBW93bmVyGAUg",
            "ASgEEgwKBGRpcngYBiABKAISDAoEZGlyeRgHIAEoAhIMCgRkaXJ6GAggASgC",
            "GlMKCkIyQ19TaGllbGQSEAoIc2hpZWxkaHAYASABKAUSEwoLc2hpZWxkbWF4",
            "aHAYAiABKAUSHgoGcmVhc29uGAMgASgOMg4ucGIuS2lsbFJlYXNvbhotCg1C",
            "MkNfRW5kdXJhbmNlEgwKBHZlc3QYASABKAUSDgoGaGVsbWV0GAIgASgFGj0K",
            "D0IyQ19TaGllbGRTdGF0ZRIeCgVzdGF0ZRgBIAEoDjIPLnBiLlNoaWVsZFN0",
            "YXRlEgoKAmlkGAIgASgNGjEKDkIyQ19PcEJsYXN0aW5nEgwKBG9wZW4YASAB",
            "KAgSEQoJcmVsb2FkaW5nGAIgASgIGpgBCg1CMkNfU3VwZXJoZWF0EhIKCm1h",
            "aW5FbmVyZ3kYASABKAUSFAoMc2Vjb25kRW5lcmd5GAIgASgFEhEKCWRlZkVu",
            "ZXJneRgDIAEoBRIXCg9pc01haW5TdXBlcmhlYXQYBCABKAgSGQoRaXNTZWNv",
            "bmRTdXBlcmhlYXQYBSABKAgSFgoOaXNEZWZTdXBlcmhlYXQYBiABKAgaegoM",
            "QjJDX1BseVN0YXRlEjAKBnN0YXRlcxgBIAMoCzIgLnBiLkIyQ19TdGF0ZS5C",
            "MkNfUGx5U3RhdGUuU3RhdGUaOAoFU3RhdGUSCgoCaWQYASABKA0SEAoIbGlm",
            "ZXRpbWUYAiABKAMSEQoJdG90YWx0aW1lGAMgASgDGjIKCkIyQ19HYW1ibGUS",
            "EQoJZ2FtYmxlbnVtGAEgASgNEhEKCW1heGdhbWJsZRgCIAEoDRpWChBCMkNf",
            "TW9uc3RlclN0YXRlEg0KBXNpZ2h0GAEgASgCEg8KB293bmVyaWQYAiABKAQS",
            "EQoJbW9uc3RlcmlkGAMgASgNEg8KB2ZvcmNlaWQYBCABKA0aZwoTQjJDX0Js",
            "b2NrU2hpZWxkRGF0YRIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEo",
            "AhIPCgdza2lsbGlkGAQgASgNEg0KBW93bmVyGAUgASgEEg8KB2Rlc3Ryb3kY",
            "BiABKAgaXwoIQjJDX1Nob3ASIAoKbm9ybWFsc2hvcBgBIAMoCzIMLnBiLlNo",
            "b3BJdGVtEh8KCWJsYWNrc2hvcBgCIAMoCzIMLnBiLlNob3BJdGVtEhAKCGhh",
            "c2JsYWNrGAMgASgIGtgDChVCMkNfQ2hhcmFjdGVyUHJvcGVydHkSQgoGbm9y",
            "bWFsGAEgAygLMjIucGIuQjJDX1N0YXRlLkIyQ19DaGFyYWN0ZXJQcm9wZXJ0",
            "eS5Ob3JtYWxQcm9wZXJ0eRJACgVwb2ludBgCIAMoCzIxLnBiLkIyQ19TdGF0",
            "ZS5CMkNfQ2hhcmFjdGVyUHJvcGVydHkuUG9pbnRQcm9wZXJ0eRI+CgRiYXNl",
            "GAMgAygLMjAucGIuQjJDX1N0YXRlLkIyQ19DaGFyYWN0ZXJQcm9wZXJ0eS5C",
            "YXNlUHJvcGVydHkSPQoIZXhtb25leXMYBCADKAsyKy5wYi5CMkNfU3RhdGUu",
            "QjJDX0NoYXJhY3RlclByb3BlcnR5LkV4TW9uZXkaLAoOTm9ybWFsUHJvcGVy",
            "dHkSDAoEdHlwZRgBIAEoDRIMCgRkYXRhGAIgASgCGjgKDVBvaW50UHJvcGVy",
            "dHkSDAoEdHlwZRgBIAEoDRIMCgRkYXRhGAIgASgDEgsKA21heBgDIAEoAxoq",
            "CgxCYXNlUHJvcGVydHkSDAoEdHlwZRgBIAEoDRIMCgRkYXRhGAIgASgCGiYK",
            "B0V4TW9uZXkSDAoEdHlwZRgBIAEoDRINCgV2YWx1ZRgCIAEoBRo6ChBCMkNf",
            "Q2hhcmdlRW5lcmd5EgsKA2RlZhgBIAEoBRIMCgRtYWluGAIgASgFEgsKA3Nl",
            "YxgDIAEoBRpHChBCMkNfSW5pdEZlYXR1cmVzEhAKCGluaXRmaW5lGAEgAygN",
            "Eg8KB2luaXRiYWQYAiADKA0SEAoIZGVmc2tpbGwYAyADKA0aUgoOQjJDX0dy",
            "b3VuZEl0ZW0SDgoGaXRlbWlkGAEgASgNEg8KB3Zpc2libGUYAiABKAgSDQoF",
            "b3duZXIYAyABKAQSEAoIdGVhbXBpY2sYBCABKAgaGAoHQjJDX05wYxINCgVu",
            "cGNpZBgBIAEoDRpYChNCMkNfTW92ZVRyaWdnZXJEYXRhEgkKAXgYASABKAIS",
            "CQoBeRgCIAEoAhIJCgF6GAMgASgCEhEKCXRyaWdnZXJpZBgEIAEoDRINCgVv",
            "d25lchgFIAEoBBorCg1CMkNfUG93ZXJDbGlwEg0KBXBvd2VyGAEgASgFEgsK",
            "A21heBgCIAEoBUILCglTdGF0ZURhdGEiuCcKCUIyQ19FdmVudBIqCgZhdHRh",
            "Y2sYASABKAsyGC5wYi5CMkNfRXZlbnQuQjJDX0F0dGFja0gAEigKBWJlSGl0",
            "GAIgASgLMhcucGIuQjJDX0V2ZW50LkIyQ19CZUhpdEgAEjIKCmdldGJveGl0",
            "ZW0YAyABKAsyHC5wYi5CMkNfRXZlbnQuQjJDX0dldEJveEl0ZW1IABIvCgdk",
            "ZXBsYW5lGAQgASgLMhwucGIuQjJDX0V2ZW50LkIyQ19MZWF2ZVBsYW5lSAAS",
            "MAoJcGFyYWNodXRlGAUgASgLMhsucGIuQjJDX0V2ZW50LkIyQ19QYXJhY2h1",
            "dGVIABIuCgh0ZWxlcG9ydBgGIAEoCzIaLnBiLkIyQ19FdmVudC5TMkNfVGVs",
            "ZXBvcnRIABIsCgdzcGVtb3ZlGAcgASgLMhkucGIuQjJDX0V2ZW50LlMyQ19T",
            "cGVNb3ZlSAASLAoHaGl0ZG93bhgIIAEoCzIZLnBiLkIyQ19FdmVudC5CMkNf",
            "SGl0RG93bkgAEiwKB2dyZW5hZGUYCSABKAsyGS5wYi5CMkNfRXZlbnQuQjJD",
            "X0dyZW5hZGVIABIvCgZvcGRvb3IYCyABKAsyHS5wYi5CMkNfRXZlbnQuQjJD",
            "X09wZXJhdGVEb29ySAASNQoJb3B2ZWhpY2xlGAwgASgLMiAucGIuQjJDX0V2",
            "ZW50LkIyQ19PcGVyYXRlVmVoaWNsZUgAEjIKCmZhbGxncm91bmQYDSABKAsy",
            "HC5wYi5CMkNfRXZlbnQuQjJDX0ZhbGxHcm91bmRIABI3Cgt2ZWhpY29udGFj",
            "dBgOIAEoCzIgLnBiLkIyQ19FdmVudC5CMkNfVmVoaWNsZUNvbnRhY3RIABIu",
            "CghlbXB0eXJheRgPIAEoCzIaLnBiLkIyQ19FdmVudC5CMkNfRW1wdHlHdW5I",
            "ABIyCghyZWJ1bGxldBgQIAEoCzIeLnBiLkIyQ19FdmVudC5CMkNfUmVsb2Fk",
            "QnVsbGV0SAASLAoHY2FzdGluZxgRIAEoCzIZLnBiLkIyQ19FdmVudC5CMkNf",
            "Q2FzdGluZ0gAEiwKB2hpdGJhY2sYEiABKAsyGS5wYi5CMkNfRXZlbnQuQjJD",
            "X0hpdEJhY2tIABI0CgtwYWNrYWdlaXRlbRgTIAEoCzIdLnBiLkIyQ19FdmVu",
            "dC5CMkNfUGFja2FnZUl0ZW1IABI4Cg1wYWNrYWdld2VpZ2h0GBQgASgLMh8u",
            "cGIuQjJDX0V2ZW50LkIyQ19QYWNrYWdlV2VpZ2h0SAASLAoHa2lsbG51bRgV",
            "IAEoCzIZLnBiLkIyQ19FdmVudC5CMkNfS2lsbE51bUgAEjQKC2NsaW1iZWZm",
            "ZWN0GBYgASgLMh0ucGIuQjJDX0V2ZW50LkIyQ19DbGltYkVmZmVjdEgAEkAK",
            "EXNoaWVsZGJyZWFrZWZmZWN0GBcgASgLMiMucGIuQjJDX0V2ZW50LkIyQ19T",
            "aGllbGRCcmVha0VmZmVjdEgAEjIKCnNraWxsc3RhdGUYGCABKAsyHC5wYi5C",
            "MkNfRXZlbnQuQjJDX1NraWxsU3RhdGVIABI4Cg1tb25zdGVyYXR0YWNrGBkg",
            "ASgLMh8ucGIuQjJDX0V2ZW50LkIyQ19Nb25zdGVyQXR0YWNrSAASOAoNd2Fy",
            "bmluZ2VmZmVjdBgaIAEoCzIfLnBiLkIyQ19FdmVudC5CMkNfV2FybmluZ0Vm",
            "ZmVjdEgAEjwKD3dhaXR3ZWFwb25yZWFkeRgbIAEoCzIhLnBiLkIyQ19FdmVu",
            "dC5CMkNfV2FpdFdlYXBvblJlYWR5SAASOgoOcXVpY2tjb2xkc2tpbGwYHCAB",
            "KAsyIC5wYi5CMkNfRXZlbnQuQjJDX1F1aWNrQ29sZFNraWxsSAASOgoOY2F0",
            "Y2hpbmdlbnRpdHkYHSABKAsyIC5wYi5CMkNfRXZlbnQuQjJDX0NhdGNoaW5n",
            "RW50aXR5SAASOAoKZ3JvdW5kaXRlbRgeIAEoCzIiLnBiLkIyQ19FdmVudC5C",
            "MkNfQ3JlYXRlR3JvdW5kSXRlbUgAEjAKCXNraWxsY29sZBgfIAEoCzIbLnBi",
            "LkIyQ19FdmVudC5CMkNfU2tpbGxDb2xkSAASMAoJaW50ZXJmYWNlGCAgASgL",
            "MhsucGIuQjJDX0V2ZW50LkIyQ19JbnRlcmZhY2VIABIwCglza2lsbG1vdmUY",
            "ISABKAsyGy5wYi5CMkNfRXZlbnQuQjJDX1NraWxsTW92ZUgAEjAKCWdhbWJs",
            "ZWJveBgiIAEoCzIbLnBiLkIyQ19FdmVudC5CMkNfR2FtYmxlQm94SAASMwoI",
            "Y2hhcnllbGwYIyABKAsyHy5wYi5CMkNfRXZlbnQuQjJDX0NoYXJhY3Rlclll",
            "bGxIABIzCgdsdnVwUmV0GCQgASgLMiAucGIuQjJDX0V2ZW50LkIyQ19MZXZl",
            "bFVwSXRlbVJldEgAEjQKC3BsYXllcnN0YXRlGCUgASgLMh0ucGIuQjJDX0V2",
            "ZW50LkIyQ19QbGF5ZXJTdGF0ZUgAGucBCgpCMkNfQXR0YWNrEg8KB3NraWxs",
            "aWQYASABKA0SHQoGYXR0ZGlyGAIgASgLMg0ucGIuVmVjdG9yM1BCEiEKCmZv",
            "b3RvZmZzZXQYAyABKAsyDS5wYi5WZWN0b3IzUEISEwoLZmxhc2hoaWRkZXIY",
            "BCABKAISDgoGdGFyZ2V0GAUgASgEEhAKCGR1cmF0aW9uGAYgASgDEh0KBmF0",
            "dHBvcxgHIAEoCzINLnBiLlZlY3RvcjNQQhIOCgZyYWRpdXMYCCABKAISDgoG",
            "bGVuZ3RoGAkgASgCEhAKCGVmZmVjdGlkGAogASgNGh8KDEIyQ19FbXB0eUd1",
            "bhIPCgdza2lsbGlkGAEgASgNGoEBCgtCMkNfR3JlbmFkZRIMCgRhdHR4GAEg",
            "ASgCEgwKBGF0dHkYAiABKAISDAoEYXR0ehgDIAEoAhIMCgRkaXJ4GAQgASgC",
            "EgwKBGRpcnkYBSABKAISDAoEZGlyehgGIAEoAhIPCgdza2lsbGlkGAcgASgN",
            "Eg0KBW93bmVyGAggASgEGnAKCUIyQ19CZUhpdBIMCgR1dWlkGAEgASgEEg8K",
            "B3NraWxsaWQYAiABKA0SEAoIY3JpdGljYWwYAyABKAgSDgoGZGFtYWdlGAQg",
            "ASgDEg4KBnNoaWVsZBgFIAEoCBISCgp2dWxuZXJhYmxlGAYgASgIGkEKDkIy",
            "Q19HZXRCb3hJdGVtEgwKBHV1aWQYASABKAQSIQoLYm94aXRlbWRhdGEYAiAD",
            "KAsyDC5wYi5JdGVtRGF0YRpCCg5CMkNfTGVhdmVQbGFuZRIPCgdwbGFuZWlk",
            "GAEgASgEEgkKAXgYAiABKAISCQoBeRgDIAEoAhIJCgF6GAQgASgCGg8KDUIy",
            "Q19QYXJhY2h1dGUaDgoMUzJDX1RlbGVwb3J0Gg0KC1MyQ19TcGVNb3ZlGiEK",
            "C0IyQ19IaXREb3duEhIKCnRhcmdldG5hbWUYASABKAkaUAoPQjJDX09wZXJh",
            "dGVEb29yEg4KBmRvb3JpZBgBIAEoDRIcCgR0eXBlGAIgASgOMg4ucGIuT3BE",
            "b29yVHlwZRIPCgdvcHBseWlkGAMgASgEGjQKEkIyQ19PcGVyYXRlVmVoaWNs",
            "ZRIQCghlbnRpdHlpZBgBIAEoBBIMCgRvcGVuGAIgASgIGhAKDkIyQ19GYWxs",
            "R3JvdW5kGlcKEkIyQ19WZWhpY2xlQ29udGFjdBIgCgh0YXJndHlwZRgBIAEo",
            "DjIOLnBiLkVudGl0eVR5cGUSEAoIdGFyZ3V1aWQYAiABKAQSDQoFc3BlZWQY",
            "AyABKAIaMwoQQjJDX1JlbG9hZEJ1bGxldBIQCgh3ZWFwb25pZBgBIAEoDRIN",
            "CgViZWdpbhgCIAEoCBqDAQoLQjJDX0Nhc3RpbmcSDAoEdHlwZRgBIAEoDRIN",
            "CgVzdGFydBgCIAEoCBIQCghicmVha3VpZBgDIAEoBBINCgVicmVhaxgEIAEo",
            "CBIOCgZpdGVtaWQYBSABKA0SEwoLY2FzdGluZ3RpbWUYBiABKAMSEQoJc3Ry",
            "aW5na2V5GAcgASgJGlgKC0IyQ19IaXRCYWNrEhoKA2RpchgBIAEoCzINLnBi",
            "LlZlY3RvcjNQQhIKCgJ2MRgCIAEoAhIKCgJ0MRgDIAEoBRIJCgFrGAQgASgC",
            "EgoKAnQyGAUgASgFGrkBCg9CMkNfUGFja2FnZUl0ZW0SNgoEZGF0YRgBIAMo",
            "CzIoLnBiLkIyQ19FdmVudC5CMkNfUGFja2FnZUl0ZW0uVXBkYXRlRGF0YRpu",
            "CgpVcGRhdGVEYXRhEhoKBGl0ZW0YASABKAsyDC5wYi5JdGVtRGF0YRIjCgdv",
            "cGVyYXRlGAIgASgOMhIucGIuUGFja2FnZU9wZXJhdGUSHwoDcG9zGAMgASgO",
            "MhIucGIuUGFja2FnZVBvc1R5cGUaNgoRQjJDX1BhY2thZ2VXZWlnaHQSEQoJ",
            "bWF4d2VpZ2h0GAEgASgFEg4KBndlaWdodBgCIAEoBRoaCgtCMkNfS2lsbE51",
            "bRILCgNudW0YASABKAUaUwoPQjJDX0NsaW1iRWZmZWN0Eh8KCGNsaW1icG9z",
            "GAEgASgLMg0ucGIuVmVjdG9yM1BCEh8KCGNsaW1iZGlyGAIgASgLMg0ucGIu",
            "VmVjdG9yM1BCGiMKFUIyQ19TaGllbGRCcmVha0VmZmVjdBIKCgJpZBgBIAEo",
            "DRo8Cg5CMkNfU2tpbGxTdGF0ZRIqCg5za2lsbHN0YXRlZGF0YRgBIAEoCzIS",
            "LnBiLlNraWxsU3RhdGVEYXRhGiUKEUIyQ19Nb25zdGVyQXR0YWNrEhAKCHRh",
            "cmdldGlkGAEgASgEGmcKEUIyQ19XYXJuaW5nRWZmZWN0EgkKAXgYASABKAIS",
            "CQoBeRgCIAEoAhIJCgF6GAMgASgCEg8KB3NraWxsaWQYBCABKA0SEAoIbGlm",
            "ZXRpbWUYBSABKAUSDgoGcmFkaXVzGAYgASgCGo0BChNCMkNfV2FpdFdlYXBv",
            "blJlYWR5EkQKCndhaXR3ZWFwb24YASADKAsyMC5wYi5CMkNfRXZlbnQuQjJD",
            "X1dhaXRXZWFwb25SZWFkeS5XZWFwb25XYWl0VGltZRowCg5XZWFwb25XYWl0",
            "VGltZRIPCgdpdGVtdWlkGAEgASgEEg0KBXJlYWR5GAIgASgIGo4BChJCMkNf",
            "UXVpY2tDb2xkU2tpbGwSRwoOc2tpbGxxdWlja2NvbGQYASADKAsyLy5wYi5C",
            "MkNfRXZlbnQuQjJDX1F1aWNrQ29sZFNraWxsLlNraWxsUXVpY2tDb2xkGi8K",
            "DlNraWxsUXVpY2tDb2xkEg8KB3NraWxsaWQYASABKA0SDAoEY29sZBgCIAEo",
            "Axp1ChJCMkNfQ2F0Y2hpbmdFbnRpdHkSDgoGY3JlYXRlGAEgASgIEhoKA3Bv",
            "cxgCIAEoCzINLnBiLlZlY3RvcjNQQhIQCghlbnRpdHlpZBgDIAEoBBIRCglm",
            "ZWF0dXJlaWQYBCABKA0SDgoGdGFyZ2V0GAUgASgEGmMKFEIyQ19DcmVhdGVH",
            "cm91bmRJdGVtEg4KBml0ZW1pZBgBIAEoDRIaCgNwb3MYAiABKAsyDS5wYi5W",
            "ZWN0b3IzUEISDQoFb3duZXIYAyABKAQSEAoIdGVhbXBpY2sYBCABKAgagAEK",
            "DUIyQ19Ta2lsbENvbGQSNAoGc2tpbGxzGAEgAygLMiQucGIuQjJDX0V2ZW50",
            "LkIyQ19Ta2lsbENvbGQuT25lU2tpbGwaOQoIT25lU2tpbGwSDwoHc2tpbGxp",
            "ZBgBIAEoDRIPCgdwaWxlbnVtGAIgASgFEgsKA2RlbBgDIAEoCBqcAgoNQjJD",
            "X0ludGVyZmFjZRITCgtpbnRlcmZhY2VpZBgBIAEoDRINCgVlcnJubxgCIAEo",
            "BRI8Cgpub3JtYWxzaG9wGAMgASgLMiYucGIuQjJDX0V2ZW50LkIyQ19JbnRl",
            "cmZhY2UuTm9ybWFsU2hvcEgAEjoKCWJsYWNrc2hvcBgEIAEoCzIlLnBiLkIy",
            "Q19FdmVudC5CMkNfSW50ZXJmYWNlLkJsYWNrU2hvcEgAGi4KCk5vcm1hbFNo",
            "b3ASIAoKbm9ybWFsc2hvcBgBIAMoCzIMLnBiLlNob3BJdGVtGiwKCUJsYWNr",
            "U2hvcBIfCglibGFja3Nob3AYAiADKAsyDC5wYi5TaG9wSXRlbUIPCg1JbnRl",
            "cmZhY2VEYXRhGi4KDUIyQ19Ta2lsbE1vdmUSDwoHc2tpbGxpZBgBIAEoDRIM",
            "CgRzdG9wGAIgASgIGn0KDUIyQ19HYW1ibGVCb3gSNQoFaXRlbXMYASADKAsy",
            "Ji5wYi5CMkNfRXZlbnQuQjJDX0dhbWJsZUJveC5HYW1ibGVJdGVtGjUKCkdh",
            "bWJsZUl0ZW0SGgoEaXRlbRgBIAEoCzIMLnBiLkl0ZW1EYXRhEgsKA2FkZBgC",
            "IAEoCBo3ChFCMkNfQ2hhcmFjdGVyWWVsbBIRCgl0YXJnZXR1aWQYASABKAQS",
            "DwoHY29udGVudBgCIAEoDRo0ChJCMkNfTGV2ZWxVcEl0ZW1SZXQSDwoHaXRl",
            "bXVpZBgBIAEoBBINCgVlcnJvchgCIAEoDRpUCg9CMkNfUGxheWVyU3RhdGUS",
            "DwoHc3RhdGVpZBgBIAEoDRIQCghsaWZldGltZRgCIAEoAxIRCgl0b3RhbHRp",
            "bWUYAyABKAMSCwoDZGVsGAQgASgIQgsKCUV2ZW50RGF0YSI1Cg5Ta2lsbFN0",
            "YXRlRGF0YRIPCgdza2lsbGlkGAEgASgNEhIKCnNraWxsc3RhdGUYAiABKA0i",
            "lwEKCEl0ZW1EYXRhEgwKBHV1aWQYASABKAQSDgoGaXRlbWlkGAIgASgNEgsK",
            "A251bRgDIAEoBRIRCgllbmR1cmFuY2UYBCABKAUSEwoLc2tpbGxkYW1hZ2UY",
            "BSABKAUSEAoIZGlzdGFuY2UYBiABKAUSEgoKb25lY2xpcG51bRgHIAEoBRIS",
            "CgpyZWxvYWR0aW1lGAggASgFIk8KDFNob3BFbGVtRGF0YRIOCgZpdGVtaWQY",
            "ASABKA0SCwoDbnVtGAIgASgFEhEKCWl0ZW1wcmljZRgDIAEoDRIPCgdiZXNh",
            "bGVkGAQgASgIIk4KCFNob3BJdGVtEh4KCGl0ZW1pbmZvGAEgASgLMgwucGIu",
            "SXRlbURhdGESIgoIc2hvcGluZm8YAiABKAsyEC5wYi5TaG9wRWxlbURhdGEi",
            "LwoMQmluU2hvcEVsZW1zEh8KBWVsZW1zGAEgAygLMhAucGIuU2hvcEVsZW1E",
            "YXRhIkQKDVJvbGVTY29yZUluZm8SDAoEcm9sZRgBIAEoBBINCgVzY29yZRgC",
            "IAEoDRIWCg5zY29yZXRpbWVzdGFtcBgDIAEoDSJ/Cg9CMkNfRW50aXR5RGly",
            "dHkSDAoEdXVpZBgBIAEoBBIiCgplbnRpdHl0eXBlGAIgASgOMg4ucGIuRW50",
            "aXR5VHlwZRIcCgVzdGF0ZRgDIAMoCzINLnBiLkIyQ19TdGF0ZRIcCgVldmVu",
            "dBgEIAMoCzINLnBiLkIyQ19FdmVudCL5JAoNQjJDX1dvcmxkRGF0YRI8Cg1l",
            "bGVjdHJpY2ZpZWxkGAEgASgLMiMucGIuQjJDX1dvcmxkRGF0YS5CMkNfRWxl",
            "Y3RyaWNGaWVsZEgAEjIKCGFsaXZlbnVtGAIgASgLMh4ucGIuQjJDX1dvcmxk",
            "RGF0YS5CMkNfQWxpdmVOdW1IABI4Cghkcm9wYm94cxgDIAEoCzIkLnBiLkIy",
            "Q19Xb3JsZERhdGEuQjJDX0FpckRyb3BCb3hEYXRhSAASNwoJYmxhc3RkYXRh",
            "GAQgASgLMiIucGIuQjJDX1dvcmxkRGF0YS5CMkNfQmxhc3RpbmdEYXRhSAAS",
            "MgoIYm9tYml0ZW0YBSABKAsyHi5wYi5CMkNfV29ybGREYXRhLkIyQ19Cb21i",
            "SXRlbUgAEjQKCW11bHRpZ2FtZRgGIAEoCzIfLnBiLkIyQ19Xb3JsZERhdGEu",
            "QjJDX011bHRpR2FtZUgAEjQKCXRlYW1TY29yZRgHIAEoCzIfLnBiLkIyQ19X",
            "b3JsZERhdGEuQjJDX1RlYW1TY29yZUgAEjIKCGh1bnREYXRhGAggASgLMh4u",
            "cGIuQjJDX1dvcmxkRGF0YS5CMkNfSHVudERhdGFIABI2CgpvY2N1cHlEYXRh",
            "GAkgASgLMiAucGIuQjJDX1dvcmxkRGF0YS5CMkNfT2NjdXB5RGF0YUgAEkYK",
            "EnNjZW5lVHJpZ2dlckFjdGl2ZRgKIAEoCzIoLnBiLkIyQ19Xb3JsZERhdGEu",
            "QjJDX1NjZW5lVHJpZ2dlckFjdGl2ZUgAEjwKC3NpZ25hbHRvd2VyGAsgASgL",
            "MiUucGIuQjJDX1dvcmxkRGF0YS5CMkNfU2lnbmFsVG93ZXJEYXRhSAASOgoM",
            "dGVscG9ydFRvd2VyGAwgASgLMiIucGIuQjJDX1dvcmxkRGF0YS5CMkNfVGVs",
            "cG9ydFRvd2VySAASNAoJd29ybGRUaW1lGA0gASgLMh8ucGIuQjJDX1dvcmxk",
            "RGF0YS5CMkNfV29ybGRUaW1lSAASQQoObW9uc3RlcnJlZnJlc2gYDiABKAsy",
            "Jy5wYi5CMkNfV29ybGREYXRhLkIyQ19Nb25zdGVyUmVmcmVzaFBvc0gAEjcK",
            "CW9ic3RhY2xlcxgPIAEoCzIiLnBiLkIyQ19Xb3JsZERhdGEuQjJDX01vdmVP",
            "YnN0YWNsZUgAEjgKC2NvbnRyb2xkYXRhGBAgASgLMiEucGIuQjJDX1dvcmxk",
            "RGF0YS5CMkNfQ29udHJvbE1vZGVIABIyCghob29rZGF0YRgRIAEoCzIeLnBi",
            "LkIyQ19Xb3JsZERhdGEuQjJDX0hvb2tEYXRhSAASNgoKcHZwbnBjZGF0YRgS",
            "IAEoCzIgLnBiLkIyQ19Xb3JsZERhdGEuQjJDX1B2UE5wY0RhdGFIABI4Cgtk",
            "YXJ3aW5zY29yZRgTIAEoCzIhLnBiLkIyQ19Xb3JsZERhdGEuQjJDX0Rhcndp",
            "blNjb3JlSAASOAoLZGFyd2luZmlyc3QYFCABKAsyIS5wYi5CMkNfV29ybGRE",
            "YXRhLkIyQ19EYXJ3aW5GaXJzdEgAEjkKCWZvcmNlZGF0YRgVIAEoCzIkLnBi",
            "LkIyQ19Xb3JsZERhdGEuQjJDX0NoYXJhY3RlckZvcmNlSAASOAoLcHJvY2Vz",
            "c21vZGUYFiABKAsyIS5wYi5CMkNfV29ybGREYXRhLkIyQ19Qcm9jZXNzTW9k",
            "ZUgAEjwKDWdsb2JhbG1vbnN0ZXIYFyABKAsyIy5wYi5CMkNfV29ybGREYXRh",
            "LkIyQ19HbG9iYWxNb25zdGVySAAa4AEKEUIyQ19FbGVjdHJpY0ZpZWxkEg4K",
            "BnN0YXJ0eBgBIAEoAhIOCgZzdGFydHkYAiABKAISDAoEZW5keBgDIAEoAhIM",
            "CgRlbmR5GAQgASgCEhIKCnN0YXJ0cmFuZ2UYBSABKA0SEAoIZW5kcmFuZ2UY",
            "BiABKA0SEAoIY3VycmFuZ2UYByABKAISEQoJdG90YWx0aW1lGAggASgNEh0K",
            "BXN0YXRlGAkgASgOMg4ucGIuRmllbGRTdGF0ZRIRCglkZWxheXRpbWUYCiAB",
            "KA0SEgoKcmVtYWludGltZRgLIAEoDRodCgxCMkNfQWxpdmVOdW0SDQoFYWxp",
            "dmUYASABKAUaxgEKEkIyQ19BaXJEcm9wQm94RGF0YRJFCghkcm9wQm94cxgB",
            "IAMoCzIzLnBiLkIyQ19Xb3JsZERhdGEuQjJDX0FpckRyb3BCb3hEYXRhLkIy",
            "Q19BaXJEcm9wQm94GmkKDkIyQ19BaXJEcm9wQm94EgkKAXgYASABKAISCQoB",
            "eRgCIAEoAhIJCgF6GAMgASgCEhEKCXN0YXJ0VGltZRgEIAEoDRIjCglkcm9w",
            "U3RhdGUYBSABKA4yEC5wYi5Ecm9wQm94U3RhdGUa0wEKEEIyQ19CbGFzdGlu",
            "Z0RhdGESQQoIYmxhc3RpbmcYASADKAsyLy5wYi5CMkNfV29ybGREYXRhLkIy",
            "Q19CbGFzdGluZ0RhdGEuQjJDX0JsYXN0aW5nEhYKDmdhbWVyZW1haW50aW1l",
            "GAIgASgDGmQKDEIyQ19CbGFzdGluZxIiCgZzdGF0dXMYASABKA4yEi5wYi5C",
            "bGFzdFN0YXRlVHlwZRIQCghlbnRpdHlpZBgCIAEoBBISCgpyZW1haW50aW1l",
            "GAMgASgDEgoKAmlkGAQgASgNGkgKDEIyQ19Cb21iSXRlbRINCgVvd25lchgB",
            "IAEoBBIaCgNwb3MYAiABKAsyDS5wYi5WZWN0b3IzUEISDQoFaXNib3gYAyAB",
            "KAgajQEKDUIyQ19NdWx0aUdhbWUSEQoJY3VyZ2FtZWlkGAEgASgNEjoKBnJl",
            "c3VsdBgCIAMoCzIqLnBiLkIyQ19Xb3JsZERhdGEuQjJDX011bHRpR2FtZS5H",
            "YW1lUmVzdWx0Gi0KCkdhbWVSZXN1bHQSDgoGdGVhbWlkGAEgASgNEg8KB3dp",
            "bmdhbWUYAiABKA0aeQoNQjJDX1RlYW1TY29yZRI8Cgl0ZWFtU2NvcmUYASAD",
            "KAsyKS5wYi5CMkNfV29ybGREYXRhLkIyQ19UZWFtU2NvcmUuVGVhbVNjb3Jl",
            "GioKCVRlYW1TY29yZRIOCgZ0ZWFtaWQYASABKA0SDQoFc2NvcmUYAiABKA0a",
            "hAEKDEIyQ19IdW50RGF0YRI5CghodW50Um9sZRgBIAMoCzInLnBiLkIyQ19X",
            "b3JsZERhdGEuQjJDX0h1bnREYXRhLkh1bnRSb2xlEg8KB2h1bnRNb24YAiAD",
            "KAQaKAoISHVudFJvbGUSDgoGdGVhbWlkGAEgASgNEgwKBGRlc3QYAiABKAQa",
            "dwoOQjJDX09jY3VweURhdGESHgoFc3RhdGUYASABKA4yDy5wYi5PY2N1cHlT",
            "dGF0ZRIXCg9hdHRJbkNpcmNsZVRpbWUYAiABKA0SGAoQYXR0T3V0Q2lyY2xl",
            "VGltZRgDIAEoDRISCgpyZW1haW50aW1lGAQgASgNGrMBChZCMkNfU2NlbmVU",
            "cmlnZ2VyQWN0aXZlEkIKCHRyaWdnZXJzGAEgAygLMjAucGIuQjJDX1dvcmxk",
            "RGF0YS5CMkNfU2NlbmVUcmlnZ2VyQWN0aXZlLk9uZURhdGEaVQoHT25lRGF0",
            "YRIWCg5zY2VuZXRyaWdnZXJpZBgBIAEoDRIRCgl0cmlnZ2VyaWQYAiABKA0S",
            "DgoGYWN0aXZlGAMgASgIEg8KB3Zpc2libGUYBCABKAgazwIKE0IyQ19TaWdu",
            "YWxUb3dlckRhdGESRQoIb25lZmllbGQYASADKAsyMy5wYi5CMkNfV29ybGRE",
            "YXRhLkIyQ19TaWduYWxUb3dlckRhdGEuT25lRmlsZWRUb3dlchrwAQoNT25l",
            "RmlsZWRUb3dlchJUCghvbmV0b3dlchgBIAMoCzJCLnBiLkIyQ19Xb3JsZERh",
            "dGEuQjJDX1NpZ25hbFRvd2VyRGF0YS5PbmVGaWxlZFRvd2VyLk9uZVNpZ25h",
            "bFRvd2VyGogBCg5PbmVTaWduYWxUb3dlchIRCgl0cmlnZ2VyaWQYASABKA0S",
            "JAoGc3RhdHVzGAIgASgOMhQucGIuU2lnbmFsVG93ZXJTdGF0ZRIRCglvd25l",
            "clRlYW0YAyABKA0SFAoMaW5DaXJjbGVUaW1lGAQgASgNEhQKDHJlbWFpbmFj",
            "dGl2ZRgFIAEoDRreAQoQQjJDX1RlbHBvcnRUb3dlchJBCgh0ZWxUb3dlchgB",
            "IAMoCzIvLnBiLkIyQ19Xb3JsZERhdGEuQjJDX1RlbHBvcnRUb3dlci5UZWxw",
            "b3J0VG93ZXIahgEKDFRlbHBvcnRUb3dlchIRCglvd25lclRlYW0YASABKA0S",
            "GgoDcG9zGAIgASgLMg0ucGIuVmVjdG9yM1BCEgwKBHV1aWQYAyABKAQSEAoI",
            "ZGVjc2NhbGUYBCABKAISFAoMaW5DaXJjbGVUaW1lGAUgASgNEhEKCXRvdGFs",
            "VGltZRgGIAEoDRoiCg1CMkNfV29ybGRUaW1lEhEKCXdvcmxkVGltZRgBIAEo",
            "DRqZAQoVQjJDX01vbnN0ZXJSZWZyZXNoUG9zEkoKEW1vbnN0ZXJyZWZyZXNo",
            "cG9zGAEgAygLMi8ucGIuQjJDX1dvcmxkRGF0YS5CMkNfTW9uc3RlclJlZnJl",
            "c2hQb3MuUG9zRGF0YRo0CgdQb3NEYXRhEhoKA3BvcxgBIAEoCzINLnBiLlZl",
            "Y3RvcjNQQhINCgVwb3NpZBgCIAEoDRqNAQoQQjJDX01vdmVPYnN0YWNsZRI9",
            "CgRpbmZvGAEgAygLMi8ucGIuQjJDX1dvcmxkRGF0YS5CMkNfTW92ZU9ic3Rh",
            "Y2xlLk1vdmVPYnN0YWNsZRo6CgxNb3ZlT2JzdGFjbGUSCgoCaWQYASABKA0S",
            "DAoEb3BlbhgCIAEoCBIQCghwYXNzdGVhbRgDIAMoDRqeAgoPQjJDX0NvbnRy",
            "b2xNb2RlEkQKDHRlYW1wcm9ncmVzcxgBIAMoCzIuLnBiLkIyQ19Xb3JsZERh",
            "dGEuQjJDX0NvbnRyb2xNb2RlLlRlYW1Qcm9ncmVzcxIPCgd0aW1lb3V0GAIg",
            "ASgIEhMKC2NvbnRyb2xwcm9wGAMgASgNEhEKCW93bmVydGVhbRgEIAEoDRIg",
            "CgZzdGF0dXMYBSABKA4yEC5wYi5Db250cm9sU3RhdGUSEQoJdHJpZ2dlcmlk",
            "GAYgASgNGlcKDFRlYW1Qcm9ncmVzcxIOCgZ0ZWFtaWQYASABKA0SEAoIcHJv",
            "Z3Jlc3MYAiABKA0SEgoKb2NjdXB5dGltZRgDIAEoDRIRCgl0b3RhbHRpbWUY",
            "BCABKA0aZgoMQjJDX0hvb2tEYXRhEh0KBnN0YXR1cxgBIAEoDjINLnBiLkhv",
            "b2tTdGF0ZRIRCglvd25lcnRlYW0YAiABKA0SEgoKb2NjdXB5dGltZRgDIAEo",
            "DRIQCghjb29sdGltZRgEIAEoDRqdAQoOQjJDX1B2UE5wY0RhdGESPAoHcHZw",
            "ZGF0YRgBIAMoCzIrLnBiLkIyQ19Xb3JsZERhdGEuQjJDX1B2UE5wY0RhdGEu",
            "UHZQTnBjRGF0YRpNCgpQdlBOcGNEYXRhEh4KBXN0YXRlGAEgASgOMg8ucGIu",
            "UFZQTnBjU3RhdGUSEAoIZG93bnRpbWUYAiABKA0SDQoFbnBjaWQYAyABKA0a",
            "NwoPQjJDX0RhcndpblNjb3JlEiQKCXNjb3JlaW5mbxgBIAMoCzIRLnBiLlJv",
            "bGVTY29yZUluZm8aOwoPQjJDX0RhcndpbkZpcnN0EgwKBHJvbGUYASABKAQS",
            "GgoDcG9zGAIgASgLMg0ucGIuVmVjdG9yM1BCGowBChJCMkNfQ2hhcmFjdGVy",
            "Rm9yY2USRgoOY2hhcmFjdGVyZm9yY2UYASADKAsyLi5wYi5CMkNfV29ybGRE",
            "YXRhLkIyQ19DaGFyYWN0ZXJGb3JjZS5Gb3JjZURhdGEaLgoJRm9yY2VEYXRh",
            "EhAKCGVudGl0eWlkGAEgASgEEg8KB2ZvcmNlaWQYAiABKA0aNgoPQjJDX1By",
            "b2Nlc3NNb2RlEhMKC3Byb2Nlc3Ntb2RlGAEgASgFEg4KBmRyYWdvbhgCIAEo",
            "BBqTAQoRQjJDX0dsb2JhbE1vbnN0ZXISRAoLbW9uc3RlcmRhdGEYASABKAsy",
            "Ly5wYi5CMkNfV29ybGREYXRhLkIyQ19HbG9iYWxNb25zdGVyLk1vbnN0ZXJE",
            "YXRhGjgKC01vbnN0ZXJEYXRhEg0KBW1vbmlkGAEgASgNEhoKA3BvcxgCIAEo",
            "CzINLnBiLlZlY3RvcjNQQkILCglTdGF0ZURhdGEiiAsKDkIyQ19Xb3JsZEV2",
            "ZW50EjMKCGtpbGxpbmZvGAEgASgLMh8ucGIuQjJDX1dvcmxkRXZlbnQuQjJD",
            "X0tpbGxJbmZvSAASOQoLYXR0YWNrdm9pY2UYAiABKAsyIi5wYi5CMkNfV29y",
            "bGRFdmVudC5CMkNfQXR0YWNrVm9pY2VIABIxCgdvcGJsYXN0GAMgASgLMh4u",
            "cGIuQjJDX1dvcmxkRXZlbnQuQjJDX09wQmxhc3RIABJHChJzY2VuZXRyaWdn",
            "ZXJhY3RpdmUYBCABKAsyKS5wYi5CMkNfV29ybGRFdmVudC5CMkNfU2NlbmVU",
            "cmlnZ2VyQWN0aXZlSAASOQoLc2lnbmFsdG93ZXIYBSABKAsyIi5wYi5CMkNf",
            "V29ybGRFdmVudC5CMkNfU2lnbmFsVG93ZXJIABJVChlzY2VuZXRyaWdnZXJh",
            "Y3RpdmV3YXJuaW5nGAYgASgLMjAucGIuQjJDX1dvcmxkRXZlbnQuQjJDX1Nj",
            "ZW5lVHJpZ2dlckFjdGl2ZVdhcm5pbmdIABI/Cg5tb25zdGVyd2FybmluZxgH",
            "IAEoCzIlLnBiLkIyQ19Xb3JsZEV2ZW50LkIyQ19Nb25zdGVyV2FybmluZ0gA",
            "EjsKDHdvcmxkbWVzc2FnZRgIIAEoCzIjLnBiLkIyQ19Xb3JsZEV2ZW50LkIy",
            "Q19Xb3JsZE1lc3NhZ2VIABI5CgtkYXJ3aW5zY29yZRgJIAEoCzIiLnBiLkIy",
            "Q19Xb3JsZEV2ZW50LkIyQ19EYXJ3aW5TY29yZUgAEj0KDWdsb2JhbG1vbnN0",
            "ZXIYCiABKAsyJC5wYi5CMkNfV29ybGRFdmVudC5CMkNfR2xvYmFsTW9uc3Rl",
            "ckgAGmsKDEIyQ19LaWxsSW5mbxIOCgZraWxsZXIYASABKAQSDgoGa2lsbGVk",
            "GAIgASgEEg8KB2hpdGRvd24YAyABKAgSHgoGcmVhc29uGAQgASgOMg4ucGIu",
            "S2lsbFJlYXNvbhIKCgJpZBgFIAEoDRpnCg9CMkNfQXR0YWNrVm9pY2USEAoI",
            "YXR0YWNrZXIYASABKAQSHQoGYXR0cG9zGAIgASgLMg0ucGIuVmVjdG9yM1BC",
            "Eg8KB3NraWxsaWQYAyABKA0SEgoKc3VwcHJlc3NvchgEIAEoAho9CgtCMkNf",
            "T3BCbGFzdBIQCghlbnRpdHlpZBgBIAEoBBIMCgRvcGVuGAIgASgIEg4KBnRl",
            "bWFpZBgDIAEoDRpkChZCMkNfU2NlbmVUcmlnZ2VyQWN0aXZlEhYKDnNjZW5l",
            "dHJpZ2dlcmlkGAEgASgNEhEKCXRyaWdnZXJpZBgCIAEoDRIOCgZhY3RpdmUY",
            "AyABKAgSDwoHdmlzaWJsZRgEIAEoCBpzCg9CMkNfU2lnbmFsVG93ZXISEQoJ",
            "dHJpZ2dlcmlkGAEgASgNEiQKBnN0YXR1cxgCIAEoDjIULnBiLlNpZ25hbFRv",
            "d2VyU3RhdGUSEQoJb3duZXJUZWFtGAMgASgNEhQKDGluQ2lyY2xlVGltZRgE",
            "IAEoDRo3Ch1CMkNfU2NlbmVUcmlnZ2VyQWN0aXZlV2FybmluZxIWCg5zY2Vu",
            "ZXRyaWdnZXJpZBgBIAEoDRoUChJCMkNfTW9uc3Rlcldhcm5pbmcaOwoQQjJD",
            "X1dvcmxkTWVzc2FnZRITCgttZXNzYWdldHlwZRgBIAEoDRISCgptZXNzYWdl",
            "a2V5GAIgASgJGjcKD0IyQ19EYXJ3aW5TY29yZRIkCglzY29yZUluZm8YASAB",
            "KAsyES5wYi5Sb2xlU2NvcmVJbmZvGj4KEUIyQ19HbG9iYWxNb25zdGVyEg0K",
            "BW1vbmlkGAEgASgNEhoKA3BvcxgCIAEoCzINLnBiLlZlY3RvcjNQQkILCglF",
            "dmVudERhdGEiXgoOQjJDX1dvcmxkRGlydHkSJAoJd29ybGREYXRhGAEgAygL",
            "MhEucGIuQjJDX1dvcmxkRGF0YRImCgp3b3JsZEV2ZW50GAIgAygLMhIucGIu",
            "QjJDX1dvcmxkRXZlbnQiwwkKDEIyQ19UZWFtRGF0YRIzCgltYXJrcG9pbnQY",
            "ASABKAsyHi5wYi5CMkNfVGVhbURhdGEuQjJDX01hcmtQb2ludEgAEi0KA3Bv",
            "cxgCIAEoCzIeLnBiLkIyQ19UZWFtRGF0YS5CMkNfVGVhbWVyUG9zSAASJQoC",
            "aHAYAyABKAsyFy5wYi5CMkNfVGVhbURhdGEuQjJDX0hwSAASIQoIcm90YXRp",
            "b24YBCABKAsyDS5wYi5WZWN0b3IzUEJIABIpCgRsaXZlGAUgASgLMhkucGIu",
            "QjJDX1RlYW1EYXRhLkIyQ19MaXZlSAASMwoJc2hhcmVpdGVtGAYgASgLMh4u",
            "cGIuQjJDX1RlYW1EYXRhLkIyQ19TaGFyZUl0ZW1IABI7Cg1waWNrc2hhcmVp",
            "dGVtGAcgASgLMiIucGIuQjJDX1RlYW1EYXRhLkIyQ19QaWNrU2hhcmVJdGVt",
            "SAASMQoIbmV0c3RhdGUYCCABKAsyHS5wYi5CMkNfVGVhbURhdGEuQjJDX05l",
            "dFN0YXRlSAASLQoGc2hpZWxkGAkgASgLMhsucGIuQjJDX1RlYW1EYXRhLkIy",
            "Q19TaGllbGRIABIzCgdraWxsbW9uGAogASgLMiAucGIuQjJDX1RlYW1EYXRh",
            "LkIyQ19UZWFtS2lsbE1vbkgAEi8KBG5wY3MYCyABKAsyHy5wYi5CMkNfVGVh",
            "bURhdGEuQjJDX1Zpc2libGVOcGNIABItCgZlbmVyZ3kYDCABKAsyGy5wYi5C",
            "MkNfVGVhbURhdGEuQjJDX0VuZXJneUgAGiUKDUIyQ19NYXJrUG9pbnQSCQoB",
            "eBgBIAEoAhIJCgF5GAIgASgCGkYKBkIyQ19IcBIKCgJocBgBIAEoBRINCgVt",
            "YXhocBgCIAEoBRIOCgZ3ZWFraHAYAyABKAUSEQoJbWF4d2Vha2hwGAQgASgF",
            "GiYKCEIyQ19MaXZlEgwKBHdlYWsYASABKAgSDAoEbGl2ZRgCIAEoCBosCg1C",
            "MkNfU2hhcmVJdGVtEhsKBWl0ZW1zGAEgAygLMgwucGIuSXRlbURhdGEaQAoR",
            "QjJDX1BpY2tTaGFyZUl0ZW0SDQoFb3duZXIYASABKAQSDwoHaXRlbXVpZBgC",
            "IAEoBBILCgNudW0YAyABKAUaHgoMQjJDX05ldFN0YXRlEg4KBmxvZ291dBgB",
            "IAEoCBozCgpCMkNfU2hpZWxkEhAKCHNoaWVsZGhwGAEgASgFEhMKC3NoaWVs",
            "ZG1heGhwGAIgASgFGkAKDUIyQ19UZWFtZXJQb3MSGgoDcG9zGAEgASgLMg0u",
            "cGIuVmVjdG9yM1BCEhMKC2lzcGFyYWNodXRlGAIgASgIGiIKD0IyQ19UZWFt",
            "S2lsbE1vbhIPCgdraWxsbnVtGAEgASgNGoMBCg5CMkNfVmlzaWJsZU5wYxI4",
            "CgRucGNzGAEgAygLMioucGIuQjJDX1RlYW1EYXRhLkIyQ19WaXNpYmxlTnBj",
            "LlZpc2libGVOcGMaNwoKVmlzaWJsZU5wYxIaCgNwb3MYASABKAsyDS5wYi5W",
            "ZWN0b3IzUEISDQoFbnBjaWQYAiABKA0aHAoKQjJDX0VuZXJneRIOCgZlbmVy",
            "Z3kYASABKAVCCwoJU3RhdGVEYXRhIg8KDUIyQ19UZWFtRXZlbnQiYAoNQjJD",
            "X1RlYW1EaXJ0eRIMCgR1dWlkGAEgASgEEh8KBXN0YXRlGAIgAygLMhAucGIu",
            "QjJDX1RlYW1EYXRhEiAKBWV2ZW50GAMgAygLMhEucGIuQjJDX1RlYW1FdmVu",
            "dCK8AQoJQjJDX0ZyYW1lEg0KBWZyYW1lGAEgASgNEhYKDmZyYW1lRGV2aWF0",
            "aW9uGAIgASgFEigKC2VudGl0eURpcnR5GAMgAygLMhMucGIuQjJDX0VudGl0",
            "eURpcnR5EiYKCndvcmxkRGlydHkYBCABKAsyEi5wYi5CMkNfV29ybGREaXJ0",
            "eRIjCgh0ZWFtRGF0YRgFIAMoCzIRLnBiLkIyQ19UZWFtRGlydHkSEQoJZGlz",
            "YXBwZWFyGAYgAygEIjIKD0MyQl9CYXR0bGVMb2dpbhIOCgZyb2xlaWQYASAB",
            "KA0SDwoHc2NlbmVpZBgCIAEoDSIgCg9CMkNfQmF0dGxlTG9naW4SDQoFZXJy",
            "bm8YASABKAUiMgoTQjJDX0VudGl0eURpc2FwcGVhchINCgVmcmFtZRgBIAEo",
            "DRIMCgR1dWlkGAIgASgEIi8KC0xvYWRpbmdEYXRhEhAKCHByb2dyZXNzGAEg",
            "ASgNEg4KBnJvbGVpZBgCIAEoDSIvCgtDMkJfTG9hZGluZxIgCgdsb2FkaW5n",
            "GAEgASgLMg8ucGIuTG9hZGluZ0RhdGEiMAoLQjJDX0xvYWRpbmcSIQoIbG9h",
            "ZGluZ3MYASADKAsyDy5wYi5Mb2FkaW5nRGF0YSIsCg1CMkNfU3RhcnRHYW1l",
            "EgwKBHV1aWQYASABKAQSDQoFZnJhbWUYAiABKA0iggEKEVBsYXllckluaXRC",
            "YXRJbmZvEgwKBHV1aWQYASABKAQSDgoGcm9sZWlkGAIgASgNEgwKBG5hbWUY",
            "AyABKAkSDgoGdGVhbWlkGAQgASgNEg4KBnVuaXRpZBgFIAEoDRIPCgdpc1Jv",
            "Ym90GAYgASgIEhAKCGlzc3VwcGx5GAcgASgIIlQKE0IyQ19CYXR0bGVBbGxQ",
            "bGF5ZXISJgoHYWxscGx5cxgBIAMoCzIVLnBiLlBsYXllckluaXRCYXRJbmZv",
            "EhUKDW1heFRlYW1NZW1iZXIYAiABKA0iSwoPU2luZ2xlVm90ZUVxdWlwEg4K",
            "BnJvbGVpZBgBIAEoDRISCgptYWluV2VhcG9uGAIgASgNEhQKDHNlY29uZFdl",
            "YXBvbhgDIAEoDSI1Cg5CMkNfU2luZ2xlVm90ZRIjCgZlcXVpcHMYASADKAsy",
            "Ey5wYi5TaW5nbGVWb3RlRXF1aXAiKwoKVm90ZVJlc3VsdBIMCgR1dWlkGAEg",
            "ASgEEg8KB3ZvdGVudW0YAiABKA0iQQoOQjJDX1ZvdGVSZXN1bHQSDwoHbWF4",
            "dXVpZBgBIAEoBBIeCgZyZXN1bHQYAiADKAsyDi5wYi5Wb3RlUmVzdWx0IiAK",
            "DkMyQl9TaW5nbGVWb3RlEg4KBmRlc3RpZBgBIAEoDSJBCg5CMkNfR2V0Qm94",
            "SXRlbRIMCgR1dWlkGAEgASgEEiEKC2JveGl0ZW1kYXRhGAIgAygLMgwucGIu",
            "SXRlbURhdGEilwEKElRlYW1tYXRlRmluaXNoRGF0YRIMCgR1dWlkGAEgASgE",
            "Eg8KB2tpbGxOdW0YAiABKA0SEAoIdHJlYXROdW0YAyABKA0SIAoGcmV3YXJk",
            "GAQgASgLMhAucGIuU2V0dGxlUmV3YXJkEg4KBmRhbWFnZRgFIAEoDRIPCgd3",
            "ZWFwb25zGAYgAygNEg0KBWNvcmVzGAcgAygNImIKDlRlYW1GaW5pc2hEYXRh",
            "Eg4KBnRlYW1pZBgBIAEoDRIMCgRyYW5rGAIgASgNEjIKEnRlYW1tYXRlZmlu",
            "aXNoZGF0YRgDIAMoCzIWLnBiLlRlYW1tYXRlRmluaXNoRGF0YSJbCgtCMkNf",
            "R2FtZUVuZBIqCg50ZWFtZmluaXNoZGF0YRgBIAMoCzISLnBiLlRlYW1GaW5p",
            "c2hEYXRhEg8KB3JlYWxlbmQYAiABKAgSDwoHc2NlbmVpZBgDIAEoDSIUChJD",
            "MkJfUGxheWVyUXVpdEdhbWUiFAoSQjJDX1BsYXllclF1aXRHYW1lIm8KDFNl",
            "dHRsZVJld2FyZBINCgVtb25leRgBIAEoBRILCgNleHAYAiABKAUSHgoIcmFu",
            "ZGl0ZW0YAyADKAsyDC5wYi5JdGVtRGF0YRINCgVncmFkZRgEIAEoDRIUCgxj",
            "aGFsbGVuZ2VudW0YBSABKAUingEKDkIyQ19TZXR0bGVtZW50EgwKBHNlbGYY",
            "ASABKAgSIAoGcmV3YXJkGAIgASgLMhAucGIuU2V0dGxlUmV3YXJkEiYKCmZp",
            "bmlzaGRhdGEYAyABKAsyEi5wYi5UZWFtRmluaXNoRGF0YRIOCgZyZXZpdmUY",
            "BCABKAgSEAoIY29tcGxldGUYBSABKAgSEgoKcmV2aXZldGltZRgGIAEoDSIo",
            "CgtCMkNfQWxsRG9HTRILCgNjbWQYASABKAkSDAoEdXVpZBgCIAEoBCI2ChND",
            "MkJfQmF0dGxlUmVjb25uZWN0Eg4KBnJvbGVpZBgBIAEoDRIPCgdzY2VuZWlk",
            "GAIgASgNIiQKE0IyQ19CYXR0bGVSZWNvbm5lY3QSDQoFZXJybm8YASABKAUi",
            "3wEKCVdhdGNoRGF0YRIgCgljYW1lcmFwb3MYASABKAsyDS5wYi5WZWN0b3Iz",
            "UEISIgoLY2FtZXJhYW5nbGUYAiABKAsyDS5wYi5WZWN0b3IzUEISFAoMaXNv",
            "cGVuY2FtZXJhGAMgASgIEhgKEHNpZ2h0YmVhZHZpc2libGUYBCABKAgSGwoT",
            "Y29tc2lnaHRiZWFkdmlzaWJsZRgFIAEoCBIcCgV1aXBvcxgGIAEoCzINLnBi",
            "LlZlY3RvcjJQQhIOCgZpdGVtSUQYByABKAUSEQoJdmlld3JhbmdlGAggASgC",
            "IvcBCglDMkJfV2F0Y2gSNAoLd2F0Y2hiYXR0bGUYASABKAsyHS5wYi5DMkJf",
            "V2F0Y2guQzJCX1dhdGNoQmF0dGxlSAASMAoJd2F0Y2hkYXRhGAIgASgLMhsu",
            "cGIuQzJCX1dhdGNoLkMyQl9XYXRjaERhdGFIABpICg9DMkJfV2F0Y2hCYXR0",
            "bGUSDwoHYmV3YXRjaBgBIAEoBBISCgp3YXRjaGVuZW15GAIgASgIEhAKCHdh",
            "dGNoZW5kGAMgASgIGiwKDUMyQl9XYXRjaERhdGESGwoEZGF0YRgBIAEoCzIN",
            "LnBiLldhdGNoRGF0YUIKCghXYXRjaENtZCLyAQoJQjJDX1dhdGNoEjQKC3dh",
            "dGNoYmF0dGxlGAEgASgLMh0ucGIuQjJDX1dhdGNoLkIyQ19XYXRjaEJhdHRs",
            "ZUgAEjAKCXdhdGNoZGF0YRgCIAEoCzIbLnBiLkIyQ19XYXRjaC5CMkNfV2F0",
            "Y2hEYXRhSAAaPQoNQjJDX1dhdGNoRGF0YRIPCgdiZXdhdGNoGAEgASgEEhsK",
            "BGRhdGEYAiABKAsyDS5wYi5XYXRjaERhdGEaMgoPQjJDX1dhdGNoQmF0dGxl",
            "Eg4KBndhdGhlchgBIAEoBBIPCgdiZXdhdGNoGAIgASgEQgoKCFdhdGNoQ21k",
            "Ig4KDEIyQ19BdWRpb0FkZCIgCg5DMkJfQXVkaW9FbnRlchIOCgZ1c2VyaXAY",
            "ASABKAki7AMKDkIyQ19BdWRpb0VudGVyEjUKDGJhdHRsZXNlcnZlchgBIAEo",
            "CzIfLnBiLkIyQ19BdWRpb0VudGVyLkJhdHRsZVNlcnZlchIxCgp0ZWFtc2Vy",
            "dmVyGAIgASgLMh0ucGIuQjJDX0F1ZGlvRW50ZXIuVGVhbVNlcnZlchINCgVl",
            "cnJubxgDIAEoDRprCgpTZXJ2ZXJFbGVtEgwKBHR5cGUYASABKA0SDQoFYXNf",
            "aXAYAiABKAkSDgoGYXNfdGNwGAMgASgNEg4KBmFzX3VkcBgEIAEoDRIOCgZk",
            "Z3dfaXAYBSABKAkSEAoIZGd3X3BvcnQYBiABKA0aegoMQmF0dGxlU2VydmVy",
            "EhAKCHBhc3N3b3JkGAEgASgJEi4KB3NlcnZlcnMYAiADKAsyHS5wYi5CMkNf",
            "QXVkaW9FbnRlci5TZXJ2ZXJFbGVtEgsKA3NpZBgDIAEoDRIMCgRjc2lkGAQg",
            "ASgNEg0KBWJjaGlkGAUgASgNGngKClRlYW1TZXJ2ZXISEAoIcGFzc3dvcmQY",
            "ASABKAkSLgoHc2VydmVycxgCIAMoCzIdLnBiLkIyQ19BdWRpb0VudGVyLlNl",
            "cnZlckVsZW0SCwoDc2lkGAMgASgNEgwKBGNzaWQYBCABKA0SDQoFdGNoaWQY",
            "BSABKA0iOgoIQzJCX0NoYXQSDAoEZGF0YRgBIAEoCRIgCgR0eXBlGAIgASgO",
            "MhIucGIuQmF0dGxlQ2hhdFR5cGUiWAoIQjJDX0NoYXQSDAoEZGF0YRgBIAEo",
            "CRIOCgZzZW5kZXIYAiABKA0SIAoEdHlwZRgDIAEoDjISLnBiLkJhdHRsZUNo",
            "YXRUeXBlEgwKBG5hbWUYBCABKAkiGAoIQjJDX1Rlc3QSDAoEZGF0YRgBIAEo",
            "DCJCChBDMkJfUmVwbGFjZUVxdWlwEg4KBm9sZHVpZBgBIAEoBBIOCgZuZXd1",
            "aWQYAiABKAQSDgoGZmluaXNoGAMgASgIIn4KC0MyQl9CdXlJdGVtEhIKCm9s",
            "ZGl0ZW11aWQYASABKAQSEgoKbmV3aXRlbXVpZBgCIAEoBBIRCglpdGVtcHJp",
            "Y2UYAyABKA0SEQoJYmxhY2tzaG9wGAQgASgIEiEKBWluZGV4GAUgASgOMhIu",
            "cGIuUGFja2FnZVBvc1R5cGUiMAoLQjJDX0J1eUl0ZW0SEgoKYnV5aXRlbXVp",
            "ZBgBIAEoBBINCgVlcnJvchgCIAEoDSI0ChBCMkNfU3VwcGx5U2VsZWN0EiAK",
            "BnJld2FyZBgBIAEoCzIQLnBiLlNldHRsZVJld2FyZCIxChBDMkJfRW50ZXJQ",
            "dlBWb3RlEg0KBWVudGVyGAEgASgIEg4KBmNvbGxpZBgCIAEoBCKKAQoQQjJD",
            "X0VudGVyUHZQVm90ZRIPCgdwcm9tb3RlGAEgASgEEg4KBmNvbGxpZBgCIAEo",
            "BBIrCgRpbmZvGAMgAygLMh0ucGIuQjJDX0VudGVyUHZQVm90ZS5Wb3RlSW5m",
            "bxooCghWb3RlSW5mbxINCgV2b3RlchgBIAEoBBINCgVlbnRlchgCIAEoCCIj",
            "ChFDMkJfUHZQQ2hhckNob2ljZRIOCgZjaGFyaWQYASABKA0iMwoRQjJDX1B2",
            "UENoYXJDaG9pY2USDgoGcm9sZWlkGAEgASgEEg4KBmNoYXJpZBgCIAEoDSIe",
            "Cg1CMkNfSXRlbUVycm9yEg0KBWVycm9yGAEgASgNIksKF0IyQ19MZXZlbFVw",
            "Q2hvb3NlVGFsZW50Eg0KBWxldmVsGAEgASgFEhEKCXRhbGVudGlkeBgCIAMo",
            "BRIOCgZjaGFyaWQYAyABKA0iJgoXQzJCX0xldmVsVXBDaG9vc2VUYWxlbnQS",
            "CwoDaWR4GAEgASgFKqoBCgpFbnRpdHlUeXBlEgoKBk5vVHlwZRAAEgoKBlBs",
            "YXllchABEgcKA0JveBACEggKBEJvbWIQAxIJCgVIb3VzZRAEEgsKB1ZlaGlj",
            "bGUQBRILCgdNb25zdGVyEAYSDwoLQmxvY2tTaGllbGQQBxIOCgpHcm91bmRJ",
            "dGVtEAgSBwoDTnBjEAkSDwoLTW92ZVRyaWdnZXIQChIRCg1FbnRpdHlUeXBl",
            "TWF4EAsqLwoLVmVoaWNsZVR5cGUSEAoMVmVoaWNsZVBsYW5lEAASDgoKVmVo",
            "aWNsZUNhchABKj0KDEZseVN0YXRlVHlwZRILCgdGbHlOb25lEAASDgoKRmx5",
            "RGVQbGFuZRABEhAKDEZseVBhcmFjaHV0ZRACKi8KCkZpZWxkU3RhdGUSCAoE",
            "Tm9uZRAAEgsKB1ByZXBhcmUQARIKCgZTaHJpbmsQAirCAQoLT2NjdXB5U3Rh",
            "dGUSDwoLRU9TX1ByZXBhcmUQABIPCgtFT1NfU3VzcGVuZBABEhAKDEVPU19B",
            "ZGRTY29yZRACEhcKE0VPU19QcmVwYXJlRGVjU2NvcmUQAxIQCgxFT1NfRGVj",
            "U2NvcmUQBBISCg5FT1NfVE9BZGRTY29yZRAFEhIKDkVPU19UT0RlY1Njb3Jl",
            "EAYSGQoVRU9TX1RPUHJlcGFyZURlY1Njb3JlEAcSEQoNRU9TX1RPU3VzcGVu",
            "ZBAIKmAKCUhvb2tTdGF0ZRIMCghFSFNfTm9uZRAAEhAKDEVIU19BZGRTY29y",
            "ZRABEhAKDEVIU19EZWNTY29yZRACEg8KC0VIU19TdXNwZW5kEAMSEAoMRUhT",
            "X0Nvb2xUaW1lEAQqTAoKT3BEb29yVHlwZRIICgRPcGVuEAASCQoFQ2xvc2UQ",
            "ARILCgdEZXN0cm95EAISEAoMRGVzdHJveUVudGVyEAMSCgoGUmV2aXZlEAQq",
            "PgoOQmxhc3RTdGF0ZVR5cGUSDgoKQmxhc3RDbG9zZRAAEg0KCUJsYXN0T3Bl",
            "bhABEg0KCUJsYXN0TG9jaxACKpQBCg5QYWNrYWdlUG9zVHlwZRIOCgpNYWlu",
            "V2VhcG9uEAASEAoMU2Vjb25kV2VhcG9uEAESCgoGSGVsbWV0EAISBwoDUGV0",
            "EAMSDQoJRmlyc3RDb3JlEAQSDgoKU2Vjb25kQ29yZRAFEg0KCVRoaXJkQ29y",
            "ZRAGEgwKCEJhY2twYWNrEAcSDwoLUGFzc2l2ZVBhY2sQCCpECg5QYWNrYWdl",
            "T3BlcmF0ZRIOCgpQYWNrT3BOb25lEAASEAoMUGFja09wVXBkYXRlEAESEAoM",
            "UGFja09wRGVsZXRlEAIqngEKCktpbGxSZWFzb24SCwoHRUtSTm9uZRAAEg0K",
            "CUVLUlBsYXllchABEg8KC0VLUkVsZWN0cmljEAISDgoKRUtST2ZmbGluZRAD",
            "Eg4KCkVLUlZlaGljbGUQBBIJCgVFS1JHTRAFEg8KC0VLUkJ1cm5Cb21iEAYS",
            "CwoHRUtSS2lsbBAHEgsKB0VLUkZhbGwQCBINCglFS1JQb2lzb24QCSpHCgtT",
            "aGllbGRTdGF0ZRILCgdFU1NOb25lEAASCwoHRVNTRnVsbBABEgoKBkVTU0Rt",
            "ZxACEhIKDkVTU1JlY292ZXJ5aW5nEAMqmwEKEFNpZ25hbFRvd2VyU3RhdGUS",
            "DAoIRVNUU05vbmUQABIOCgpFU1RTQWN0aXZlEAESDwoLRVNUU0FjdGl2ZWQQ",
            "AhIPCgtFU1RTU3VzcGVuZBADEhAKDEVTVFNBZGRTY29yZRAEEhAKDEVTVFNE",
            "ZWNTY29yZRAFEhMKD0VTVFNEZWZEZWNTY29yZRAGEg4KCkVTVFNPcGVuZWQQ",
            "ByqHAQoMQ29udHJvbFN0YXRlEgsKB0VDU05vbmUQABIPCgtFQ1NBZGRTY29y",
            "ZRABEg8KC0VDU0RlY1Njb3JlEAISDgoKRUNTU3VzcGVuZBADEhIKDkVDU0Fk",
            "ZFByb2dyZXNzEAQSEgoORUNTU3BlQWRkU2NvcmUQBRIQCgxFQ1NTcGVSZWxv",
            "YWQQBipBCgtQVlBOcGNTdGF0ZRIQCgxFUE5TT3BlbkRvd24QABIRCg1FUE5T",
            "Q2xvc2VEb3duEAESDQoJRVBOU0Nsb3NlEAIqRwoMRHJvcEJveFN0YXRlEgwK",
            "CERyb3BOb25lEAASDQoJRHJvcFJlYWR5EAESDQoJRHJvcFN0YXJ0EAISCwoH",
            "RHJvcEVuZBADKisKDkJhdHRsZUNoYXRUeXBlEgwKCEJDVF9UZWFtEAASCwoH",
            "QkNUX0FsbBABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pb.EntityType), typeof(global::Pb.VehicleType), typeof(global::Pb.FlyStateType), typeof(global::Pb.FieldState), typeof(global::Pb.OccupyState), typeof(global::Pb.HookState), typeof(global::Pb.OpDoorType), typeof(global::Pb.BlastStateType), typeof(global::Pb.PackagePosType), typeof(global::Pb.PackageOperate), typeof(global::Pb.KillReason), typeof(global::Pb.ShieldState), typeof(global::Pb.SignalTowerState), typeof(global::Pb.ControlState), typeof(global::Pb.PVPNpcState), typeof(global::Pb.DropBoxState), typeof(global::Pb.BattleChatType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Vector2PB), global::Pb.Vector2PB.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Vector3PB), global::Pb.Vector3PB.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Vector4PB), global::Pb.Vector4PB.Parser, new[]{ "W", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand), global::Pb.C2B_PlayerCommand.Parser, new[]{ "Move", "Rotation", "Attack", "Pickupitem", "Dropitem", "Motion", "Openbox", "Getboxitem", "Deplane", "Equipboxitem", "Equipbackpackitem", "Exchangeattach", "Reloadbullet", "Unequipitem", "Changeweapon", "Markpoint", "Useitem", "Parachute", "Killweak", "Cureweak", "Opdoor", "Opvehicle", "Movevehicle", "Senditemtosharepack", "Senditemfromequipment", "Pickitemfromsharepack", "Fallground", "Emptyray", "Aiming", "Climbeffect", "Skillstate", "Jump", "Sight", "Blast", "Forceenterhouse", "Gamble", "Shieldskill", "Warningeffect", "Pickitem", "Exchangecore", "Clicknpc", "Catchnpc", "EquipGroundItem", "Npcgamble", "GetGambleBoxItem", "Npcsell", "Npclvup" }, new[]{ "CommandData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Move), global::Pb.C2B_PlayerCommand.Types.C2B_Move.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Jump), global::Pb.C2B_PlayerCommand.Types.C2B_Jump.Parser, new[]{ "Jump" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Rotation), global::Pb.C2B_PlayerCommand.Types.C2B_Rotation.Parser, new[]{ "DirX", "DirY", "DirZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Attack), global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Parser, new[]{ "Skillid", "Footoffset", "Rayatt", "Greatt", "Areaatt", "Repeatenum", "Lastrepeate", "Targetuid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast), global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast.Parser, new[]{ "Targetuid", "TargetFrame", "Lerp", "Tlerp", "Attx", "Atty", "Attz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade), global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade.Parser, new[]{ "Attx", "Atty", "Attz", "Dirx", "Diry", "Dirz", "Targetuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill), global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill.Parser, new[]{ "Attx", "Atty", "Attz" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun), global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun.Parser, new[]{ "Skillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox), global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox.Parser, new[]{ "BoxID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem), global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem.Parser, new[]{ "Uuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem), global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem.Parser, new[]{ "Itemuid", "Num", "Tobackpack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_DropItem), global::Pb.C2B_PlayerCommand.Types.C2B_DropItem.Parser, new[]{ "Itemuid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Motion), global::Pb.C2B_PlayerCommand.Types.C2B_Motion.Parser, new[]{ "Crouch", "Prone", "Running", "Climb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Aiming), global::Pb.C2B_PlayerCommand.Types.C2B_Aiming.Parser, new[]{ "Aiming", "Usinggrenade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_DePlane), global::Pb.C2B_PlayerCommand.Types.C2B_DePlane.Parser, new[]{ "Planeid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Parachute), global::Pb.C2B_PlayerCommand.Types.C2B_Parachute.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem), global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem.Parser, new[]{ "Itemuid", "Index", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem), global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem.Parser, new[]{ "Itemuid", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach), global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach.Parser, new[]{ "Itemtype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem), global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem.Parser, new[]{ "Itemuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet), global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon), global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon.Parser, new[]{ "Activeidx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint), global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_UseItem), global::Pb.C2B_PlayerCommand.Types.C2B_UseItem.Parser, new[]{ "Itemuid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak), global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak.Parser, new[]{ "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak), global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak.Parser, new[]{ "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor), global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor.Parser, new[]{ "Entityid", "Open" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle), global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle.Parser, new[]{ "Entityid", "Open", "Seatid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle), global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle.Parser, new[]{ "Entityid", "Movepos", "Facedir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack), global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack.Parser, new[]{ "Itemuid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment), global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment.Parser, new[]{ "Itemuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack), global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack.Parser, new[]{ "Itemuid", "Num", "Ownerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_FallGround), global::Pb.C2B_PlayerCommand.Types.C2B_FallGround.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect), global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect.Parser, new[]{ "Climbpos", "Climbdir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_SkillState), global::Pb.C2B_PlayerCommand.Types.C2B_SkillState.Parser, new[]{ "Skillstatedata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo), global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo.Parser, new[]{ "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast), global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast.Parser, new[]{ "Entityid", "Open" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse), global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse.Parser, new[]{ "Entityid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill), global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill.Parser, new[]{ "Skillid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_Gamble), global::Pb.C2B_PlayerCommand.Types.C2B_Gamble.Parser, new[]{ "Itemuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect), global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect.Parser, new[]{ "X", "Y", "Z", "Skillid", "Lifetime", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem), global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem.Parser, new[]{ "Entityid", "Tobackpack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore), global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore.Parser, new[]{ "DstIdx", "SrcIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc), global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc.Parser, new[]{ "Npcuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc), global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc.Parser, new[]{ "Uuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem), global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem.Parser, new[]{ "Itemuid", "Index", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble), global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble.Parser, new[]{ "Npcuid", "Index", "Leave" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem), global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem.Parser, new[]{ "Itemuid", "Drop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem), global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem.Parser, new[]{ "Npcuid", "Itemuid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem), global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem.Parser, new[]{ "Npcuid", "Itemuid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_Frame), global::Pb.C2B_Frame.Parser, new[]{ "Frame", "FrameRunCache", "Commands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State), global::Pb.B2C_State.Parser, new[]{ "Frame", "Move", "Rotation", "Hp", "Live", "Motion", "Pos", "Boxopen", "Planeinfo", "Maxhp", "Equipment", "Becureeffect", "Cureeffect", "Killeffect", "Slowrecovery", "Housedata", "Vehidata", "Plyvehi", "Boxtype", "Package", "Flystate", "Bullet", "Weapon", "Aiming", "Reloadeffect", "Recovering", "Grenade", "Shield", "Endurance", "Shieldstate", "Outlook", "Superheat", "Plystate", "Gamble", "Monsterstate", "Blockshield", "Shopdata", "Characterproperty", "Allproperty", "Changeenergy", "Initfeatures", "Grounditem", "Npc", "Movetrigger", "Powerclip" }, new[]{ "StateData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Outlook), global::Pb.B2C_State.Types.B2C_Outlook.Parser, new[]{ "Charid", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Move), global::Pb.B2C_State.Types.B2C_Move.Parser, new[]{ "Pos", "Velocity", "Teleport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Rotation), global::Pb.B2C_State.Types.B2C_Rotation.Parser, new[]{ "DirX", "DirY", "DirZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_HP), global::Pb.B2C_State.Types.B2C_HP.Parser, new[]{ "Hp", "Weakhp", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Live), global::Pb.B2C_State.Types.B2C_Live.Parser, new[]{ "Live", "Inweak" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_MaxHP), global::Pb.B2C_State.Types.B2C_MaxHP.Parser, new[]{ "Maxhp", "Maxweakhp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Motion), global::Pb.B2C_State.Types.B2C_Motion.Parser, new[]{ "Crouch", "Prone", "Running", "Climb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Aiming), global::Pb.B2C_State.Types.B2C_Aiming.Parser, new[]{ "Aiming", "Usinggrenade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Pos), global::Pb.B2C_State.Types.B2C_Pos.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_BoxOpen), global::Pb.B2C_State.Types.B2C_BoxOpen.Parser, new[]{ "Opened", "Boxid", "Empty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_BoxType), global::Pb.B2C_State.Types.B2C_BoxType.Parser, new[]{ "Boxtype", "Isairdrop", "Boxid", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_PlaneState), global::Pb.B2C_State.Types.B2C_PlaneState.Parser, new[]{ "Planeid", "Startx", "Starty", "Startz", "Endx", "Endy", "Endz", "Starttime", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Equipment), global::Pb.B2C_State.Types.B2C_Equipment.Parser, new[]{ "Helmet", "Vest", "Weapon", "Backmain", "Backsecond", "Shoes", "Weaponready", "Backmainready", "Backsecready", "Pet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_BeCureEffect), global::Pb.B2C_State.Types.B2C_BeCureEffect.Parser, new[]{ "Becuring" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_CureEffect), global::Pb.B2C_State.Types.B2C_CureEffect.Parser, new[]{ "Curing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_KillEffect), global::Pb.B2C_State.Types.B2C_KillEffect.Parser, new[]{ "Killing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_SlowRecovery), global::Pb.B2C_State.Types.B2C_SlowRecovery.Parser, new[]{ "Recovery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_HouseData), global::Pb.B2C_State.Types.B2C_HouseData.Parser, new[]{ "State", "Doorid", "Revive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_VehicleState), global::Pb.B2C_State.Types.B2C_VehicleState.Parser, new[]{ "Pos", "Facedir", "Vehicletypeid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_PlayerVehicle), global::Pb.B2C_State.Types.B2C_PlayerVehicle.Parser, new[]{ "Vehicleid", "Seatid", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Bullet), global::Pb.B2C_State.Types.B2C_Bullet.Parser, new[]{ "Mainbullet", "Secondbullet", "Defbullet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Weapon), global::Pb.B2C_State.Types.B2C_Weapon.Parser, new[]{ "ActiveIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Package), global::Pb.B2C_State.Types.B2C_Package.Parser, new[]{ "Maxweight", "Weight", "Mainweapon", "Secondweapon", "Cores", "Backpack", "Helmet", "Passive", "Pet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_ReloadEffect), global::Pb.B2C_State.Types.B2C_ReloadEffect.Parser, new[]{ "Reloading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_RecoveryEffect), global::Pb.B2C_State.Types.B2C_RecoveryEffect.Parser, new[]{ "Recovering" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_GrenadeData), global::Pb.B2C_State.Types.B2C_GrenadeData.Parser, new[]{ "X", "Y", "Z", "Skillid", "Owner", "Dirx", "Diry", "Dirz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Shield), global::Pb.B2C_State.Types.B2C_Shield.Parser, new[]{ "Shieldhp", "Shieldmaxhp", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Endurance), global::Pb.B2C_State.Types.B2C_Endurance.Parser, new[]{ "Vest", "Helmet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_ShieldState), global::Pb.B2C_State.Types.B2C_ShieldState.Parser, new[]{ "State", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_OpBlasting), global::Pb.B2C_State.Types.B2C_OpBlasting.Parser, new[]{ "Open", "Reloading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Superheat), global::Pb.B2C_State.Types.B2C_Superheat.Parser, new[]{ "MainEnergy", "SecondEnergy", "DefEnergy", "IsMainSuperheat", "IsSecondSuperheat", "IsDefSuperheat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_PlyState), global::Pb.B2C_State.Types.B2C_PlyState.Parser, new[]{ "States" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_PlyState.Types.State), global::Pb.B2C_State.Types.B2C_PlyState.Types.State.Parser, new[]{ "Id", "Lifetime", "Totaltime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Gamble), global::Pb.B2C_State.Types.B2C_Gamble.Parser, new[]{ "Gamblenum", "Maxgamble" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_MonsterState), global::Pb.B2C_State.Types.B2C_MonsterState.Parser, new[]{ "Sight", "Ownerid", "Monsterid", "Forceid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_BlockShieldData), global::Pb.B2C_State.Types.B2C_BlockShieldData.Parser, new[]{ "X", "Y", "Z", "Skillid", "Owner", "Destroy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Shop), global::Pb.B2C_State.Types.B2C_Shop.Parser, new[]{ "Normalshop", "Blackshop", "Hasblack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_CharacterProperty), global::Pb.B2C_State.Types.B2C_CharacterProperty.Parser, new[]{ "Normal", "Point", "Base", "Exmoneys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty), global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty.Parser, new[]{ "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty), global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty.Parser, new[]{ "Type", "Data", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty), global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty.Parser, new[]{ "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney), global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney.Parser, new[]{ "Type", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_ChargeEnergy), global::Pb.B2C_State.Types.B2C_ChargeEnergy.Parser, new[]{ "Def", "Main", "Sec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_InitFeatures), global::Pb.B2C_State.Types.B2C_InitFeatures.Parser, new[]{ "Initfine", "Initbad", "Defskill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_GroundItem), global::Pb.B2C_State.Types.B2C_GroundItem.Parser, new[]{ "Itemid", "Visible", "Owner", "Teampick" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_Npc), global::Pb.B2C_State.Types.B2C_Npc.Parser, new[]{ "Npcid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_MoveTriggerData), global::Pb.B2C_State.Types.B2C_MoveTriggerData.Parser, new[]{ "X", "Y", "Z", "Triggerid", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_State.Types.B2C_PowerClip), global::Pb.B2C_State.Types.B2C_PowerClip.Parser, new[]{ "Power", "Max" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event), global::Pb.B2C_Event.Parser, new[]{ "Attack", "BeHit", "Getboxitem", "Deplane", "Parachute", "Teleport", "Spemove", "Hitdown", "Grenade", "Opdoor", "Opvehicle", "Fallground", "Vehicontact", "Emptyray", "Rebullet", "Casting", "Hitback", "Packageitem", "Packageweight", "Killnum", "Climbeffect", "Shieldbreakeffect", "Skillstate", "Monsterattack", "Warningeffect", "Waitweaponready", "Quickcoldskill", "Catchingentity", "Grounditem", "Skillcold", "Interface", "Skillmove", "Gamblebox", "Charyell", "LvupRet", "Playerstate" }, new[]{ "EventData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Attack), global::Pb.B2C_Event.Types.B2C_Attack.Parser, new[]{ "Skillid", "Attdir", "Footoffset", "Flashhidder", "Target", "Duration", "Attpos", "Radius", "Length", "Effectid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_EmptyGun), global::Pb.B2C_Event.Types.B2C_EmptyGun.Parser, new[]{ "Skillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Grenade), global::Pb.B2C_Event.Types.B2C_Grenade.Parser, new[]{ "Attx", "Atty", "Attz", "Dirx", "Diry", "Dirz", "Skillid", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_BeHit), global::Pb.B2C_Event.Types.B2C_BeHit.Parser, new[]{ "Uuid", "Skillid", "Critical", "Damage", "Shield", "Vulnerable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_GetBoxItem), global::Pb.B2C_Event.Types.B2C_GetBoxItem.Parser, new[]{ "Uuid", "Boxitemdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_LeavePlane), global::Pb.B2C_Event.Types.B2C_LeavePlane.Parser, new[]{ "Planeid", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Parachute), global::Pb.B2C_Event.Types.B2C_Parachute.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.S2C_Teleport), global::Pb.B2C_Event.Types.S2C_Teleport.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.S2C_SpeMove), global::Pb.B2C_Event.Types.S2C_SpeMove.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_HitDown), global::Pb.B2C_Event.Types.B2C_HitDown.Parser, new[]{ "Targetname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_OperateDoor), global::Pb.B2C_Event.Types.B2C_OperateDoor.Parser, new[]{ "Doorid", "Type", "Opplyid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_OperateVehicle), global::Pb.B2C_Event.Types.B2C_OperateVehicle.Parser, new[]{ "Entityid", "Open" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_FallGround), global::Pb.B2C_Event.Types.B2C_FallGround.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_VehicleContact), global::Pb.B2C_Event.Types.B2C_VehicleContact.Parser, new[]{ "Targtype", "Targuuid", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_ReloadBullet), global::Pb.B2C_Event.Types.B2C_ReloadBullet.Parser, new[]{ "Weaponid", "Begin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Casting), global::Pb.B2C_Event.Types.B2C_Casting.Parser, new[]{ "Type", "Start", "Breakuid", "Break", "Itemid", "Castingtime", "Stringkey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_HitBack), global::Pb.B2C_Event.Types.B2C_HitBack.Parser, new[]{ "Dir", "V1", "T1", "K", "T2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_PackageItem), global::Pb.B2C_Event.Types.B2C_PackageItem.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData), global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData.Parser, new[]{ "Item", "Operate", "Pos" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_PackageWeight), global::Pb.B2C_Event.Types.B2C_PackageWeight.Parser, new[]{ "Maxweight", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_KillNum), global::Pb.B2C_Event.Types.B2C_KillNum.Parser, new[]{ "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_ClimbEffect), global::Pb.B2C_Event.Types.B2C_ClimbEffect.Parser, new[]{ "Climbpos", "Climbdir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect), global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_SkillState), global::Pb.B2C_Event.Types.B2C_SkillState.Parser, new[]{ "Skillstatedata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_MonsterAttack), global::Pb.B2C_Event.Types.B2C_MonsterAttack.Parser, new[]{ "Targetid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_WarningEffect), global::Pb.B2C_Event.Types.B2C_WarningEffect.Parser, new[]{ "X", "Y", "Z", "Skillid", "Lifetime", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_WaitWeaponReady), global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Parser, new[]{ "Waitweapon" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime), global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime.Parser, new[]{ "Itemuid", "Ready" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_QuickColdSkill), global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Parser, new[]{ "Skillquickcold" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold), global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold.Parser, new[]{ "Skillid", "Cold" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_CatchingEntity), global::Pb.B2C_Event.Types.B2C_CatchingEntity.Parser, new[]{ "Create", "Pos", "Entityid", "Featureid", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_CreateGroundItem), global::Pb.B2C_Event.Types.B2C_CreateGroundItem.Parser, new[]{ "Itemid", "Pos", "Owner", "Teampick" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_SkillCold), global::Pb.B2C_Event.Types.B2C_SkillCold.Parser, new[]{ "Skills" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill), global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill.Parser, new[]{ "Skillid", "Pilenum", "Del" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Interface), global::Pb.B2C_Event.Types.B2C_Interface.Parser, new[]{ "Interfaceid", "Errno", "Normalshop", "Blackshop" }, new[]{ "InterfaceData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop), global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop.Parser, new[]{ "Normalshop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop), global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop.Parser, new[]{ "Blackshop" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_SkillMove), global::Pb.B2C_Event.Types.B2C_SkillMove.Parser, new[]{ "Skillid", "Stop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_GambleBox), global::Pb.B2C_Event.Types.B2C_GambleBox.Parser, new[]{ "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem), global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem.Parser, new[]{ "Item", "Add" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_CharacterYell), global::Pb.B2C_Event.Types.B2C_CharacterYell.Parser, new[]{ "Targetuid", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_LevelUpItemRet), global::Pb.B2C_Event.Types.B2C_LevelUpItemRet.Parser, new[]{ "Itemuid", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Event.Types.B2C_PlayerState), global::Pb.B2C_Event.Types.B2C_PlayerState.Parser, new[]{ "Stateid", "Lifetime", "Totaltime", "Del" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SkillStateData), global::Pb.SkillStateData.Parser, new[]{ "Skillid", "Skillstate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ItemData), global::Pb.ItemData.Parser, new[]{ "Uuid", "Itemid", "Num", "Endurance", "Skilldamage", "Distance", "Oneclipnum", "Reloadtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ShopElemData), global::Pb.ShopElemData.Parser, new[]{ "Itemid", "Num", "Itemprice", "Besaled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ShopItem), global::Pb.ShopItem.Parser, new[]{ "Iteminfo", "Shopinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.BinShopElems), global::Pb.BinShopElems.Parser, new[]{ "Elems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.RoleScoreInfo), global::Pb.RoleScoreInfo.Parser, new[]{ "Role", "Score", "Scoretimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_EntityDirty), global::Pb.B2C_EntityDirty.Parser, new[]{ "Uuid", "Entitytype", "State", "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData), global::Pb.B2C_WorldData.Parser, new[]{ "Electricfield", "Alivenum", "Dropboxs", "Blastdata", "Bombitem", "Multigame", "TeamScore", "HuntData", "OccupyData", "SceneTriggerActive", "Signaltower", "TelportTower", "WorldTime", "Monsterrefresh", "Obstacles", "Controldata", "Hookdata", "Pvpnpcdata", "Darwinscore", "Darwinfirst", "Forcedata", "Processmode", "Globalmonster" }, new[]{ "StateData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_ElectricField), global::Pb.B2C_WorldData.Types.B2C_ElectricField.Parser, new[]{ "Startx", "Starty", "Endx", "Endy", "Startrange", "Endrange", "Currange", "Totaltime", "State", "Delaytime", "Remaintime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_AliveNum), global::Pb.B2C_WorldData.Types.B2C_AliveNum.Parser, new[]{ "Alive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData), global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Parser, new[]{ "DropBoxs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox), global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox.Parser, new[]{ "X", "Y", "Z", "StartTime", "DropState" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_BlastingData), global::Pb.B2C_WorldData.Types.B2C_BlastingData.Parser, new[]{ "Blasting", "Gameremaintime" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting), global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting.Parser, new[]{ "Status", "Entityid", "Remaintime", "Id" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_BombItem), global::Pb.B2C_WorldData.Types.B2C_BombItem.Parser, new[]{ "Owner", "Pos", "Isbox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_MultiGame), global::Pb.B2C_WorldData.Types.B2C_MultiGame.Parser, new[]{ "Curgameid", "Result" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult), global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult.Parser, new[]{ "Teamid", "Wingame" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_TeamScore), global::Pb.B2C_WorldData.Types.B2C_TeamScore.Parser, new[]{ "TeamScore" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore), global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore.Parser, new[]{ "Teamid", "Score" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_HuntData), global::Pb.B2C_WorldData.Types.B2C_HuntData.Parser, new[]{ "HuntRole", "HuntMon" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole), global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole.Parser, new[]{ "Teamid", "Dest" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_OccupyData), global::Pb.B2C_WorldData.Types.B2C_OccupyData.Parser, new[]{ "State", "AttInCircleTime", "AttOutCircleTime", "Remaintime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive), global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Parser, new[]{ "Triggers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData), global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData.Parser, new[]{ "Scenetriggerid", "Triggerid", "Active", "Visible" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_SignalTowerData), global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Parser, new[]{ "Onefield" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower), global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Parser, new[]{ "Onetower" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower), global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower.Parser, new[]{ "Triggerid", "Status", "OwnerTeam", "InCircleTime", "Remainactive" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_TelportTower), global::Pb.B2C_WorldData.Types.B2C_TelportTower.Parser, new[]{ "TelTower" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower), global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower.Parser, new[]{ "OwnerTeam", "Pos", "Uuid", "Decscale", "InCircleTime", "TotalTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_WorldTime), global::Pb.B2C_WorldData.Types.B2C_WorldTime.Parser, new[]{ "WorldTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos), global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Parser, new[]{ "Monsterrefreshpos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData), global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData.Parser, new[]{ "Pos", "Posid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_MoveObstacle), global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Parser, new[]{ "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle), global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle.Parser, new[]{ "Id", "Open", "Passteam" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_ControlMode), global::Pb.B2C_WorldData.Types.B2C_ControlMode.Parser, new[]{ "Teamprogress", "Timeout", "Controlprop", "Ownerteam", "Status", "Triggerid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress), global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress.Parser, new[]{ "Teamid", "Progress", "Occupytime", "Totaltime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_HookData), global::Pb.B2C_WorldData.Types.B2C_HookData.Parser, new[]{ "Status", "Ownerteam", "Occupytime", "Cooltime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_PvPNpcData), global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Parser, new[]{ "Pvpdata" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData), global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData.Parser, new[]{ "State", "Downtime", "Npcid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_DarwinScore), global::Pb.B2C_WorldData.Types.B2C_DarwinScore.Parser, new[]{ "Scoreinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_DarwinFirst), global::Pb.B2C_WorldData.Types.B2C_DarwinFirst.Parser, new[]{ "Role", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_CharacterForce), global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Parser, new[]{ "Characterforce" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData), global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData.Parser, new[]{ "Entityid", "Forceid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_ProcessMode), global::Pb.B2C_WorldData.Types.B2C_ProcessMode.Parser, new[]{ "Processmode", "Dragon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_GlobalMonster), global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Parser, new[]{ "Monsterdata" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData), global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData.Parser, new[]{ "Monid", "Pos" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent), global::Pb.B2C_WorldEvent.Parser, new[]{ "Killinfo", "Attackvoice", "Opblast", "Scenetriggeractive", "Signaltower", "Scenetriggeractivewarning", "Monsterwarning", "Worldmessage", "Darwinscore", "Globalmonster" }, new[]{ "EventData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_KillInfo), global::Pb.B2C_WorldEvent.Types.B2C_KillInfo.Parser, new[]{ "Killer", "Killed", "Hitdown", "Reason", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice), global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice.Parser, new[]{ "Attacker", "Attpos", "Skillid", "Suppressor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_OpBlast), global::Pb.B2C_WorldEvent.Types.B2C_OpBlast.Parser, new[]{ "Entityid", "Open", "Temaid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive), global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive.Parser, new[]{ "Scenetriggerid", "Triggerid", "Active", "Visible" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_SignalTower), global::Pb.B2C_WorldEvent.Types.B2C_SignalTower.Parser, new[]{ "Triggerid", "Status", "OwnerTeam", "InCircleTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning), global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning.Parser, new[]{ "Scenetriggerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning), global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage), global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage.Parser, new[]{ "Messagetype", "Messagekey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore), global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore.Parser, new[]{ "ScoreInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster), global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster.Parser, new[]{ "Monid", "Pos" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_WorldDirty), global::Pb.B2C_WorldDirty.Parser, new[]{ "WorldData", "WorldEvent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData), global::Pb.B2C_TeamData.Parser, new[]{ "Markpoint", "Pos", "Hp", "Rotation", "Live", "Shareitem", "Pickshareitem", "Netstate", "Shield", "Killmon", "Npcs", "Energy" }, new[]{ "StateData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_MarkPoint), global::Pb.B2C_TeamData.Types.B2C_MarkPoint.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_Hp), global::Pb.B2C_TeamData.Types.B2C_Hp.Parser, new[]{ "Hp", "Maxhp", "Weakhp", "Maxweakhp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_Live), global::Pb.B2C_TeamData.Types.B2C_Live.Parser, new[]{ "Weak", "Live" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_ShareItem), global::Pb.B2C_TeamData.Types.B2C_ShareItem.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_PickShareItem), global::Pb.B2C_TeamData.Types.B2C_PickShareItem.Parser, new[]{ "Owner", "Itemuid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_NetState), global::Pb.B2C_TeamData.Types.B2C_NetState.Parser, new[]{ "Logout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_Shield), global::Pb.B2C_TeamData.Types.B2C_Shield.Parser, new[]{ "Shieldhp", "Shieldmaxhp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_TeamerPos), global::Pb.B2C_TeamData.Types.B2C_TeamerPos.Parser, new[]{ "Pos", "Isparachute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_TeamKillMon), global::Pb.B2C_TeamData.Types.B2C_TeamKillMon.Parser, new[]{ "Killnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_VisibleNpc), global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Parser, new[]{ "Npcs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc), global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc.Parser, new[]{ "Pos", "Npcid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamData.Types.B2C_Energy), global::Pb.B2C_TeamData.Types.B2C_Energy.Parser, new[]{ "Energy" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamEvent), global::Pb.B2C_TeamEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_TeamDirty), global::Pb.B2C_TeamDirty.Parser, new[]{ "Uuid", "State", "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Frame), global::Pb.B2C_Frame.Parser, new[]{ "Frame", "FrameDeviation", "EntityDirty", "WorldDirty", "TeamData", "Disappear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_BattleLogin), global::Pb.C2B_BattleLogin.Parser, new[]{ "Roleid", "Sceneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_BattleLogin), global::Pb.B2C_BattleLogin.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_EntityDisappear), global::Pb.B2C_EntityDisappear.Parser, new[]{ "Frame", "Uuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.LoadingData), global::Pb.LoadingData.Parser, new[]{ "Progress", "Roleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_Loading), global::Pb.C2B_Loading.Parser, new[]{ "Loading" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Loading), global::Pb.B2C_Loading.Parser, new[]{ "Loadings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_StartGame), global::Pb.B2C_StartGame.Parser, new[]{ "Uuid", "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.PlayerInitBatInfo), global::Pb.PlayerInitBatInfo.Parser, new[]{ "Uuid", "Roleid", "Name", "Teamid", "Unitid", "IsRobot", "Issupply" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_BattleAllPlayer), global::Pb.B2C_BattleAllPlayer.Parser, new[]{ "Allplys", "MaxTeamMember" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SingleVoteEquip), global::Pb.SingleVoteEquip.Parser, new[]{ "Roleid", "MainWeapon", "SecondWeapon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_SingleVote), global::Pb.B2C_SingleVote.Parser, new[]{ "Equips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.VoteResult), global::Pb.VoteResult.Parser, new[]{ "Uuid", "Votenum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_VoteResult), global::Pb.B2C_VoteResult.Parser, new[]{ "Maxuuid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_SingleVote), global::Pb.C2B_SingleVote.Parser, new[]{ "Destid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_GetBoxItem), global::Pb.B2C_GetBoxItem.Parser, new[]{ "Uuid", "Boxitemdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.TeammateFinishData), global::Pb.TeammateFinishData.Parser, new[]{ "Uuid", "KillNum", "TreatNum", "Reward", "Damage", "Weapons", "Cores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.TeamFinishData), global::Pb.TeamFinishData.Parser, new[]{ "Teamid", "Rank", "Teammatefinishdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_GameEnd), global::Pb.B2C_GameEnd.Parser, new[]{ "Teamfinishdata", "Realend", "Sceneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PlayerQuitGame), global::Pb.C2B_PlayerQuitGame.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_PlayerQuitGame), global::Pb.B2C_PlayerQuitGame.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SettleReward), global::Pb.SettleReward.Parser, new[]{ "Money", "Exp", "Randitem", "Grade", "Challengenum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Settlement), global::Pb.B2C_Settlement.Parser, new[]{ "Self", "Reward", "Finishdata", "Revive", "Complete", "Revivetime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_AllDoGM), global::Pb.B2C_AllDoGM.Parser, new[]{ "Cmd", "Uuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_BattleReconnect), global::Pb.C2B_BattleReconnect.Parser, new[]{ "Roleid", "Sceneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_BattleReconnect), global::Pb.B2C_BattleReconnect.Parser, new[]{ "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.WatchData), global::Pb.WatchData.Parser, new[]{ "Camerapos", "Cameraangle", "Isopencamera", "Sightbeadvisible", "Comsightbeadvisible", "Uipos", "ItemID", "Viewrange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_Watch), global::Pb.C2B_Watch.Parser, new[]{ "Watchbattle", "Watchdata" }, new[]{ "WatchCmd" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_Watch.Types.C2B_WatchBattle), global::Pb.C2B_Watch.Types.C2B_WatchBattle.Parser, new[]{ "Bewatch", "Watchenemy", "Watchend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_Watch.Types.C2B_WatchData), global::Pb.C2B_Watch.Types.C2B_WatchData.Parser, new[]{ "Data" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Watch), global::Pb.B2C_Watch.Parser, new[]{ "Watchbattle", "Watchdata" }, new[]{ "WatchCmd" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Watch.Types.B2C_WatchData), global::Pb.B2C_Watch.Types.B2C_WatchData.Parser, new[]{ "Bewatch", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Watch.Types.B2C_WatchBattle), global::Pb.B2C_Watch.Types.B2C_WatchBattle.Parser, new[]{ "Wather", "Bewatch" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_AudioAdd), global::Pb.B2C_AudioAdd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_AudioEnter), global::Pb.C2B_AudioEnter.Parser, new[]{ "Userip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_AudioEnter), global::Pb.B2C_AudioEnter.Parser, new[]{ "Battleserver", "Teamserver", "Errno" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_AudioEnter.Types.ServerElem), global::Pb.B2C_AudioEnter.Types.ServerElem.Parser, new[]{ "Type", "AsIp", "AsTcp", "AsUdp", "DgwIp", "DgwPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_AudioEnter.Types.BattleServer), global::Pb.B2C_AudioEnter.Types.BattleServer.Parser, new[]{ "Password", "Servers", "Sid", "Csid", "Bchid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_AudioEnter.Types.TeamServer), global::Pb.B2C_AudioEnter.Types.TeamServer.Parser, new[]{ "Password", "Servers", "Sid", "Csid", "Tchid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_Chat), global::Pb.C2B_Chat.Parser, new[]{ "Data", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Chat), global::Pb.B2C_Chat.Parser, new[]{ "Data", "Sender", "Type", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_Test), global::Pb.B2C_Test.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_ReplaceEquip), global::Pb.C2B_ReplaceEquip.Parser, new[]{ "Olduid", "Newuid", "Finish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_BuyItem), global::Pb.C2B_BuyItem.Parser, new[]{ "Olditemuid", "Newitemuid", "Itemprice", "Blackshop", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_BuyItem), global::Pb.B2C_BuyItem.Parser, new[]{ "Buyitemuid", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_SupplySelect), global::Pb.B2C_SupplySelect.Parser, new[]{ "Reward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_EnterPvPVote), global::Pb.C2B_EnterPvPVote.Parser, new[]{ "Enter", "Collid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_EnterPvPVote), global::Pb.B2C_EnterPvPVote.Parser, new[]{ "Promote", "Collid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_EnterPvPVote.Types.VoteInfo), global::Pb.B2C_EnterPvPVote.Types.VoteInfo.Parser, new[]{ "Voter", "Enter" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_PvPCharChoice), global::Pb.C2B_PvPCharChoice.Parser, new[]{ "Charid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_PvPCharChoice), global::Pb.B2C_PvPCharChoice.Parser, new[]{ "Roleid", "Charid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_ItemError), global::Pb.B2C_ItemError.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.B2C_LevelUpChooseTalent), global::Pb.B2C_LevelUpChooseTalent.Parser, new[]{ "Level", "Talentidx", "Charid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.C2B_LevelUpChooseTalent), global::Pb.C2B_LevelUpChooseTalent.Parser, new[]{ "Idx" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EntityType {
    [pbr::OriginalName("NoType")] NoType = 0,
    [pbr::OriginalName("Player")] Player = 1,
    [pbr::OriginalName("Box")] Box = 2,
    [pbr::OriginalName("Bomb")] Bomb = 3,
    [pbr::OriginalName("House")] House = 4,
    [pbr::OriginalName("Vehicle")] Vehicle = 5,
    [pbr::OriginalName("Monster")] Monster = 6,
    [pbr::OriginalName("BlockShield")] BlockShield = 7,
    [pbr::OriginalName("GroundItem")] GroundItem = 8,
    [pbr::OriginalName("Npc")] Npc = 9,
    [pbr::OriginalName("MoveTrigger")] MoveTrigger = 10,
    [pbr::OriginalName("EntityTypeMax")] Max = 11,
  }

  public enum VehicleType {
    [pbr::OriginalName("VehiclePlane")] VehiclePlane = 0,
    [pbr::OriginalName("VehicleCar")] VehicleCar = 1,
  }

  public enum FlyStateType {
    [pbr::OriginalName("FlyNone")] FlyNone = 0,
    [pbr::OriginalName("FlyDePlane")] FlyDePlane = 1,
    [pbr::OriginalName("FlyParachute")] FlyParachute = 2,
  }

  public enum FieldState {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Prepare")] Prepare = 1,
    [pbr::OriginalName("Shrink")] Shrink = 2,
  }

  public enum OccupyState {
    [pbr::OriginalName("EOS_Prepare")] EosPrepare = 0,
    [pbr::OriginalName("EOS_Suspend")] EosSuspend = 1,
    [pbr::OriginalName("EOS_AddScore")] EosAddScore = 2,
    [pbr::OriginalName("EOS_PrepareDecScore")] EosPrepareDecScore = 3,
    [pbr::OriginalName("EOS_DecScore")] EosDecScore = 4,
    [pbr::OriginalName("EOS_TOAddScore")] EosToaddScore = 5,
    [pbr::OriginalName("EOS_TODecScore")] EosTodecScore = 6,
    [pbr::OriginalName("EOS_TOPrepareDecScore")] EosToprepareDecScore = 7,
    [pbr::OriginalName("EOS_TOSuspend")] EosTosuspend = 8,
  }

  public enum HookState {
    [pbr::OriginalName("EHS_None")] EhsNone = 0,
    [pbr::OriginalName("EHS_AddScore")] EhsAddScore = 1,
    [pbr::OriginalName("EHS_DecScore")] EhsDecScore = 2,
    [pbr::OriginalName("EHS_Suspend")] EhsSuspend = 3,
    [pbr::OriginalName("EHS_CoolTime")] EhsCoolTime = 4,
  }

  public enum OpDoorType {
    [pbr::OriginalName("Open")] Open = 0,
    [pbr::OriginalName("Close")] Close = 1,
    [pbr::OriginalName("Destroy")] Destroy = 2,
    [pbr::OriginalName("DestroyEnter")] DestroyEnter = 3,
    [pbr::OriginalName("Revive")] Revive = 4,
  }

  public enum BlastStateType {
    [pbr::OriginalName("BlastClose")] BlastClose = 0,
    [pbr::OriginalName("BlastOpen")] BlastOpen = 1,
    [pbr::OriginalName("BlastLock")] BlastLock = 2,
  }

  public enum PackagePosType {
    [pbr::OriginalName("MainWeapon")] MainWeapon = 0,
    [pbr::OriginalName("SecondWeapon")] SecondWeapon = 1,
    [pbr::OriginalName("Helmet")] Helmet = 2,
    [pbr::OriginalName("Pet")] Pet = 3,
    [pbr::OriginalName("FirstCore")] FirstCore = 4,
    [pbr::OriginalName("SecondCore")] SecondCore = 5,
    [pbr::OriginalName("ThirdCore")] ThirdCore = 6,
    [pbr::OriginalName("Backpack")] Backpack = 7,
    [pbr::OriginalName("PassivePack")] PassivePack = 8,
  }

  public enum PackageOperate {
    [pbr::OriginalName("PackOpNone")] PackOpNone = 0,
    [pbr::OriginalName("PackOpUpdate")] PackOpUpdate = 1,
    [pbr::OriginalName("PackOpDelete")] PackOpDelete = 2,
  }

  public enum KillReason {
    [pbr::OriginalName("EKRNone")] Ekrnone = 0,
    [pbr::OriginalName("EKRPlayer")] Ekrplayer = 1,
    [pbr::OriginalName("EKRElectric")] Ekrelectric = 2,
    [pbr::OriginalName("EKROffline")] Ekroffline = 3,
    [pbr::OriginalName("EKRVehicle")] Ekrvehicle = 4,
    [pbr::OriginalName("EKRGM")] Ekrgm = 5,
    [pbr::OriginalName("EKRBurnBomb")] EkrburnBomb = 6,
    [pbr::OriginalName("EKRKill")] Ekrkill = 7,
    [pbr::OriginalName("EKRFall")] Ekrfall = 8,
    [pbr::OriginalName("EKRPoison")] Ekrpoison = 9,
  }

  public enum ShieldState {
    [pbr::OriginalName("ESSNone")] Essnone = 0,
    [pbr::OriginalName("ESSFull")] Essfull = 1,
    [pbr::OriginalName("ESSDmg")] Essdmg = 2,
    [pbr::OriginalName("ESSRecoverying")] Essrecoverying = 3,
  }

  public enum SignalTowerState {
    [pbr::OriginalName("ESTSNone")] Estsnone = 0,
    [pbr::OriginalName("ESTSActive")] Estsactive = 1,
    [pbr::OriginalName("ESTSActived")] Estsactived = 2,
    [pbr::OriginalName("ESTSSuspend")] Estssuspend = 3,
    [pbr::OriginalName("ESTSAddScore")] EstsaddScore = 4,
    [pbr::OriginalName("ESTSDecScore")] EstsdecScore = 5,
    [pbr::OriginalName("ESTSDefDecScore")] EstsdefDecScore = 6,
    [pbr::OriginalName("ESTSOpened")] Estsopened = 7,
  }

  public enum ControlState {
    [pbr::OriginalName("ECSNone")] Ecsnone = 0,
    [pbr::OriginalName("ECSAddScore")] EcsaddScore = 1,
    [pbr::OriginalName("ECSDecScore")] EcsdecScore = 2,
    [pbr::OriginalName("ECSSuspend")] Ecssuspend = 3,
    [pbr::OriginalName("ECSAddProgress")] EcsaddProgress = 4,
    [pbr::OriginalName("ECSSpeAddScore")] EcsspeAddScore = 5,
    [pbr::OriginalName("ECSSpeReload")] EcsspeReload = 6,
  }

  public enum PVPNpcState {
    [pbr::OriginalName("EPNSOpenDown")] EpnsopenDown = 0,
    [pbr::OriginalName("EPNSCloseDown")] EpnscloseDown = 1,
    [pbr::OriginalName("EPNSClose")] Epnsclose = 2,
  }

  public enum DropBoxState {
    [pbr::OriginalName("DropNone")] DropNone = 0,
    [pbr::OriginalName("DropReady")] DropReady = 1,
    [pbr::OriginalName("DropStart")] DropStart = 2,
    [pbr::OriginalName("DropEnd")] DropEnd = 3,
  }

  public enum BattleChatType {
    [pbr::OriginalName("BCT_Team")] BctTeam = 0,
    [pbr::OriginalName("BCT_All")] BctAll = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Vector2PB : pb::IMessage<Vector2PB> {
    private static readonly pb::MessageParser<Vector2PB> _parser = new pb::MessageParser<Vector2PB>(() => pb.ProtobufManager.New<Vector2PB>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2PB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2PB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      X = 0;
      Y = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2PB(Vector2PB other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2PB Clone() {
      return new Vector2PB(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2PB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2PB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2PB other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3PB : pb::IMessage<Vector3PB> {
    private static readonly pb::MessageParser<Vector3PB> _parser = new pb::MessageParser<Vector3PB>(() => pb.ProtobufManager.New<Vector3PB>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3PB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3PB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      X = 0;
      Y = 0;
      Z = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3PB(Vector3PB other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3PB Clone() {
      return new Vector3PB(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3PB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3PB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3PB other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector4PB : pb::IMessage<Vector4PB> {
    private static readonly pb::MessageParser<Vector4PB> _parser = new pb::MessageParser<Vector4PB>(() => pb.ProtobufManager.New<Vector4PB>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector4PB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4PB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      W = 0;
      X = 0;
      Y = 0;
      Z = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4PB(Vector4PB other) : this() {
      w_ = other.w_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4PB Clone() {
      return new Vector4PB(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector4PB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector4PB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (W != other.W) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (W != 0F) hash ^= W.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (W != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(W);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (W != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector4PB other) {
      if (other == null) {
        return;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            W = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_PlayerCommand : pb::IMessage<C2B_PlayerCommand> {
    private static readonly pb::MessageParser<C2B_PlayerCommand> _parser = new pb::MessageParser<C2B_PlayerCommand>(() => pb.ProtobufManager.New<C2B_PlayerCommand>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_PlayerCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PlayerCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (CommandDataCase) {
        case CommandDataOneofCase.Move:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Move>(Move);
          Move = null;
          break;
        case CommandDataOneofCase.Rotation:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Rotation>(Rotation);
          Rotation = null;
          break;
        case CommandDataOneofCase.Attack:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Attack>(Attack);
          Attack = null;
          break;
        case CommandDataOneofCase.Pickupitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem>(Pickupitem);
          Pickupitem = null;
          break;
        case CommandDataOneofCase.Dropitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_DropItem>(Dropitem);
          Dropitem = null;
          break;
        case CommandDataOneofCase.Motion:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Motion>(Motion);
          Motion = null;
          break;
        case CommandDataOneofCase.Openbox:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox>(Openbox);
          Openbox = null;
          break;
        case CommandDataOneofCase.Getboxitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem>(Getboxitem);
          Getboxitem = null;
          break;
        case CommandDataOneofCase.Deplane:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_DePlane>(Deplane);
          Deplane = null;
          break;
        case CommandDataOneofCase.Equipboxitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem>(Equipboxitem);
          Equipboxitem = null;
          break;
        case CommandDataOneofCase.Equipbackpackitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem>(Equipbackpackitem);
          Equipbackpackitem = null;
          break;
        case CommandDataOneofCase.Exchangeattach:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach>(Exchangeattach);
          Exchangeattach = null;
          break;
        case CommandDataOneofCase.Reloadbullet:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet>(Reloadbullet);
          Reloadbullet = null;
          break;
        case CommandDataOneofCase.Unequipitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem>(Unequipitem);
          Unequipitem = null;
          break;
        case CommandDataOneofCase.Changeweapon:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon>(Changeweapon);
          Changeweapon = null;
          break;
        case CommandDataOneofCase.Markpoint:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint>(Markpoint);
          Markpoint = null;
          break;
        case CommandDataOneofCase.Useitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_UseItem>(Useitem);
          Useitem = null;
          break;
        case CommandDataOneofCase.Parachute:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Parachute>(Parachute);
          Parachute = null;
          break;
        case CommandDataOneofCase.Killweak:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak>(Killweak);
          Killweak = null;
          break;
        case CommandDataOneofCase.Cureweak:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak>(Cureweak);
          Cureweak = null;
          break;
        case CommandDataOneofCase.Opdoor:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor>(Opdoor);
          Opdoor = null;
          break;
        case CommandDataOneofCase.Opvehicle:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle>(Opvehicle);
          Opvehicle = null;
          break;
        case CommandDataOneofCase.Movevehicle:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle>(Movevehicle);
          Movevehicle = null;
          break;
        case CommandDataOneofCase.Senditemtosharepack:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack>(Senditemtosharepack);
          Senditemtosharepack = null;
          break;
        case CommandDataOneofCase.Senditemfromequipment:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment>(Senditemfromequipment);
          Senditemfromequipment = null;
          break;
        case CommandDataOneofCase.Pickitemfromsharepack:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack>(Pickitemfromsharepack);
          Pickitemfromsharepack = null;
          break;
        case CommandDataOneofCase.Fallground:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_FallGround>(Fallground);
          Fallground = null;
          break;
        case CommandDataOneofCase.Emptyray:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun>(Emptyray);
          Emptyray = null;
          break;
        case CommandDataOneofCase.Aiming:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Aiming>(Aiming);
          Aiming = null;
          break;
        case CommandDataOneofCase.Climbeffect:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect>(Climbeffect);
          Climbeffect = null;
          break;
        case CommandDataOneofCase.Skillstate:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_SkillState>(Skillstate);
          Skillstate = null;
          break;
        case CommandDataOneofCase.Jump:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Jump>(Jump);
          Jump = null;
          break;
        case CommandDataOneofCase.Sight:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo>(Sight);
          Sight = null;
          break;
        case CommandDataOneofCase.Blast:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast>(Blast);
          Blast = null;
          break;
        case CommandDataOneofCase.Forceenterhouse:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse>(Forceenterhouse);
          Forceenterhouse = null;
          break;
        case CommandDataOneofCase.Gamble:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Gamble>(Gamble);
          Gamble = null;
          break;
        case CommandDataOneofCase.Shieldskill:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill>(Shieldskill);
          Shieldskill = null;
          break;
        case CommandDataOneofCase.Warningeffect:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect>(Warningeffect);
          Warningeffect = null;
          break;
        case CommandDataOneofCase.Pickitem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem>(Pickitem);
          Pickitem = null;
          break;
        case CommandDataOneofCase.Exchangecore:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore>(Exchangecore);
          Exchangecore = null;
          break;
        case CommandDataOneofCase.Clicknpc:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc>(Clicknpc);
          Clicknpc = null;
          break;
        case CommandDataOneofCase.Catchnpc:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc>(Catchnpc);
          Catchnpc = null;
          break;
        case CommandDataOneofCase.EquipGroundItem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem>(EquipGroundItem);
          EquipGroundItem = null;
          break;
        case CommandDataOneofCase.Npcgamble:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble>(Npcgamble);
          Npcgamble = null;
          break;
        case CommandDataOneofCase.GetGambleBoxItem:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem>(GetGambleBoxItem);
          GetGambleBoxItem = null;
          break;
        case CommandDataOneofCase.Npcsell:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem>(Npcsell);
          Npcsell = null;
          break;
        case CommandDataOneofCase.Npclvup:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem>(Npclvup);
          Npclvup = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PlayerCommand(C2B_PlayerCommand other) : this() {
      switch (other.CommandDataCase) {
        case CommandDataOneofCase.Move:
          Move = other.Move.Clone();
          break;
        case CommandDataOneofCase.Rotation:
          Rotation = other.Rotation.Clone();
          break;
        case CommandDataOneofCase.Attack:
          Attack = other.Attack.Clone();
          break;
        case CommandDataOneofCase.Pickupitem:
          Pickupitem = other.Pickupitem.Clone();
          break;
        case CommandDataOneofCase.Dropitem:
          Dropitem = other.Dropitem.Clone();
          break;
        case CommandDataOneofCase.Motion:
          Motion = other.Motion.Clone();
          break;
        case CommandDataOneofCase.Openbox:
          Openbox = other.Openbox.Clone();
          break;
        case CommandDataOneofCase.Getboxitem:
          Getboxitem = other.Getboxitem.Clone();
          break;
        case CommandDataOneofCase.Deplane:
          Deplane = other.Deplane.Clone();
          break;
        case CommandDataOneofCase.Equipboxitem:
          Equipboxitem = other.Equipboxitem.Clone();
          break;
        case CommandDataOneofCase.Equipbackpackitem:
          Equipbackpackitem = other.Equipbackpackitem.Clone();
          break;
        case CommandDataOneofCase.Exchangeattach:
          Exchangeattach = other.Exchangeattach.Clone();
          break;
        case CommandDataOneofCase.Reloadbullet:
          Reloadbullet = other.Reloadbullet.Clone();
          break;
        case CommandDataOneofCase.Unequipitem:
          Unequipitem = other.Unequipitem.Clone();
          break;
        case CommandDataOneofCase.Changeweapon:
          Changeweapon = other.Changeweapon.Clone();
          break;
        case CommandDataOneofCase.Markpoint:
          Markpoint = other.Markpoint.Clone();
          break;
        case CommandDataOneofCase.Useitem:
          Useitem = other.Useitem.Clone();
          break;
        case CommandDataOneofCase.Parachute:
          Parachute = other.Parachute.Clone();
          break;
        case CommandDataOneofCase.Killweak:
          Killweak = other.Killweak.Clone();
          break;
        case CommandDataOneofCase.Cureweak:
          Cureweak = other.Cureweak.Clone();
          break;
        case CommandDataOneofCase.Opdoor:
          Opdoor = other.Opdoor.Clone();
          break;
        case CommandDataOneofCase.Opvehicle:
          Opvehicle = other.Opvehicle.Clone();
          break;
        case CommandDataOneofCase.Movevehicle:
          Movevehicle = other.Movevehicle.Clone();
          break;
        case CommandDataOneofCase.Senditemtosharepack:
          Senditemtosharepack = other.Senditemtosharepack.Clone();
          break;
        case CommandDataOneofCase.Senditemfromequipment:
          Senditemfromequipment = other.Senditemfromequipment.Clone();
          break;
        case CommandDataOneofCase.Pickitemfromsharepack:
          Pickitemfromsharepack = other.Pickitemfromsharepack.Clone();
          break;
        case CommandDataOneofCase.Fallground:
          Fallground = other.Fallground.Clone();
          break;
        case CommandDataOneofCase.Emptyray:
          Emptyray = other.Emptyray.Clone();
          break;
        case CommandDataOneofCase.Aiming:
          Aiming = other.Aiming.Clone();
          break;
        case CommandDataOneofCase.Climbeffect:
          Climbeffect = other.Climbeffect.Clone();
          break;
        case CommandDataOneofCase.Skillstate:
          Skillstate = other.Skillstate.Clone();
          break;
        case CommandDataOneofCase.Jump:
          Jump = other.Jump.Clone();
          break;
        case CommandDataOneofCase.Sight:
          Sight = other.Sight.Clone();
          break;
        case CommandDataOneofCase.Blast:
          Blast = other.Blast.Clone();
          break;
        case CommandDataOneofCase.Forceenterhouse:
          Forceenterhouse = other.Forceenterhouse.Clone();
          break;
        case CommandDataOneofCase.Gamble:
          Gamble = other.Gamble.Clone();
          break;
        case CommandDataOneofCase.Shieldskill:
          Shieldskill = other.Shieldskill.Clone();
          break;
        case CommandDataOneofCase.Warningeffect:
          Warningeffect = other.Warningeffect.Clone();
          break;
        case CommandDataOneofCase.Pickitem:
          Pickitem = other.Pickitem.Clone();
          break;
        case CommandDataOneofCase.Exchangecore:
          Exchangecore = other.Exchangecore.Clone();
          break;
        case CommandDataOneofCase.Clicknpc:
          Clicknpc = other.Clicknpc.Clone();
          break;
        case CommandDataOneofCase.Catchnpc:
          Catchnpc = other.Catchnpc.Clone();
          break;
        case CommandDataOneofCase.EquipGroundItem:
          EquipGroundItem = other.EquipGroundItem.Clone();
          break;
        case CommandDataOneofCase.Npcgamble:
          Npcgamble = other.Npcgamble.Clone();
          break;
        case CommandDataOneofCase.GetGambleBoxItem:
          GetGambleBoxItem = other.GetGambleBoxItem.Clone();
          break;
        case CommandDataOneofCase.Npcsell:
          Npcsell = other.Npcsell.Clone();
          break;
        case CommandDataOneofCase.Npclvup:
          Npclvup = other.Npclvup.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PlayerCommand Clone() {
      return new C2B_PlayerCommand(this);
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Move Move {
      get { return commandDataCase_ == CommandDataOneofCase.Move ? (global::Pb.C2B_PlayerCommand.Types.C2B_Move) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Move;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Rotation Rotation {
      get { return commandDataCase_ == CommandDataOneofCase.Rotation ? (global::Pb.C2B_PlayerCommand.Types.C2B_Rotation) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Rotation;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Attack Attack {
      get { return commandDataCase_ == CommandDataOneofCase.Attack ? (global::Pb.C2B_PlayerCommand.Types.C2B_Attack) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Attack;
      }
    }

    /// <summary>Field number for the "pickupitem" field.</summary>
    public const int PickupitemFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem Pickupitem {
      get { return commandDataCase_ == CommandDataOneofCase.Pickupitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Pickupitem;
      }
    }

    /// <summary>Field number for the "dropitem" field.</summary>
    public const int DropitemFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_DropItem Dropitem {
      get { return commandDataCase_ == CommandDataOneofCase.Dropitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_DropItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Dropitem;
      }
    }

    /// <summary>Field number for the "motion" field.</summary>
    public const int MotionFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Motion Motion {
      get { return commandDataCase_ == CommandDataOneofCase.Motion ? (global::Pb.C2B_PlayerCommand.Types.C2B_Motion) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Motion;
      }
    }

    /// <summary>Field number for the "openbox" field.</summary>
    public const int OpenboxFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox Openbox {
      get { return commandDataCase_ == CommandDataOneofCase.Openbox ? (global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Openbox;
      }
    }

    /// <summary>Field number for the "getboxitem" field.</summary>
    public const int GetboxitemFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem Getboxitem {
      get { return commandDataCase_ == CommandDataOneofCase.Getboxitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Getboxitem;
      }
    }

    /// <summary>Field number for the "deplane" field.</summary>
    public const int DeplaneFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_DePlane Deplane {
      get { return commandDataCase_ == CommandDataOneofCase.Deplane ? (global::Pb.C2B_PlayerCommand.Types.C2B_DePlane) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Deplane;
      }
    }

    /// <summary>Field number for the "equipboxitem" field.</summary>
    public const int EquipboxitemFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem Equipboxitem {
      get { return commandDataCase_ == CommandDataOneofCase.Equipboxitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Equipboxitem;
      }
    }

    /// <summary>Field number for the "equipbackpackitem" field.</summary>
    public const int EquipbackpackitemFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem Equipbackpackitem {
      get { return commandDataCase_ == CommandDataOneofCase.Equipbackpackitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Equipbackpackitem;
      }
    }

    /// <summary>Field number for the "exchangeattach" field.</summary>
    public const int ExchangeattachFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach Exchangeattach {
      get { return commandDataCase_ == CommandDataOneofCase.Exchangeattach ? (global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Exchangeattach;
      }
    }

    /// <summary>Field number for the "reloadbullet" field.</summary>
    public const int ReloadbulletFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet Reloadbullet {
      get { return commandDataCase_ == CommandDataOneofCase.Reloadbullet ? (global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Reloadbullet;
      }
    }

    /// <summary>Field number for the "unequipitem" field.</summary>
    public const int UnequipitemFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem Unequipitem {
      get { return commandDataCase_ == CommandDataOneofCase.Unequipitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Unequipitem;
      }
    }

    /// <summary>Field number for the "changeweapon" field.</summary>
    public const int ChangeweaponFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon Changeweapon {
      get { return commandDataCase_ == CommandDataOneofCase.Changeweapon ? (global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Changeweapon;
      }
    }

    /// <summary>Field number for the "markpoint" field.</summary>
    public const int MarkpointFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint Markpoint {
      get { return commandDataCase_ == CommandDataOneofCase.Markpoint ? (global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Markpoint;
      }
    }

    /// <summary>Field number for the "useitem" field.</summary>
    public const int UseitemFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_UseItem Useitem {
      get { return commandDataCase_ == CommandDataOneofCase.Useitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_UseItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Useitem;
      }
    }

    /// <summary>Field number for the "parachute" field.</summary>
    public const int ParachuteFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Parachute Parachute {
      get { return commandDataCase_ == CommandDataOneofCase.Parachute ? (global::Pb.C2B_PlayerCommand.Types.C2B_Parachute) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Parachute;
      }
    }

    /// <summary>Field number for the "killweak" field.</summary>
    public const int KillweakFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak Killweak {
      get { return commandDataCase_ == CommandDataOneofCase.Killweak ? (global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Killweak;
      }
    }

    /// <summary>Field number for the "cureweak" field.</summary>
    public const int CureweakFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak Cureweak {
      get { return commandDataCase_ == CommandDataOneofCase.Cureweak ? (global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Cureweak;
      }
    }

    /// <summary>Field number for the "opdoor" field.</summary>
    public const int OpdoorFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor Opdoor {
      get { return commandDataCase_ == CommandDataOneofCase.Opdoor ? (global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Opdoor;
      }
    }

    /// <summary>Field number for the "opvehicle" field.</summary>
    public const int OpvehicleFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle Opvehicle {
      get { return commandDataCase_ == CommandDataOneofCase.Opvehicle ? (global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Opvehicle;
      }
    }

    /// <summary>Field number for the "movevehicle" field.</summary>
    public const int MovevehicleFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle Movevehicle {
      get { return commandDataCase_ == CommandDataOneofCase.Movevehicle ? (global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Movevehicle;
      }
    }

    /// <summary>Field number for the "senditemtosharepack" field.</summary>
    public const int SenditemtosharepackFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack Senditemtosharepack {
      get { return commandDataCase_ == CommandDataOneofCase.Senditemtosharepack ? (global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Senditemtosharepack;
      }
    }

    /// <summary>Field number for the "senditemfromequipment" field.</summary>
    public const int SenditemfromequipmentFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment Senditemfromequipment {
      get { return commandDataCase_ == CommandDataOneofCase.Senditemfromequipment ? (global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Senditemfromequipment;
      }
    }

    /// <summary>Field number for the "pickitemfromsharepack" field.</summary>
    public const int PickitemfromsharepackFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack Pickitemfromsharepack {
      get { return commandDataCase_ == CommandDataOneofCase.Pickitemfromsharepack ? (global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Pickitemfromsharepack;
      }
    }

    /// <summary>Field number for the "fallground" field.</summary>
    public const int FallgroundFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_FallGround Fallground {
      get { return commandDataCase_ == CommandDataOneofCase.Fallground ? (global::Pb.C2B_PlayerCommand.Types.C2B_FallGround) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Fallground;
      }
    }

    /// <summary>Field number for the "emptyray" field.</summary>
    public const int EmptyrayFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun Emptyray {
      get { return commandDataCase_ == CommandDataOneofCase.Emptyray ? (global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Emptyray;
      }
    }

    /// <summary>Field number for the "aiming" field.</summary>
    public const int AimingFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Aiming Aiming {
      get { return commandDataCase_ == CommandDataOneofCase.Aiming ? (global::Pb.C2B_PlayerCommand.Types.C2B_Aiming) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Aiming;
      }
    }

    /// <summary>Field number for the "climbeffect" field.</summary>
    public const int ClimbeffectFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect Climbeffect {
      get { return commandDataCase_ == CommandDataOneofCase.Climbeffect ? (global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Climbeffect;
      }
    }

    /// <summary>Field number for the "skillstate" field.</summary>
    public const int SkillstateFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_SkillState Skillstate {
      get { return commandDataCase_ == CommandDataOneofCase.Skillstate ? (global::Pb.C2B_PlayerCommand.Types.C2B_SkillState) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Skillstate;
      }
    }

    /// <summary>Field number for the "jump" field.</summary>
    public const int JumpFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Jump Jump {
      get { return commandDataCase_ == CommandDataOneofCase.Jump ? (global::Pb.C2B_PlayerCommand.Types.C2B_Jump) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Jump;
      }
    }

    /// <summary>Field number for the "sight" field.</summary>
    public const int SightFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo Sight {
      get { return commandDataCase_ == CommandDataOneofCase.Sight ? (global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Sight;
      }
    }

    /// <summary>Field number for the "blast" field.</summary>
    public const int BlastFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast Blast {
      get { return commandDataCase_ == CommandDataOneofCase.Blast ? (global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Blast;
      }
    }

    /// <summary>Field number for the "forceenterhouse" field.</summary>
    public const int ForceenterhouseFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse Forceenterhouse {
      get { return commandDataCase_ == CommandDataOneofCase.Forceenterhouse ? (global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Forceenterhouse;
      }
    }

    /// <summary>Field number for the "gamble" field.</summary>
    public const int GambleFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_Gamble Gamble {
      get { return commandDataCase_ == CommandDataOneofCase.Gamble ? (global::Pb.C2B_PlayerCommand.Types.C2B_Gamble) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Gamble;
      }
    }

    /// <summary>Field number for the "shieldskill" field.</summary>
    public const int ShieldskillFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill Shieldskill {
      get { return commandDataCase_ == CommandDataOneofCase.Shieldskill ? (global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Shieldskill;
      }
    }

    /// <summary>Field number for the "warningeffect" field.</summary>
    public const int WarningeffectFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect Warningeffect {
      get { return commandDataCase_ == CommandDataOneofCase.Warningeffect ? (global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Warningeffect;
      }
    }

    /// <summary>Field number for the "pickitem" field.</summary>
    public const int PickitemFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem Pickitem {
      get { return commandDataCase_ == CommandDataOneofCase.Pickitem ? (global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Pickitem;
      }
    }

    /// <summary>Field number for the "exchangecore" field.</summary>
    public const int ExchangecoreFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore Exchangecore {
      get { return commandDataCase_ == CommandDataOneofCase.Exchangecore ? (global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Exchangecore;
      }
    }

    /// <summary>Field number for the "clicknpc" field.</summary>
    public const int ClicknpcFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc Clicknpc {
      get { return commandDataCase_ == CommandDataOneofCase.Clicknpc ? (global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Clicknpc;
      }
    }

    /// <summary>Field number for the "catchnpc" field.</summary>
    public const int CatchnpcFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc Catchnpc {
      get { return commandDataCase_ == CommandDataOneofCase.Catchnpc ? (global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Catchnpc;
      }
    }

    /// <summary>Field number for the "equipGroundItem" field.</summary>
    public const int EquipGroundItemFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem EquipGroundItem {
      get { return commandDataCase_ == CommandDataOneofCase.EquipGroundItem ? (global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.EquipGroundItem;
      }
    }

    /// <summary>Field number for the "npcgamble" field.</summary>
    public const int NpcgambleFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble Npcgamble {
      get { return commandDataCase_ == CommandDataOneofCase.Npcgamble ? (global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Npcgamble;
      }
    }

    /// <summary>Field number for the "getGambleBoxItem" field.</summary>
    public const int GetGambleBoxItemFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem GetGambleBoxItem {
      get { return commandDataCase_ == CommandDataOneofCase.GetGambleBoxItem ? (global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.GetGambleBoxItem;
      }
    }

    /// <summary>Field number for the "npcsell" field.</summary>
    public const int NpcsellFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem Npcsell {
      get { return commandDataCase_ == CommandDataOneofCase.Npcsell ? (global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Npcsell;
      }
    }

    /// <summary>Field number for the "npclvup" field.</summary>
    public const int NpclvupFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem Npclvup {
      get { return commandDataCase_ == CommandDataOneofCase.Npclvup ? (global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem) commandData_ : null; }
      set {
        commandData_ = value;
        commandDataCase_ = value == null ? CommandDataOneofCase.None : CommandDataOneofCase.Npclvup;
      }
    }

    private object commandData_;
    /// <summary>Enum of possible cases for the "CommandData" oneof.</summary>
    public enum CommandDataOneofCase {
      None = 0,
      Move = 1,
      Rotation = 2,
      Attack = 3,
      Pickupitem = 4,
      Dropitem = 5,
      Motion = 6,
      Openbox = 7,
      Getboxitem = 8,
      Deplane = 9,
      Equipboxitem = 10,
      Equipbackpackitem = 11,
      Exchangeattach = 12,
      Reloadbullet = 13,
      Unequipitem = 14,
      Changeweapon = 15,
      Markpoint = 16,
      Useitem = 17,
      Parachute = 18,
      Killweak = 19,
      Cureweak = 20,
      Opdoor = 21,
      Opvehicle = 22,
      Movevehicle = 23,
      Senditemtosharepack = 24,
      Senditemfromequipment = 25,
      Pickitemfromsharepack = 26,
      Fallground = 27,
      Emptyray = 28,
      Aiming = 29,
      Climbeffect = 30,
      Skillstate = 31,
      Jump = 32,
      Sight = 33,
      Blast = 34,
      Forceenterhouse = 35,
      Gamble = 36,
      Shieldskill = 37,
      Warningeffect = 38,
      Pickitem = 39,
      Exchangecore = 40,
      Clicknpc = 41,
      Catchnpc = 42,
      EquipGroundItem = 43,
      Npcgamble = 44,
      GetGambleBoxItem = 45,
      Npcsell = 46,
      Npclvup = 47,
    }
    private CommandDataOneofCase commandDataCase_ = CommandDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandDataOneofCase CommandDataCase {
      get { return commandDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommandData() {
      commandDataCase_ = CommandDataOneofCase.None;
      commandData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_PlayerCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_PlayerCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Attack, other.Attack)) return false;
      if (!object.Equals(Pickupitem, other.Pickupitem)) return false;
      if (!object.Equals(Dropitem, other.Dropitem)) return false;
      if (!object.Equals(Motion, other.Motion)) return false;
      if (!object.Equals(Openbox, other.Openbox)) return false;
      if (!object.Equals(Getboxitem, other.Getboxitem)) return false;
      if (!object.Equals(Deplane, other.Deplane)) return false;
      if (!object.Equals(Equipboxitem, other.Equipboxitem)) return false;
      if (!object.Equals(Equipbackpackitem, other.Equipbackpackitem)) return false;
      if (!object.Equals(Exchangeattach, other.Exchangeattach)) return false;
      if (!object.Equals(Reloadbullet, other.Reloadbullet)) return false;
      if (!object.Equals(Unequipitem, other.Unequipitem)) return false;
      if (!object.Equals(Changeweapon, other.Changeweapon)) return false;
      if (!object.Equals(Markpoint, other.Markpoint)) return false;
      if (!object.Equals(Useitem, other.Useitem)) return false;
      if (!object.Equals(Parachute, other.Parachute)) return false;
      if (!object.Equals(Killweak, other.Killweak)) return false;
      if (!object.Equals(Cureweak, other.Cureweak)) return false;
      if (!object.Equals(Opdoor, other.Opdoor)) return false;
      if (!object.Equals(Opvehicle, other.Opvehicle)) return false;
      if (!object.Equals(Movevehicle, other.Movevehicle)) return false;
      if (!object.Equals(Senditemtosharepack, other.Senditemtosharepack)) return false;
      if (!object.Equals(Senditemfromequipment, other.Senditemfromequipment)) return false;
      if (!object.Equals(Pickitemfromsharepack, other.Pickitemfromsharepack)) return false;
      if (!object.Equals(Fallground, other.Fallground)) return false;
      if (!object.Equals(Emptyray, other.Emptyray)) return false;
      if (!object.Equals(Aiming, other.Aiming)) return false;
      if (!object.Equals(Climbeffect, other.Climbeffect)) return false;
      if (!object.Equals(Skillstate, other.Skillstate)) return false;
      if (!object.Equals(Jump, other.Jump)) return false;
      if (!object.Equals(Sight, other.Sight)) return false;
      if (!object.Equals(Blast, other.Blast)) return false;
      if (!object.Equals(Forceenterhouse, other.Forceenterhouse)) return false;
      if (!object.Equals(Gamble, other.Gamble)) return false;
      if (!object.Equals(Shieldskill, other.Shieldskill)) return false;
      if (!object.Equals(Warningeffect, other.Warningeffect)) return false;
      if (!object.Equals(Pickitem, other.Pickitem)) return false;
      if (!object.Equals(Exchangecore, other.Exchangecore)) return false;
      if (!object.Equals(Clicknpc, other.Clicknpc)) return false;
      if (!object.Equals(Catchnpc, other.Catchnpc)) return false;
      if (!object.Equals(EquipGroundItem, other.EquipGroundItem)) return false;
      if (!object.Equals(Npcgamble, other.Npcgamble)) return false;
      if (!object.Equals(GetGambleBoxItem, other.GetGambleBoxItem)) return false;
      if (!object.Equals(Npcsell, other.Npcsell)) return false;
      if (!object.Equals(Npclvup, other.Npclvup)) return false;
      if (CommandDataCase != other.CommandDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandDataCase_ == CommandDataOneofCase.Move) hash ^= Move.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Rotation) hash ^= Rotation.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Attack) hash ^= Attack.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Pickupitem) hash ^= Pickupitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Dropitem) hash ^= Dropitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Motion) hash ^= Motion.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Openbox) hash ^= Openbox.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Getboxitem) hash ^= Getboxitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Deplane) hash ^= Deplane.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Equipboxitem) hash ^= Equipboxitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Equipbackpackitem) hash ^= Equipbackpackitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Exchangeattach) hash ^= Exchangeattach.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Reloadbullet) hash ^= Reloadbullet.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Unequipitem) hash ^= Unequipitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Changeweapon) hash ^= Changeweapon.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Markpoint) hash ^= Markpoint.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Useitem) hash ^= Useitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Parachute) hash ^= Parachute.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Killweak) hash ^= Killweak.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Cureweak) hash ^= Cureweak.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Opdoor) hash ^= Opdoor.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Opvehicle) hash ^= Opvehicle.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Movevehicle) hash ^= Movevehicle.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Senditemtosharepack) hash ^= Senditemtosharepack.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Senditemfromequipment) hash ^= Senditemfromequipment.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Pickitemfromsharepack) hash ^= Pickitemfromsharepack.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Fallground) hash ^= Fallground.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Emptyray) hash ^= Emptyray.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Aiming) hash ^= Aiming.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Climbeffect) hash ^= Climbeffect.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Skillstate) hash ^= Skillstate.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Jump) hash ^= Jump.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Sight) hash ^= Sight.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Blast) hash ^= Blast.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Forceenterhouse) hash ^= Forceenterhouse.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Gamble) hash ^= Gamble.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Shieldskill) hash ^= Shieldskill.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Warningeffect) hash ^= Warningeffect.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Pickitem) hash ^= Pickitem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Exchangecore) hash ^= Exchangecore.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Clicknpc) hash ^= Clicknpc.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Catchnpc) hash ^= Catchnpc.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.EquipGroundItem) hash ^= EquipGroundItem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Npcgamble) hash ^= Npcgamble.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.GetGambleBoxItem) hash ^= GetGambleBoxItem.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Npcsell) hash ^= Npcsell.GetHashCode();
      if (commandDataCase_ == CommandDataOneofCase.Npclvup) hash ^= Npclvup.GetHashCode();
      hash ^= (int) commandDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandDataCase_ == CommandDataOneofCase.Move) {
        output.WriteRawTag(10);
        output.WriteMessage(Move);
      }
      if (commandDataCase_ == CommandDataOneofCase.Rotation) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (commandDataCase_ == CommandDataOneofCase.Attack) {
        output.WriteRawTag(26);
        output.WriteMessage(Attack);
      }
      if (commandDataCase_ == CommandDataOneofCase.Pickupitem) {
        output.WriteRawTag(34);
        output.WriteMessage(Pickupitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Dropitem) {
        output.WriteRawTag(42);
        output.WriteMessage(Dropitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Motion) {
        output.WriteRawTag(50);
        output.WriteMessage(Motion);
      }
      if (commandDataCase_ == CommandDataOneofCase.Openbox) {
        output.WriteRawTag(58);
        output.WriteMessage(Openbox);
      }
      if (commandDataCase_ == CommandDataOneofCase.Getboxitem) {
        output.WriteRawTag(66);
        output.WriteMessage(Getboxitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Deplane) {
        output.WriteRawTag(74);
        output.WriteMessage(Deplane);
      }
      if (commandDataCase_ == CommandDataOneofCase.Equipboxitem) {
        output.WriteRawTag(82);
        output.WriteMessage(Equipboxitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Equipbackpackitem) {
        output.WriteRawTag(90);
        output.WriteMessage(Equipbackpackitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Exchangeattach) {
        output.WriteRawTag(98);
        output.WriteMessage(Exchangeattach);
      }
      if (commandDataCase_ == CommandDataOneofCase.Reloadbullet) {
        output.WriteRawTag(106);
        output.WriteMessage(Reloadbullet);
      }
      if (commandDataCase_ == CommandDataOneofCase.Unequipitem) {
        output.WriteRawTag(114);
        output.WriteMessage(Unequipitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Changeweapon) {
        output.WriteRawTag(122);
        output.WriteMessage(Changeweapon);
      }
      if (commandDataCase_ == CommandDataOneofCase.Markpoint) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Markpoint);
      }
      if (commandDataCase_ == CommandDataOneofCase.Useitem) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Useitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Parachute) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Parachute);
      }
      if (commandDataCase_ == CommandDataOneofCase.Killweak) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Killweak);
      }
      if (commandDataCase_ == CommandDataOneofCase.Cureweak) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Cureweak);
      }
      if (commandDataCase_ == CommandDataOneofCase.Opdoor) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Opdoor);
      }
      if (commandDataCase_ == CommandDataOneofCase.Opvehicle) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Opvehicle);
      }
      if (commandDataCase_ == CommandDataOneofCase.Movevehicle) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Movevehicle);
      }
      if (commandDataCase_ == CommandDataOneofCase.Senditemtosharepack) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Senditemtosharepack);
      }
      if (commandDataCase_ == CommandDataOneofCase.Senditemfromequipment) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Senditemfromequipment);
      }
      if (commandDataCase_ == CommandDataOneofCase.Pickitemfromsharepack) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Pickitemfromsharepack);
      }
      if (commandDataCase_ == CommandDataOneofCase.Fallground) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Fallground);
      }
      if (commandDataCase_ == CommandDataOneofCase.Emptyray) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Emptyray);
      }
      if (commandDataCase_ == CommandDataOneofCase.Aiming) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Aiming);
      }
      if (commandDataCase_ == CommandDataOneofCase.Climbeffect) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Climbeffect);
      }
      if (commandDataCase_ == CommandDataOneofCase.Skillstate) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Skillstate);
      }
      if (commandDataCase_ == CommandDataOneofCase.Jump) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Jump);
      }
      if (commandDataCase_ == CommandDataOneofCase.Sight) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Sight);
      }
      if (commandDataCase_ == CommandDataOneofCase.Blast) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Blast);
      }
      if (commandDataCase_ == CommandDataOneofCase.Forceenterhouse) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(Forceenterhouse);
      }
      if (commandDataCase_ == CommandDataOneofCase.Gamble) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Gamble);
      }
      if (commandDataCase_ == CommandDataOneofCase.Shieldskill) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Shieldskill);
      }
      if (commandDataCase_ == CommandDataOneofCase.Warningeffect) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Warningeffect);
      }
      if (commandDataCase_ == CommandDataOneofCase.Pickitem) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Pickitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Exchangecore) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Exchangecore);
      }
      if (commandDataCase_ == CommandDataOneofCase.Clicknpc) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Clicknpc);
      }
      if (commandDataCase_ == CommandDataOneofCase.Catchnpc) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Catchnpc);
      }
      if (commandDataCase_ == CommandDataOneofCase.EquipGroundItem) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(EquipGroundItem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Npcgamble) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Npcgamble);
      }
      if (commandDataCase_ == CommandDataOneofCase.GetGambleBoxItem) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(GetGambleBoxItem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Npcsell) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(Npcsell);
      }
      if (commandDataCase_ == CommandDataOneofCase.Npclvup) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(Npclvup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandDataCase_ == CommandDataOneofCase.Move) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (commandDataCase_ == CommandDataOneofCase.Rotation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (commandDataCase_ == CommandDataOneofCase.Attack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attack);
      }
      if (commandDataCase_ == CommandDataOneofCase.Pickupitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pickupitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Dropitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dropitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Motion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Motion);
      }
      if (commandDataCase_ == CommandDataOneofCase.Openbox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Openbox);
      }
      if (commandDataCase_ == CommandDataOneofCase.Getboxitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Getboxitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Deplane) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deplane);
      }
      if (commandDataCase_ == CommandDataOneofCase.Equipboxitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipboxitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Equipbackpackitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipbackpackitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Exchangeattach) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exchangeattach);
      }
      if (commandDataCase_ == CommandDataOneofCase.Reloadbullet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reloadbullet);
      }
      if (commandDataCase_ == CommandDataOneofCase.Unequipitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unequipitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Changeweapon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Changeweapon);
      }
      if (commandDataCase_ == CommandDataOneofCase.Markpoint) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Markpoint);
      }
      if (commandDataCase_ == CommandDataOneofCase.Useitem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Useitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Parachute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parachute);
      }
      if (commandDataCase_ == CommandDataOneofCase.Killweak) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Killweak);
      }
      if (commandDataCase_ == CommandDataOneofCase.Cureweak) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cureweak);
      }
      if (commandDataCase_ == CommandDataOneofCase.Opdoor) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Opdoor);
      }
      if (commandDataCase_ == CommandDataOneofCase.Opvehicle) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Opvehicle);
      }
      if (commandDataCase_ == CommandDataOneofCase.Movevehicle) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Movevehicle);
      }
      if (commandDataCase_ == CommandDataOneofCase.Senditemtosharepack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Senditemtosharepack);
      }
      if (commandDataCase_ == CommandDataOneofCase.Senditemfromequipment) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Senditemfromequipment);
      }
      if (commandDataCase_ == CommandDataOneofCase.Pickitemfromsharepack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pickitemfromsharepack);
      }
      if (commandDataCase_ == CommandDataOneofCase.Fallground) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fallground);
      }
      if (commandDataCase_ == CommandDataOneofCase.Emptyray) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Emptyray);
      }
      if (commandDataCase_ == CommandDataOneofCase.Aiming) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Aiming);
      }
      if (commandDataCase_ == CommandDataOneofCase.Climbeffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Climbeffect);
      }
      if (commandDataCase_ == CommandDataOneofCase.Skillstate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Skillstate);
      }
      if (commandDataCase_ == CommandDataOneofCase.Jump) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Jump);
      }
      if (commandDataCase_ == CommandDataOneofCase.Sight) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Sight);
      }
      if (commandDataCase_ == CommandDataOneofCase.Blast) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Blast);
      }
      if (commandDataCase_ == CommandDataOneofCase.Forceenterhouse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Forceenterhouse);
      }
      if (commandDataCase_ == CommandDataOneofCase.Gamble) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gamble);
      }
      if (commandDataCase_ == CommandDataOneofCase.Shieldskill) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Shieldskill);
      }
      if (commandDataCase_ == CommandDataOneofCase.Warningeffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Warningeffect);
      }
      if (commandDataCase_ == CommandDataOneofCase.Pickitem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pickitem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Exchangecore) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Exchangecore);
      }
      if (commandDataCase_ == CommandDataOneofCase.Clicknpc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Clicknpc);
      }
      if (commandDataCase_ == CommandDataOneofCase.Catchnpc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Catchnpc);
      }
      if (commandDataCase_ == CommandDataOneofCase.EquipGroundItem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EquipGroundItem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Npcgamble) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Npcgamble);
      }
      if (commandDataCase_ == CommandDataOneofCase.GetGambleBoxItem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetGambleBoxItem);
      }
      if (commandDataCase_ == CommandDataOneofCase.Npcsell) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Npcsell);
      }
      if (commandDataCase_ == CommandDataOneofCase.Npclvup) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Npclvup);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_PlayerCommand other) {
      if (other == null) {
        return;
      }
      switch (other.CommandDataCase) {
        case CommandDataOneofCase.Move:
          Move = other.Move;
          break;
        case CommandDataOneofCase.Rotation:
          Rotation = other.Rotation;
          break;
        case CommandDataOneofCase.Attack:
          Attack = other.Attack;
          break;
        case CommandDataOneofCase.Pickupitem:
          Pickupitem = other.Pickupitem;
          break;
        case CommandDataOneofCase.Dropitem:
          Dropitem = other.Dropitem;
          break;
        case CommandDataOneofCase.Motion:
          Motion = other.Motion;
          break;
        case CommandDataOneofCase.Openbox:
          Openbox = other.Openbox;
          break;
        case CommandDataOneofCase.Getboxitem:
          Getboxitem = other.Getboxitem;
          break;
        case CommandDataOneofCase.Deplane:
          Deplane = other.Deplane;
          break;
        case CommandDataOneofCase.Equipboxitem:
          Equipboxitem = other.Equipboxitem;
          break;
        case CommandDataOneofCase.Equipbackpackitem:
          Equipbackpackitem = other.Equipbackpackitem;
          break;
        case CommandDataOneofCase.Exchangeattach:
          Exchangeattach = other.Exchangeattach;
          break;
        case CommandDataOneofCase.Reloadbullet:
          Reloadbullet = other.Reloadbullet;
          break;
        case CommandDataOneofCase.Unequipitem:
          Unequipitem = other.Unequipitem;
          break;
        case CommandDataOneofCase.Changeweapon:
          Changeweapon = other.Changeweapon;
          break;
        case CommandDataOneofCase.Markpoint:
          Markpoint = other.Markpoint;
          break;
        case CommandDataOneofCase.Useitem:
          Useitem = other.Useitem;
          break;
        case CommandDataOneofCase.Parachute:
          Parachute = other.Parachute;
          break;
        case CommandDataOneofCase.Killweak:
          Killweak = other.Killweak;
          break;
        case CommandDataOneofCase.Cureweak:
          Cureweak = other.Cureweak;
          break;
        case CommandDataOneofCase.Opdoor:
          Opdoor = other.Opdoor;
          break;
        case CommandDataOneofCase.Opvehicle:
          Opvehicle = other.Opvehicle;
          break;
        case CommandDataOneofCase.Movevehicle:
          Movevehicle = other.Movevehicle;
          break;
        case CommandDataOneofCase.Senditemtosharepack:
          Senditemtosharepack = other.Senditemtosharepack;
          break;
        case CommandDataOneofCase.Senditemfromequipment:
          Senditemfromequipment = other.Senditemfromequipment;
          break;
        case CommandDataOneofCase.Pickitemfromsharepack:
          Pickitemfromsharepack = other.Pickitemfromsharepack;
          break;
        case CommandDataOneofCase.Fallground:
          Fallground = other.Fallground;
          break;
        case CommandDataOneofCase.Emptyray:
          Emptyray = other.Emptyray;
          break;
        case CommandDataOneofCase.Aiming:
          Aiming = other.Aiming;
          break;
        case CommandDataOneofCase.Climbeffect:
          Climbeffect = other.Climbeffect;
          break;
        case CommandDataOneofCase.Skillstate:
          Skillstate = other.Skillstate;
          break;
        case CommandDataOneofCase.Jump:
          Jump = other.Jump;
          break;
        case CommandDataOneofCase.Sight:
          Sight = other.Sight;
          break;
        case CommandDataOneofCase.Blast:
          Blast = other.Blast;
          break;
        case CommandDataOneofCase.Forceenterhouse:
          Forceenterhouse = other.Forceenterhouse;
          break;
        case CommandDataOneofCase.Gamble:
          Gamble = other.Gamble;
          break;
        case CommandDataOneofCase.Shieldskill:
          Shieldskill = other.Shieldskill;
          break;
        case CommandDataOneofCase.Warningeffect:
          Warningeffect = other.Warningeffect;
          break;
        case CommandDataOneofCase.Pickitem:
          Pickitem = other.Pickitem;
          break;
        case CommandDataOneofCase.Exchangecore:
          Exchangecore = other.Exchangecore;
          break;
        case CommandDataOneofCase.Clicknpc:
          Clicknpc = other.Clicknpc;
          break;
        case CommandDataOneofCase.Catchnpc:
          Catchnpc = other.Catchnpc;
          break;
        case CommandDataOneofCase.EquipGroundItem:
          EquipGroundItem = other.EquipGroundItem;
          break;
        case CommandDataOneofCase.Npcgamble:
          Npcgamble = other.Npcgamble;
          break;
        case CommandDataOneofCase.GetGambleBoxItem:
          GetGambleBoxItem = other.GetGambleBoxItem;
          break;
        case CommandDataOneofCase.Npcsell:
          Npcsell = other.Npcsell;
          break;
        case CommandDataOneofCase.Npclvup:
          Npclvup = other.Npclvup;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Move subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Move>();
            if (commandDataCase_ == CommandDataOneofCase.Move) {
              subBuilder.MergeFrom(Move);
            }
            input.ReadMessage(subBuilder);
            Move = subBuilder;
            break;
          }
          case 18: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Rotation subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Rotation>();
            if (commandDataCase_ == CommandDataOneofCase.Rotation) {
              subBuilder.MergeFrom(Rotation);
            }
            input.ReadMessage(subBuilder);
            Rotation = subBuilder;
            break;
          }
          case 26: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Attack subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Attack>();
            if (commandDataCase_ == CommandDataOneofCase.Attack) {
              subBuilder.MergeFrom(Attack);
            }
            input.ReadMessage(subBuilder);
            Attack = subBuilder;
            break;
          }
          case 34: {
            global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_PickUpItem>();
            if (commandDataCase_ == CommandDataOneofCase.Pickupitem) {
              subBuilder.MergeFrom(Pickupitem);
            }
            input.ReadMessage(subBuilder);
            Pickupitem = subBuilder;
            break;
          }
          case 42: {
            global::Pb.C2B_PlayerCommand.Types.C2B_DropItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_DropItem>();
            if (commandDataCase_ == CommandDataOneofCase.Dropitem) {
              subBuilder.MergeFrom(Dropitem);
            }
            input.ReadMessage(subBuilder);
            Dropitem = subBuilder;
            break;
          }
          case 50: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Motion subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Motion>();
            if (commandDataCase_ == CommandDataOneofCase.Motion) {
              subBuilder.MergeFrom(Motion);
            }
            input.ReadMessage(subBuilder);
            Motion = subBuilder;
            break;
          }
          case 58: {
            global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_OpenBox>();
            if (commandDataCase_ == CommandDataOneofCase.Openbox) {
              subBuilder.MergeFrom(Openbox);
            }
            input.ReadMessage(subBuilder);
            Openbox = subBuilder;
            break;
          }
          case 66: {
            global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_GetBoxItem>();
            if (commandDataCase_ == CommandDataOneofCase.Getboxitem) {
              subBuilder.MergeFrom(Getboxitem);
            }
            input.ReadMessage(subBuilder);
            Getboxitem = subBuilder;
            break;
          }
          case 74: {
            global::Pb.C2B_PlayerCommand.Types.C2B_DePlane subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_DePlane>();
            if (commandDataCase_ == CommandDataOneofCase.Deplane) {
              subBuilder.MergeFrom(Deplane);
            }
            input.ReadMessage(subBuilder);
            Deplane = subBuilder;
            break;
          }
          case 82: {
            global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_EquipBoxItem>();
            if (commandDataCase_ == CommandDataOneofCase.Equipboxitem) {
              subBuilder.MergeFrom(Equipboxitem);
            }
            input.ReadMessage(subBuilder);
            Equipboxitem = subBuilder;
            break;
          }
          case 90: {
            global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_EquipBackpackItem>();
            if (commandDataCase_ == CommandDataOneofCase.Equipbackpackitem) {
              subBuilder.MergeFrom(Equipbackpackitem);
            }
            input.ReadMessage(subBuilder);
            Equipbackpackitem = subBuilder;
            break;
          }
          case 98: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ExChangeAttach>();
            if (commandDataCase_ == CommandDataOneofCase.Exchangeattach) {
              subBuilder.MergeFrom(Exchangeattach);
            }
            input.ReadMessage(subBuilder);
            Exchangeattach = subBuilder;
            break;
          }
          case 106: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ReloadBullet>();
            if (commandDataCase_ == CommandDataOneofCase.Reloadbullet) {
              subBuilder.MergeFrom(Reloadbullet);
            }
            input.ReadMessage(subBuilder);
            Reloadbullet = subBuilder;
            break;
          }
          case 114: {
            global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_UnEquipItem>();
            if (commandDataCase_ == CommandDataOneofCase.Unequipitem) {
              subBuilder.MergeFrom(Unequipitem);
            }
            input.ReadMessage(subBuilder);
            Unequipitem = subBuilder;
            break;
          }
          case 122: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ChangeWeapon>();
            if (commandDataCase_ == CommandDataOneofCase.Changeweapon) {
              subBuilder.MergeFrom(Changeweapon);
            }
            input.ReadMessage(subBuilder);
            Changeweapon = subBuilder;
            break;
          }
          case 130: {
            global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_MarkPoint>();
            if (commandDataCase_ == CommandDataOneofCase.Markpoint) {
              subBuilder.MergeFrom(Markpoint);
            }
            input.ReadMessage(subBuilder);
            Markpoint = subBuilder;
            break;
          }
          case 138: {
            global::Pb.C2B_PlayerCommand.Types.C2B_UseItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_UseItem>();
            if (commandDataCase_ == CommandDataOneofCase.Useitem) {
              subBuilder.MergeFrom(Useitem);
            }
            input.ReadMessage(subBuilder);
            Useitem = subBuilder;
            break;
          }
          case 146: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Parachute subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Parachute>();
            if (commandDataCase_ == CommandDataOneofCase.Parachute) {
              subBuilder.MergeFrom(Parachute);
            }
            input.ReadMessage(subBuilder);
            Parachute = subBuilder;
            break;
          }
          case 154: {
            global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_KillWeak>();
            if (commandDataCase_ == CommandDataOneofCase.Killweak) {
              subBuilder.MergeFrom(Killweak);
            }
            input.ReadMessage(subBuilder);
            Killweak = subBuilder;
            break;
          }
          case 162: {
            global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_CureWeak>();
            if (commandDataCase_ == CommandDataOneofCase.Cureweak) {
              subBuilder.MergeFrom(Cureweak);
            }
            input.ReadMessage(subBuilder);
            Cureweak = subBuilder;
            break;
          }
          case 170: {
            global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_OperateDoor>();
            if (commandDataCase_ == CommandDataOneofCase.Opdoor) {
              subBuilder.MergeFrom(Opdoor);
            }
            input.ReadMessage(subBuilder);
            Opdoor = subBuilder;
            break;
          }
          case 178: {
            global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_OperateVehicle>();
            if (commandDataCase_ == CommandDataOneofCase.Opvehicle) {
              subBuilder.MergeFrom(Opvehicle);
            }
            input.ReadMessage(subBuilder);
            Opvehicle = subBuilder;
            break;
          }
          case 186: {
            global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_MoveVehicle>();
            if (commandDataCase_ == CommandDataOneofCase.Movevehicle) {
              subBuilder.MergeFrom(Movevehicle);
            }
            input.ReadMessage(subBuilder);
            Movevehicle = subBuilder;
            break;
          }
          case 194: {
            global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_SendItemToSharePack>();
            if (commandDataCase_ == CommandDataOneofCase.Senditemtosharepack) {
              subBuilder.MergeFrom(Senditemtosharepack);
            }
            input.ReadMessage(subBuilder);
            Senditemtosharepack = subBuilder;
            break;
          }
          case 202: {
            global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_SendItemFromEquipment>();
            if (commandDataCase_ == CommandDataOneofCase.Senditemfromequipment) {
              subBuilder.MergeFrom(Senditemfromequipment);
            }
            input.ReadMessage(subBuilder);
            Senditemfromequipment = subBuilder;
            break;
          }
          case 210: {
            global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_PickItemFromSharePack>();
            if (commandDataCase_ == CommandDataOneofCase.Pickitemfromsharepack) {
              subBuilder.MergeFrom(Pickitemfromsharepack);
            }
            input.ReadMessage(subBuilder);
            Pickitemfromsharepack = subBuilder;
            break;
          }
          case 218: {
            global::Pb.C2B_PlayerCommand.Types.C2B_FallGround subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_FallGround>();
            if (commandDataCase_ == CommandDataOneofCase.Fallground) {
              subBuilder.MergeFrom(Fallground);
            }
            input.ReadMessage(subBuilder);
            Fallground = subBuilder;
            break;
          }
          case 226: {
            global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_EmptyGun>();
            if (commandDataCase_ == CommandDataOneofCase.Emptyray) {
              subBuilder.MergeFrom(Emptyray);
            }
            input.ReadMessage(subBuilder);
            Emptyray = subBuilder;
            break;
          }
          case 234: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Aiming subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Aiming>();
            if (commandDataCase_ == CommandDataOneofCase.Aiming) {
              subBuilder.MergeFrom(Aiming);
            }
            input.ReadMessage(subBuilder);
            Aiming = subBuilder;
            break;
          }
          case 242: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ClimbEffect>();
            if (commandDataCase_ == CommandDataOneofCase.Climbeffect) {
              subBuilder.MergeFrom(Climbeffect);
            }
            input.ReadMessage(subBuilder);
            Climbeffect = subBuilder;
            break;
          }
          case 250: {
            global::Pb.C2B_PlayerCommand.Types.C2B_SkillState subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_SkillState>();
            if (commandDataCase_ == CommandDataOneofCase.Skillstate) {
              subBuilder.MergeFrom(Skillstate);
            }
            input.ReadMessage(subBuilder);
            Skillstate = subBuilder;
            break;
          }
          case 258: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Jump subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Jump>();
            if (commandDataCase_ == CommandDataOneofCase.Jump) {
              subBuilder.MergeFrom(Jump);
            }
            input.ReadMessage(subBuilder);
            Jump = subBuilder;
            break;
          }
          case 266: {
            global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_SightInfo>();
            if (commandDataCase_ == CommandDataOneofCase.Sight) {
              subBuilder.MergeFrom(Sight);
            }
            input.ReadMessage(subBuilder);
            Sight = subBuilder;
            break;
          }
          case 274: {
            global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_OpBlast>();
            if (commandDataCase_ == CommandDataOneofCase.Blast) {
              subBuilder.MergeFrom(Blast);
            }
            input.ReadMessage(subBuilder);
            Blast = subBuilder;
            break;
          }
          case 282: {
            global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_DesEnterHouse>();
            if (commandDataCase_ == CommandDataOneofCase.Forceenterhouse) {
              subBuilder.MergeFrom(Forceenterhouse);
            }
            input.ReadMessage(subBuilder);
            Forceenterhouse = subBuilder;
            break;
          }
          case 290: {
            global::Pb.C2B_PlayerCommand.Types.C2B_Gamble subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_Gamble>();
            if (commandDataCase_ == CommandDataOneofCase.Gamble) {
              subBuilder.MergeFrom(Gamble);
            }
            input.ReadMessage(subBuilder);
            Gamble = subBuilder;
            break;
          }
          case 298: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ShieldSkill>();
            if (commandDataCase_ == CommandDataOneofCase.Shieldskill) {
              subBuilder.MergeFrom(Shieldskill);
            }
            input.ReadMessage(subBuilder);
            Shieldskill = subBuilder;
            break;
          }
          case 306: {
            global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_WarningEffect>();
            if (commandDataCase_ == CommandDataOneofCase.Warningeffect) {
              subBuilder.MergeFrom(Warningeffect);
            }
            input.ReadMessage(subBuilder);
            Warningeffect = subBuilder;
            break;
          }
          case 314: {
            global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_PickGroundItem>();
            if (commandDataCase_ == CommandDataOneofCase.Pickitem) {
              subBuilder.MergeFrom(Pickitem);
            }
            input.ReadMessage(subBuilder);
            Pickitem = subBuilder;
            break;
          }
          case 322: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ExchangeCore>();
            if (commandDataCase_ == CommandDataOneofCase.Exchangecore) {
              subBuilder.MergeFrom(Exchangecore);
            }
            input.ReadMessage(subBuilder);
            Exchangecore = subBuilder;
            break;
          }
          case 330: {
            global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_ClickNpc>();
            if (commandDataCase_ == CommandDataOneofCase.Clicknpc) {
              subBuilder.MergeFrom(Clicknpc);
            }
            input.ReadMessage(subBuilder);
            Clicknpc = subBuilder;
            break;
          }
          case 338: {
            global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_CatchNpc>();
            if (commandDataCase_ == CommandDataOneofCase.Catchnpc) {
              subBuilder.MergeFrom(Catchnpc);
            }
            input.ReadMessage(subBuilder);
            Catchnpc = subBuilder;
            break;
          }
          case 346: {
            global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_EquipGroundItem>();
            if (commandDataCase_ == CommandDataOneofCase.EquipGroundItem) {
              subBuilder.MergeFrom(EquipGroundItem);
            }
            input.ReadMessage(subBuilder);
            EquipGroundItem = subBuilder;
            break;
          }
          case 354: {
            global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_NpcGameble>();
            if (commandDataCase_ == CommandDataOneofCase.Npcgamble) {
              subBuilder.MergeFrom(Npcgamble);
            }
            input.ReadMessage(subBuilder);
            Npcgamble = subBuilder;
            break;
          }
          case 362: {
            global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_GetGambleBoxItem>();
            if (commandDataCase_ == CommandDataOneofCase.GetGambleBoxItem) {
              subBuilder.MergeFrom(GetGambleBoxItem);
            }
            input.ReadMessage(subBuilder);
            GetGambleBoxItem = subBuilder;
            break;
          }
          case 370: {
            global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_NpcSellItem>();
            if (commandDataCase_ == CommandDataOneofCase.Npcsell) {
              subBuilder.MergeFrom(Npcsell);
            }
            input.ReadMessage(subBuilder);
            Npcsell = subBuilder;
            break;
          }
          case 378: {
            global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem subBuilder = pb.ProtobufManager.New<global::Pb.C2B_PlayerCommand.Types.C2B_NpcLevelUpItem>();
            if (commandDataCase_ == CommandDataOneofCase.Npclvup) {
              subBuilder.MergeFrom(Npclvup);
            }
            input.ReadMessage(subBuilder);
            Npclvup = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the C2B_PlayerCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class C2B_Move : pb::IMessage<C2B_Move> {
        private static readonly pb::MessageParser<C2B_Move> _parser = new pb::MessageParser<C2B_Move>(() => pb.ProtobufManager.New<C2B_Move>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Move> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Move() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Move(C2B_Move other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Move Clone() {
          return new C2B_Move(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Move);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Move other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Move other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Jump : pb::IMessage<C2B_Jump> {
        private static readonly pb::MessageParser<C2B_Jump> _parser = new pb::MessageParser<C2B_Jump>(() => pb.ProtobufManager.New<C2B_Jump>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Jump> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Jump() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Jump = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Jump(C2B_Jump other) : this() {
          jump_ = other.jump_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Jump Clone() {
          return new C2B_Jump(this);
        }

        /// <summary>Field number for the "jump" field.</summary>
        public const int JumpFieldNumber = 1;
        private bool jump_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Jump {
          get { return jump_; }
          set {
            jump_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Jump);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Jump other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Jump != other.Jump) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Jump != false) hash ^= Jump.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Jump != false) {
            output.WriteRawTag(8);
            output.WriteBool(Jump);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Jump != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Jump other) {
          if (other == null) {
            return;
          }
          if (other.Jump != false) {
            Jump = other.Jump;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Jump = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Rotation : pb::IMessage<C2B_Rotation> {
        private static readonly pb::MessageParser<C2B_Rotation> _parser = new pb::MessageParser<C2B_Rotation>(() => pb.ProtobufManager.New<C2B_Rotation>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          DirX = 0;
          DirY = 0;
          DirZ = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Rotation(C2B_Rotation other) : this() {
          dirX_ = other.dirX_;
          dirY_ = other.dirY_;
          dirZ_ = other.dirZ_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Rotation Clone() {
          return new C2B_Rotation(this);
        }

        /// <summary>Field number for the "dirX" field.</summary>
        public const int DirXFieldNumber = 1;
        private float dirX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirX {
          get { return dirX_; }
          set {
            dirX_ = value;
          }
        }

        /// <summary>Field number for the "dirY" field.</summary>
        public const int DirYFieldNumber = 2;
        private float dirY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirY {
          get { return dirY_; }
          set {
            dirY_ = value;
          }
        }

        /// <summary>Field number for the "dirZ" field.</summary>
        public const int DirZFieldNumber = 3;
        private float dirZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirZ {
          get { return dirZ_; }
          set {
            dirZ_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DirX != other.DirX) return false;
          if (DirY != other.DirY) return false;
          if (DirZ != other.DirZ) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DirX != 0F) hash ^= DirX.GetHashCode();
          if (DirY != 0F) hash ^= DirY.GetHashCode();
          if (DirZ != 0F) hash ^= DirZ.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DirX != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(DirX);
          }
          if (DirY != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(DirY);
          }
          if (DirZ != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(DirZ);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DirX != 0F) {
            size += 1 + 4;
          }
          if (DirY != 0F) {
            size += 1 + 4;
          }
          if (DirZ != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Rotation other) {
          if (other == null) {
            return;
          }
          if (other.DirX != 0F) {
            DirX = other.DirX;
          }
          if (other.DirY != 0F) {
            DirY = other.DirY;
          }
          if (other.DirZ != 0F) {
            DirZ = other.DirZ;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                DirX = input.ReadFloat();
                break;
              }
              case 21: {
                DirY = input.ReadFloat();
                break;
              }
              case 29: {
                DirZ = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Attack : pb::IMessage<C2B_Attack> {
        private static readonly pb::MessageParser<C2B_Attack> _parser = new pb::MessageParser<C2B_Attack>(() => pb.ProtobufManager.New<C2B_Attack>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Attack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Attack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Skillid = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(footoffset_);
          footoffset_ = null;
          for (int i = 0; i < rayatt_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast>(rayatt_[i]);
          }
          rayatt_.Clear();
          for (int i = 0; i < greatt_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade>(greatt_[i]);
          }
          greatt_.Clear();
          for (int i = 0; i < areaatt_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill>(areaatt_[i]);
          }
          areaatt_.Clear();
          Repeatenum = 0;
          Lastrepeate = false;
          Targetuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Attack(C2B_Attack other) : this() {
          skillid_ = other.skillid_;
          Footoffset = other.footoffset_ != null ? other.Footoffset.Clone() : null;
          rayatt_ = other.rayatt_.Clone();
          greatt_ = other.greatt_.Clone();
          areaatt_ = other.areaatt_.Clone();
          repeatenum_ = other.repeatenum_;
          lastrepeate_ = other.lastrepeate_;
          targetuid_ = other.targetuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Attack Clone() {
          return new C2B_Attack(this);
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "footoffset" field.</summary>
        public const int FootoffsetFieldNumber = 2;
        private global::Pb.Vector3PB footoffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Footoffset {
          get { return footoffset_; }
          set {
            footoffset_ = value;
          }
        }

        /// <summary>Field number for the "rayatt" field.</summary>
        public const int RayattFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast> _repeated_rayatt_codec
            = pb::FieldCodec.ForMessage(26, global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast.Parser);
        private readonly pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast> rayatt_ = new pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Raycast> Rayatt {
          get { return rayatt_; }
        }

        /// <summary>Field number for the "greatt" field.</summary>
        public const int GreattFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade> _repeated_greatt_codec
            = pb::FieldCodec.ForMessage(34, global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade.Parser);
        private readonly pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade> greatt_ = new pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.Grenade> Greatt {
          get { return greatt_; }
        }

        /// <summary>Field number for the "areaatt" field.</summary>
        public const int AreaattFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill> _repeated_areaatt_codec
            = pb::FieldCodec.ForMessage(42, global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill.Parser);
        private readonly pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill> areaatt_ = new pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Types.AreaSkill> Areaatt {
          get { return areaatt_; }
        }

        /// <summary>Field number for the "repeatenum" field.</summary>
        public const int RepeatenumFieldNumber = 6;
        private uint repeatenum_;
        /// <summary>
        /// 当前连发次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Repeatenum {
          get { return repeatenum_; }
          set {
            repeatenum_ = value;
          }
        }

        /// <summary>Field number for the "lastrepeate" field.</summary>
        public const int LastrepeateFieldNumber = 7;
        private bool lastrepeate_;
        /// <summary>
        /// 最后一次连发
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Lastrepeate {
          get { return lastrepeate_; }
          set {
            lastrepeate_ = value;
          }
        }

        /// <summary>Field number for the "targetuid" field.</summary>
        public const int TargetuidFieldNumber = 8;
        private ulong targetuid_;
        /// <summary>
        /// 指向性技能目标
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Targetuid {
          get { return targetuid_; }
          set {
            targetuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Attack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Attack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Skillid != other.Skillid) return false;
          if (!object.Equals(Footoffset, other.Footoffset)) return false;
          if(!rayatt_.Equals(other.rayatt_)) return false;
          if(!greatt_.Equals(other.greatt_)) return false;
          if(!areaatt_.Equals(other.areaatt_)) return false;
          if (Repeatenum != other.Repeatenum) return false;
          if (Lastrepeate != other.Lastrepeate) return false;
          if (Targetuid != other.Targetuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (footoffset_ != null) hash ^= Footoffset.GetHashCode();
          hash ^= rayatt_.GetHashCode();
          hash ^= greatt_.GetHashCode();
          hash ^= areaatt_.GetHashCode();
          if (Repeatenum != 0) hash ^= Repeatenum.GetHashCode();
          if (Lastrepeate != false) hash ^= Lastrepeate.GetHashCode();
          if (Targetuid != 0UL) hash ^= Targetuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
          if (footoffset_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Footoffset);
          }
          rayatt_.WriteTo(output, _repeated_rayatt_codec);
          greatt_.WriteTo(output, _repeated_greatt_codec);
          areaatt_.WriteTo(output, _repeated_areaatt_codec);
          if (Repeatenum != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Repeatenum);
          }
          if (Lastrepeate != false) {
            output.WriteRawTag(56);
            output.WriteBool(Lastrepeate);
          }
          if (Targetuid != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(Targetuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (footoffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Footoffset);
          }
          size += rayatt_.CalculateSize(_repeated_rayatt_codec);
          size += greatt_.CalculateSize(_repeated_greatt_codec);
          size += areaatt_.CalculateSize(_repeated_areaatt_codec);
          if (Repeatenum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Repeatenum);
          }
          if (Lastrepeate != false) {
            size += 1 + 1;
          }
          if (Targetuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Attack other) {
          if (other == null) {
            return;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.footoffset_ != null) {
            if (footoffset_ == null) {
              footoffset_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Footoffset.MergeFrom(other.Footoffset);
          }
          rayatt_.Add(other.rayatt_);
          greatt_.Add(other.greatt_);
          areaatt_.Add(other.areaatt_);
          if (other.Repeatenum != 0) {
            Repeatenum = other.Repeatenum;
          }
          if (other.Lastrepeate != false) {
            Lastrepeate = other.Lastrepeate;
          }
          if (other.Targetuid != 0UL) {
            Targetuid = other.Targetuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 18: {
                if (footoffset_ == null) {
                  footoffset_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(footoffset_);
                break;
              }
              case 26: {
                rayatt_.AddEntriesFrom(input, _repeated_rayatt_codec);
                break;
              }
              case 34: {
                greatt_.AddEntriesFrom(input, _repeated_greatt_codec);
                break;
              }
              case 42: {
                areaatt_.AddEntriesFrom(input, _repeated_areaatt_codec);
                break;
              }
              case 48: {
                Repeatenum = input.ReadUInt32();
                break;
              }
              case 56: {
                Lastrepeate = input.ReadBool();
                break;
              }
              case 64: {
                Targetuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the C2B_Attack message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Raycast : pb::IMessage<Raycast> {
            private static readonly pb::MessageParser<Raycast> _parser = new pb::MessageParser<Raycast>(() => pb.ProtobufManager.New<Raycast>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Raycast> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Raycast() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Targetuid = 0;
              TargetFrame = 0;
              Lerp = 0;
              Tlerp = 0;
              Attx = 0;
              Atty = 0;
              Attz = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Raycast(Raycast other) : this() {
              targetuid_ = other.targetuid_;
              targetFrame_ = other.targetFrame_;
              lerp_ = other.lerp_;
              tlerp_ = other.tlerp_;
              attx_ = other.attx_;
              atty_ = other.atty_;
              attz_ = other.attz_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Raycast Clone() {
              return new Raycast(this);
            }

            /// <summary>Field number for the "targetuid" field.</summary>
            public const int TargetuidFieldNumber = 1;
            private ulong targetuid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Targetuid {
              get { return targetuid_; }
              set {
                targetuid_ = value;
              }
            }

            /// <summary>Field number for the "targetFrame" field.</summary>
            public const int TargetFrameFieldNumber = 2;
            private uint targetFrame_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TargetFrame {
              get { return targetFrame_; }
              set {
                targetFrame_ = value;
              }
            }

            /// <summary>Field number for the "lerp" field.</summary>
            public const int LerpFieldNumber = 3;
            private float lerp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Lerp {
              get { return lerp_; }
              set {
                lerp_ = value;
              }
            }

            /// <summary>Field number for the "tlerp" field.</summary>
            public const int TlerpFieldNumber = 4;
            private float tlerp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Tlerp {
              get { return tlerp_; }
              set {
                tlerp_ = value;
              }
            }

            /// <summary>Field number for the "attx" field.</summary>
            public const int AttxFieldNumber = 5;
            private float attx_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Attx {
              get { return attx_; }
              set {
                attx_ = value;
              }
            }

            /// <summary>Field number for the "atty" field.</summary>
            public const int AttyFieldNumber = 6;
            private float atty_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Atty {
              get { return atty_; }
              set {
                atty_ = value;
              }
            }

            /// <summary>Field number for the "attz" field.</summary>
            public const int AttzFieldNumber = 7;
            private float attz_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Attz {
              get { return attz_; }
              set {
                attz_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Raycast);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Raycast other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Targetuid != other.Targetuid) return false;
              if (TargetFrame != other.TargetFrame) return false;
              if (Lerp != other.Lerp) return false;
              if (Tlerp != other.Tlerp) return false;
              if (Attx != other.Attx) return false;
              if (Atty != other.Atty) return false;
              if (Attz != other.Attz) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Targetuid != 0UL) hash ^= Targetuid.GetHashCode();
              if (TargetFrame != 0) hash ^= TargetFrame.GetHashCode();
              if (Lerp != 0F) hash ^= Lerp.GetHashCode();
              if (Tlerp != 0F) hash ^= Tlerp.GetHashCode();
              if (Attx != 0F) hash ^= Attx.GetHashCode();
              if (Atty != 0F) hash ^= Atty.GetHashCode();
              if (Attz != 0F) hash ^= Attz.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Targetuid != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(Targetuid);
              }
              if (TargetFrame != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(TargetFrame);
              }
              if (Lerp != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Lerp);
              }
              if (Tlerp != 0F) {
                output.WriteRawTag(37);
                output.WriteFloat(Tlerp);
              }
              if (Attx != 0F) {
                output.WriteRawTag(45);
                output.WriteFloat(Attx);
              }
              if (Atty != 0F) {
                output.WriteRawTag(53);
                output.WriteFloat(Atty);
              }
              if (Attz != 0F) {
                output.WriteRawTag(61);
                output.WriteFloat(Attz);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Targetuid != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetuid);
              }
              if (TargetFrame != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetFrame);
              }
              if (Lerp != 0F) {
                size += 1 + 4;
              }
              if (Tlerp != 0F) {
                size += 1 + 4;
              }
              if (Attx != 0F) {
                size += 1 + 4;
              }
              if (Atty != 0F) {
                size += 1 + 4;
              }
              if (Attz != 0F) {
                size += 1 + 4;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Raycast other) {
              if (other == null) {
                return;
              }
              if (other.Targetuid != 0UL) {
                Targetuid = other.Targetuid;
              }
              if (other.TargetFrame != 0) {
                TargetFrame = other.TargetFrame;
              }
              if (other.Lerp != 0F) {
                Lerp = other.Lerp;
              }
              if (other.Tlerp != 0F) {
                Tlerp = other.Tlerp;
              }
              if (other.Attx != 0F) {
                Attx = other.Attx;
              }
              if (other.Atty != 0F) {
                Atty = other.Atty;
              }
              if (other.Attz != 0F) {
                Attz = other.Attz;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Targetuid = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    TargetFrame = input.ReadUInt32();
                    break;
                  }
                  case 29: {
                    Lerp = input.ReadFloat();
                    break;
                  }
                  case 37: {
                    Tlerp = input.ReadFloat();
                    break;
                  }
                  case 45: {
                    Attx = input.ReadFloat();
                    break;
                  }
                  case 53: {
                    Atty = input.ReadFloat();
                    break;
                  }
                  case 61: {
                    Attz = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Grenade : pb::IMessage<Grenade> {
            private static readonly pb::MessageParser<Grenade> _parser = new pb::MessageParser<Grenade>(() => pb.ProtobufManager.New<Grenade>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Grenade> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Grenade() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Attx = 0;
              Atty = 0;
              Attz = 0;
              Dirx = 0;
              Diry = 0;
              Dirz = 0;
              Targetuid = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Grenade(Grenade other) : this() {
              attx_ = other.attx_;
              atty_ = other.atty_;
              attz_ = other.attz_;
              dirx_ = other.dirx_;
              diry_ = other.diry_;
              dirz_ = other.dirz_;
              targetuid_ = other.targetuid_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Grenade Clone() {
              return new Grenade(this);
            }

            /// <summary>Field number for the "attx" field.</summary>
            public const int AttxFieldNumber = 1;
            private float attx_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Attx {
              get { return attx_; }
              set {
                attx_ = value;
              }
            }

            /// <summary>Field number for the "atty" field.</summary>
            public const int AttyFieldNumber = 2;
            private float atty_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Atty {
              get { return atty_; }
              set {
                atty_ = value;
              }
            }

            /// <summary>Field number for the "attz" field.</summary>
            public const int AttzFieldNumber = 3;
            private float attz_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Attz {
              get { return attz_; }
              set {
                attz_ = value;
              }
            }

            /// <summary>Field number for the "dirx" field.</summary>
            public const int DirxFieldNumber = 4;
            private float dirx_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Dirx {
              get { return dirx_; }
              set {
                dirx_ = value;
              }
            }

            /// <summary>Field number for the "diry" field.</summary>
            public const int DiryFieldNumber = 5;
            private float diry_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Diry {
              get { return diry_; }
              set {
                diry_ = value;
              }
            }

            /// <summary>Field number for the "dirz" field.</summary>
            public const int DirzFieldNumber = 6;
            private float dirz_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Dirz {
              get { return dirz_; }
              set {
                dirz_ = value;
              }
            }

            /// <summary>Field number for the "targetuid" field.</summary>
            public const int TargetuidFieldNumber = 7;
            private ulong targetuid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Targetuid {
              get { return targetuid_; }
              set {
                targetuid_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Grenade);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Grenade other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Attx != other.Attx) return false;
              if (Atty != other.Atty) return false;
              if (Attz != other.Attz) return false;
              if (Dirx != other.Dirx) return false;
              if (Diry != other.Diry) return false;
              if (Dirz != other.Dirz) return false;
              if (Targetuid != other.Targetuid) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Attx != 0F) hash ^= Attx.GetHashCode();
              if (Atty != 0F) hash ^= Atty.GetHashCode();
              if (Attz != 0F) hash ^= Attz.GetHashCode();
              if (Dirx != 0F) hash ^= Dirx.GetHashCode();
              if (Diry != 0F) hash ^= Diry.GetHashCode();
              if (Dirz != 0F) hash ^= Dirz.GetHashCode();
              if (Targetuid != 0UL) hash ^= Targetuid.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Attx != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(Attx);
              }
              if (Atty != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Atty);
              }
              if (Attz != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Attz);
              }
              if (Dirx != 0F) {
                output.WriteRawTag(37);
                output.WriteFloat(Dirx);
              }
              if (Diry != 0F) {
                output.WriteRawTag(45);
                output.WriteFloat(Diry);
              }
              if (Dirz != 0F) {
                output.WriteRawTag(53);
                output.WriteFloat(Dirz);
              }
              if (Targetuid != 0UL) {
                output.WriteRawTag(56);
                output.WriteUInt64(Targetuid);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Attx != 0F) {
                size += 1 + 4;
              }
              if (Atty != 0F) {
                size += 1 + 4;
              }
              if (Attz != 0F) {
                size += 1 + 4;
              }
              if (Dirx != 0F) {
                size += 1 + 4;
              }
              if (Diry != 0F) {
                size += 1 + 4;
              }
              if (Dirz != 0F) {
                size += 1 + 4;
              }
              if (Targetuid != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetuid);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Grenade other) {
              if (other == null) {
                return;
              }
              if (other.Attx != 0F) {
                Attx = other.Attx;
              }
              if (other.Atty != 0F) {
                Atty = other.Atty;
              }
              if (other.Attz != 0F) {
                Attz = other.Attz;
              }
              if (other.Dirx != 0F) {
                Dirx = other.Dirx;
              }
              if (other.Diry != 0F) {
                Diry = other.Diry;
              }
              if (other.Dirz != 0F) {
                Dirz = other.Dirz;
              }
              if (other.Targetuid != 0UL) {
                Targetuid = other.Targetuid;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 13: {
                    Attx = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Atty = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    Attz = input.ReadFloat();
                    break;
                  }
                  case 37: {
                    Dirx = input.ReadFloat();
                    break;
                  }
                  case 45: {
                    Diry = input.ReadFloat();
                    break;
                  }
                  case 53: {
                    Dirz = input.ReadFloat();
                    break;
                  }
                  case 56: {
                    Targetuid = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class AreaSkill : pb::IMessage<AreaSkill> {
            private static readonly pb::MessageParser<AreaSkill> _parser = new pb::MessageParser<AreaSkill>(() => pb.ProtobufManager.New<AreaSkill>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<AreaSkill> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.C2B_PlayerCommand.Types.C2B_Attack.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AreaSkill() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Attx = 0;
              Atty = 0;
              Attz = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AreaSkill(AreaSkill other) : this() {
              attx_ = other.attx_;
              atty_ = other.atty_;
              attz_ = other.attz_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AreaSkill Clone() {
              return new AreaSkill(this);
            }

            /// <summary>Field number for the "attx" field.</summary>
            public const int AttxFieldNumber = 1;
            private float attx_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Attx {
              get { return attx_; }
              set {
                attx_ = value;
              }
            }

            /// <summary>Field number for the "atty" field.</summary>
            public const int AttyFieldNumber = 2;
            private float atty_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Atty {
              get { return atty_; }
              set {
                atty_ = value;
              }
            }

            /// <summary>Field number for the "attz" field.</summary>
            public const int AttzFieldNumber = 3;
            private float attz_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Attz {
              get { return attz_; }
              set {
                attz_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as AreaSkill);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(AreaSkill other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Attx != other.Attx) return false;
              if (Atty != other.Atty) return false;
              if (Attz != other.Attz) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Attx != 0F) hash ^= Attx.GetHashCode();
              if (Atty != 0F) hash ^= Atty.GetHashCode();
              if (Attz != 0F) hash ^= Attz.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Attx != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(Attx);
              }
              if (Atty != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Atty);
              }
              if (Attz != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Attz);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Attx != 0F) {
                size += 1 + 4;
              }
              if (Atty != 0F) {
                size += 1 + 4;
              }
              if (Attz != 0F) {
                size += 1 + 4;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(AreaSkill other) {
              if (other == null) {
                return;
              }
              if (other.Attx != 0F) {
                Attx = other.Attx;
              }
              if (other.Atty != 0F) {
                Atty = other.Atty;
              }
              if (other.Attz != 0F) {
                Attz = other.Attz;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 13: {
                    Attx = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Atty = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    Attz = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class C2B_EmptyGun : pb::IMessage<C2B_EmptyGun> {
        private static readonly pb::MessageParser<C2B_EmptyGun> _parser = new pb::MessageParser<C2B_EmptyGun>(() => pb.ProtobufManager.New<C2B_EmptyGun>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_EmptyGun> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EmptyGun() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Skillid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EmptyGun(C2B_EmptyGun other) : this() {
          skillid_ = other.skillid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EmptyGun Clone() {
          return new C2B_EmptyGun(this);
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_EmptyGun);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_EmptyGun other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Skillid != other.Skillid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_EmptyGun other) {
          if (other == null) {
            return;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_OpenBox : pb::IMessage<C2B_OpenBox> {
        private static readonly pb::MessageParser<C2B_OpenBox> _parser = new pb::MessageParser<C2B_OpenBox>(() => pb.ProtobufManager.New<C2B_OpenBox>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_OpenBox> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OpenBox() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          BoxID = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OpenBox(C2B_OpenBox other) : this() {
          boxID_ = other.boxID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OpenBox Clone() {
          return new C2B_OpenBox(this);
        }

        /// <summary>Field number for the "boxID" field.</summary>
        public const int BoxIDFieldNumber = 1;
        private ulong boxID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong BoxID {
          get { return boxID_; }
          set {
            boxID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_OpenBox);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_OpenBox other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BoxID != other.BoxID) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BoxID != 0UL) hash ^= BoxID.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BoxID != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(BoxID);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BoxID != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BoxID);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_OpenBox other) {
          if (other == null) {
            return;
          }
          if (other.BoxID != 0UL) {
            BoxID = other.BoxID;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                BoxID = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_GetBoxItem : pb::IMessage<C2B_GetBoxItem> {
        private static readonly pb::MessageParser<C2B_GetBoxItem> _parser = new pb::MessageParser<C2B_GetBoxItem>(() => pb.ProtobufManager.New<C2B_GetBoxItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_GetBoxItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_GetBoxItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Uuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_GetBoxItem(C2B_GetBoxItem other) : this() {
          uuid_ = other.uuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_GetBoxItem Clone() {
          return new C2B_GetBoxItem(this);
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 1;
        private ulong uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Uuid {
          get { return uuid_; }
          set {
            uuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_GetBoxItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_GetBoxItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uuid != other.Uuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Uuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_GetBoxItem other) {
          if (other == null) {
            return;
          }
          if (other.Uuid != 0UL) {
            Uuid = other.Uuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_PickUpItem : pb::IMessage<C2B_PickUpItem> {
        private static readonly pb::MessageParser<C2B_PickUpItem> _parser = new pb::MessageParser<C2B_PickUpItem>(() => pb.ProtobufManager.New<C2B_PickUpItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_PickUpItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickUpItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Num = 0;
          Tobackpack = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickUpItem(C2B_PickUpItem other) : this() {
          itemuid_ = other.itemuid_;
          num_ = other.num_;
          tobackpack_ = other.tobackpack_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickUpItem Clone() {
          return new C2B_PickUpItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        /// <summary>Field number for the "tobackpack" field.</summary>
        public const int TobackpackFieldNumber = 3;
        private bool tobackpack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Tobackpack {
          get { return tobackpack_; }
          set {
            tobackpack_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_PickUpItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_PickUpItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          if (Tobackpack != other.Tobackpack) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          if (Tobackpack != false) hash ^= Tobackpack.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
          if (Tobackpack != false) {
            output.WriteRawTag(24);
            output.WriteBool(Tobackpack);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (Tobackpack != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_PickUpItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          if (other.Tobackpack != false) {
            Tobackpack = other.Tobackpack;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
              case 24: {
                Tobackpack = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_DropItem : pb::IMessage<C2B_DropItem> {
        private static readonly pb::MessageParser<C2B_DropItem> _parser = new pb::MessageParser<C2B_DropItem>(() => pb.ProtobufManager.New<C2B_DropItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_DropItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DropItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DropItem(C2B_DropItem other) : this() {
          itemuid_ = other.itemuid_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DropItem Clone() {
          return new C2B_DropItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_DropItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_DropItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_DropItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Motion : pb::IMessage<C2B_Motion> {
        private static readonly pb::MessageParser<C2B_Motion> _parser = new pb::MessageParser<C2B_Motion>(() => pb.ProtobufManager.New<C2B_Motion>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Motion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Motion() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Crouch = false;
          Prone = false;
          Running = false;
          Climb = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Motion(C2B_Motion other) : this() {
          crouch_ = other.crouch_;
          prone_ = other.prone_;
          running_ = other.running_;
          climb_ = other.climb_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Motion Clone() {
          return new C2B_Motion(this);
        }

        /// <summary>Field number for the "crouch" field.</summary>
        public const int CrouchFieldNumber = 1;
        private bool crouch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Crouch {
          get { return crouch_; }
          set {
            crouch_ = value;
          }
        }

        /// <summary>Field number for the "prone" field.</summary>
        public const int ProneFieldNumber = 2;
        private bool prone_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Prone {
          get { return prone_; }
          set {
            prone_ = value;
          }
        }

        /// <summary>Field number for the "running" field.</summary>
        public const int RunningFieldNumber = 3;
        private bool running_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Running {
          get { return running_; }
          set {
            running_ = value;
          }
        }

        /// <summary>Field number for the "climb" field.</summary>
        public const int ClimbFieldNumber = 4;
        private bool climb_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Climb {
          get { return climb_; }
          set {
            climb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Motion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Motion other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Crouch != other.Crouch) return false;
          if (Prone != other.Prone) return false;
          if (Running != other.Running) return false;
          if (Climb != other.Climb) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Crouch != false) hash ^= Crouch.GetHashCode();
          if (Prone != false) hash ^= Prone.GetHashCode();
          if (Running != false) hash ^= Running.GetHashCode();
          if (Climb != false) hash ^= Climb.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Crouch != false) {
            output.WriteRawTag(8);
            output.WriteBool(Crouch);
          }
          if (Prone != false) {
            output.WriteRawTag(16);
            output.WriteBool(Prone);
          }
          if (Running != false) {
            output.WriteRawTag(24);
            output.WriteBool(Running);
          }
          if (Climb != false) {
            output.WriteRawTag(32);
            output.WriteBool(Climb);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Crouch != false) {
            size += 1 + 1;
          }
          if (Prone != false) {
            size += 1 + 1;
          }
          if (Running != false) {
            size += 1 + 1;
          }
          if (Climb != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Motion other) {
          if (other == null) {
            return;
          }
          if (other.Crouch != false) {
            Crouch = other.Crouch;
          }
          if (other.Prone != false) {
            Prone = other.Prone;
          }
          if (other.Running != false) {
            Running = other.Running;
          }
          if (other.Climb != false) {
            Climb = other.Climb;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Crouch = input.ReadBool();
                break;
              }
              case 16: {
                Prone = input.ReadBool();
                break;
              }
              case 24: {
                Running = input.ReadBool();
                break;
              }
              case 32: {
                Climb = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Aiming : pb::IMessage<C2B_Aiming> {
        private static readonly pb::MessageParser<C2B_Aiming> _parser = new pb::MessageParser<C2B_Aiming>(() => pb.ProtobufManager.New<C2B_Aiming>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Aiming> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Aiming() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Aiming = false;
          Usinggrenade = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Aiming(C2B_Aiming other) : this() {
          aiming_ = other.aiming_;
          usinggrenade_ = other.usinggrenade_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Aiming Clone() {
          return new C2B_Aiming(this);
        }

        /// <summary>Field number for the "aiming" field.</summary>
        public const int AimingFieldNumber = 1;
        private bool aiming_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Aiming {
          get { return aiming_; }
          set {
            aiming_ = value;
          }
        }

        /// <summary>Field number for the "usinggrenade" field.</summary>
        public const int UsinggrenadeFieldNumber = 2;
        private bool usinggrenade_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Usinggrenade {
          get { return usinggrenade_; }
          set {
            usinggrenade_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Aiming);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Aiming other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Aiming != other.Aiming) return false;
          if (Usinggrenade != other.Usinggrenade) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Aiming != false) hash ^= Aiming.GetHashCode();
          if (Usinggrenade != false) hash ^= Usinggrenade.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Aiming != false) {
            output.WriteRawTag(8);
            output.WriteBool(Aiming);
          }
          if (Usinggrenade != false) {
            output.WriteRawTag(16);
            output.WriteBool(Usinggrenade);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Aiming != false) {
            size += 1 + 1;
          }
          if (Usinggrenade != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Aiming other) {
          if (other == null) {
            return;
          }
          if (other.Aiming != false) {
            Aiming = other.Aiming;
          }
          if (other.Usinggrenade != false) {
            Usinggrenade = other.Usinggrenade;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Aiming = input.ReadBool();
                break;
              }
              case 16: {
                Usinggrenade = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_DePlane : pb::IMessage<C2B_DePlane> {
        private static readonly pb::MessageParser<C2B_DePlane> _parser = new pb::MessageParser<C2B_DePlane>(() => pb.ProtobufManager.New<C2B_DePlane>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_DePlane> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DePlane() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Planeid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DePlane(C2B_DePlane other) : this() {
          planeid_ = other.planeid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DePlane Clone() {
          return new C2B_DePlane(this);
        }

        /// <summary>Field number for the "planeid" field.</summary>
        public const int PlaneidFieldNumber = 1;
        private ulong planeid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Planeid {
          get { return planeid_; }
          set {
            planeid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_DePlane);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_DePlane other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Planeid != other.Planeid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Planeid != 0UL) hash ^= Planeid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Planeid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Planeid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Planeid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Planeid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_DePlane other) {
          if (other == null) {
            return;
          }
          if (other.Planeid != 0UL) {
            Planeid = other.Planeid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Planeid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Parachute : pb::IMessage<C2B_Parachute> {
        private static readonly pb::MessageParser<C2B_Parachute> _parser = new pb::MessageParser<C2B_Parachute>(() => pb.ProtobufManager.New<C2B_Parachute>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Parachute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Parachute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Parachute(C2B_Parachute other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Parachute Clone() {
          return new C2B_Parachute(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Parachute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Parachute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Parachute other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class C2B_EquipBoxItem : pb::IMessage<C2B_EquipBoxItem> {
        private static readonly pb::MessageParser<C2B_EquipBoxItem> _parser = new pb::MessageParser<C2B_EquipBoxItem>(() => pb.ProtobufManager.New<C2B_EquipBoxItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_EquipBoxItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipBoxItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Index = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipBoxItem(C2B_EquipBoxItem other) : this() {
          itemuid_ = other.itemuid_;
          index_ = other.index_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipBoxItem Clone() {
          return new C2B_EquipBoxItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private global::Pb.PackagePosType index_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.PackagePosType Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 3;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_EquipBoxItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_EquipBoxItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Index != other.Index) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Index);
          }
          if (Num != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Index);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_EquipBoxItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                index_ = (global::Pb.PackagePosType) input.ReadEnum();
                break;
              }
              case 24: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_EquipBackpackItem : pb::IMessage<C2B_EquipBackpackItem> {
        private static readonly pb::MessageParser<C2B_EquipBackpackItem> _parser = new pb::MessageParser<C2B_EquipBackpackItem>(() => pb.ProtobufManager.New<C2B_EquipBackpackItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_EquipBackpackItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipBackpackItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Index = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipBackpackItem(C2B_EquipBackpackItem other) : this() {
          itemuid_ = other.itemuid_;
          index_ = other.index_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipBackpackItem Clone() {
          return new C2B_EquipBackpackItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private global::Pb.PackagePosType index_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.PackagePosType Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_EquipBackpackItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_EquipBackpackItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Index != other.Index) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Index);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Index);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_EquipBackpackItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                index_ = (global::Pb.PackagePosType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_ExChangeAttach : pb::IMessage<C2B_ExChangeAttach> {
        private static readonly pb::MessageParser<C2B_ExChangeAttach> _parser = new pb::MessageParser<C2B_ExChangeAttach>(() => pb.ProtobufManager.New<C2B_ExChangeAttach>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ExChangeAttach> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ExChangeAttach() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemtype = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ExChangeAttach(C2B_ExChangeAttach other) : this() {
          itemtype_ = other.itemtype_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ExChangeAttach Clone() {
          return new C2B_ExChangeAttach(this);
        }

        /// <summary>Field number for the "itemtype" field.</summary>
        public const int ItemtypeFieldNumber = 1;
        private uint itemtype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemtype {
          get { return itemtype_; }
          set {
            itemtype_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ExChangeAttach);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ExChangeAttach other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemtype != other.Itemtype) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemtype != 0) hash ^= Itemtype.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemtype != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemtype);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemtype);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ExChangeAttach other) {
          if (other == null) {
            return;
          }
          if (other.Itemtype != 0) {
            Itemtype = other.Itemtype;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemtype = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_UnEquipItem : pb::IMessage<C2B_UnEquipItem> {
        private static readonly pb::MessageParser<C2B_UnEquipItem> _parser = new pb::MessageParser<C2B_UnEquipItem>(() => pb.ProtobufManager.New<C2B_UnEquipItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_UnEquipItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_UnEquipItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_UnEquipItem(C2B_UnEquipItem other) : this() {
          itemuid_ = other.itemuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_UnEquipItem Clone() {
          return new C2B_UnEquipItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_UnEquipItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_UnEquipItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_UnEquipItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_ReloadBullet : pb::IMessage<C2B_ReloadBullet> {
        private static readonly pb::MessageParser<C2B_ReloadBullet> _parser = new pb::MessageParser<C2B_ReloadBullet>(() => pb.ProtobufManager.New<C2B_ReloadBullet>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ReloadBullet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ReloadBullet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ReloadBullet(C2B_ReloadBullet other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ReloadBullet Clone() {
          return new C2B_ReloadBullet(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ReloadBullet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ReloadBullet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ReloadBullet other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class C2B_ChangeWeapon : pb::IMessage<C2B_ChangeWeapon> {
        private static readonly pb::MessageParser<C2B_ChangeWeapon> _parser = new pb::MessageParser<C2B_ChangeWeapon>(() => pb.ProtobufManager.New<C2B_ChangeWeapon>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ChangeWeapon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ChangeWeapon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Activeidx = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ChangeWeapon(C2B_ChangeWeapon other) : this() {
          activeidx_ = other.activeidx_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ChangeWeapon Clone() {
          return new C2B_ChangeWeapon(this);
        }

        /// <summary>Field number for the "activeidx" field.</summary>
        public const int ActiveidxFieldNumber = 1;
        private int activeidx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Activeidx {
          get { return activeidx_; }
          set {
            activeidx_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ChangeWeapon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ChangeWeapon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Activeidx != other.Activeidx) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Activeidx != 0) hash ^= Activeidx.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Activeidx != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Activeidx);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Activeidx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activeidx);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ChangeWeapon other) {
          if (other == null) {
            return;
          }
          if (other.Activeidx != 0) {
            Activeidx = other.Activeidx;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Activeidx = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_MarkPoint : pb::IMessage<C2B_MarkPoint> {
        private static readonly pb::MessageParser<C2B_MarkPoint> _parser = new pb::MessageParser<C2B_MarkPoint>(() => pb.ProtobufManager.New<C2B_MarkPoint>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_MarkPoint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_MarkPoint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_MarkPoint(C2B_MarkPoint other) : this() {
          x_ = other.x_;
          y_ = other.y_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_MarkPoint Clone() {
          return new C2B_MarkPoint(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_MarkPoint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_MarkPoint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_MarkPoint other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_UseItem : pb::IMessage<C2B_UseItem> {
        private static readonly pb::MessageParser<C2B_UseItem> _parser = new pb::MessageParser<C2B_UseItem>(() => pb.ProtobufManager.New<C2B_UseItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_UseItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_UseItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_UseItem(C2B_UseItem other) : this() {
          itemuid_ = other.itemuid_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_UseItem Clone() {
          return new C2B_UseItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_UseItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_UseItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_UseItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_KillWeak : pb::IMessage<C2B_KillWeak> {
        private static readonly pb::MessageParser<C2B_KillWeak> _parser = new pb::MessageParser<C2B_KillWeak>(() => pb.ProtobufManager.New<C2B_KillWeak>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_KillWeak> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_KillWeak() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Target = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_KillWeak(C2B_KillWeak other) : this() {
          target_ = other.target_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_KillWeak Clone() {
          return new C2B_KillWeak(this);
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 1;
        private ulong target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Target {
          get { return target_; }
          set {
            target_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_KillWeak);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_KillWeak other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Target != other.Target) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Target != 0UL) hash ^= Target.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Target != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Target);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Target != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Target);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_KillWeak other) {
          if (other == null) {
            return;
          }
          if (other.Target != 0UL) {
            Target = other.Target;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Target = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_CureWeak : pb::IMessage<C2B_CureWeak> {
        private static readonly pb::MessageParser<C2B_CureWeak> _parser = new pb::MessageParser<C2B_CureWeak>(() => pb.ProtobufManager.New<C2B_CureWeak>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_CureWeak> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_CureWeak() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Target = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_CureWeak(C2B_CureWeak other) : this() {
          target_ = other.target_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_CureWeak Clone() {
          return new C2B_CureWeak(this);
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 1;
        private ulong target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Target {
          get { return target_; }
          set {
            target_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_CureWeak);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_CureWeak other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Target != other.Target) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Target != 0UL) hash ^= Target.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Target != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Target);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Target != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Target);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_CureWeak other) {
          if (other == null) {
            return;
          }
          if (other.Target != 0UL) {
            Target = other.Target;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Target = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_OperateDoor : pb::IMessage<C2B_OperateDoor> {
        private static readonly pb::MessageParser<C2B_OperateDoor> _parser = new pb::MessageParser<C2B_OperateDoor>(() => pb.ProtobufManager.New<C2B_OperateDoor>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_OperateDoor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OperateDoor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          Open = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OperateDoor(C2B_OperateDoor other) : this() {
          entityid_ = other.entityid_;
          open_ = other.open_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OperateDoor Clone() {
          return new C2B_OperateDoor(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 2;
        private bool open_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_OperateDoor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_OperateDoor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (Open != other.Open) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Open != false) hash ^= Open.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (Open != false) {
            output.WriteRawTag(16);
            output.WriteBool(Open);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Open != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_OperateDoor other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Open != false) {
            Open = other.Open;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 16: {
                Open = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_OperateVehicle : pb::IMessage<C2B_OperateVehicle> {
        private static readonly pb::MessageParser<C2B_OperateVehicle> _parser = new pb::MessageParser<C2B_OperateVehicle>(() => pb.ProtobufManager.New<C2B_OperateVehicle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_OperateVehicle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OperateVehicle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          Open = false;
          Seatid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OperateVehicle(C2B_OperateVehicle other) : this() {
          entityid_ = other.entityid_;
          open_ = other.open_;
          seatid_ = other.seatid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OperateVehicle Clone() {
          return new C2B_OperateVehicle(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 2;
        private bool open_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        /// <summary>Field number for the "seatid" field.</summary>
        public const int SeatidFieldNumber = 3;
        private uint seatid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Seatid {
          get { return seatid_; }
          set {
            seatid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_OperateVehicle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_OperateVehicle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (Open != other.Open) return false;
          if (Seatid != other.Seatid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Open != false) hash ^= Open.GetHashCode();
          if (Seatid != 0) hash ^= Seatid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (Open != false) {
            output.WriteRawTag(16);
            output.WriteBool(Open);
          }
          if (Seatid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Seatid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Open != false) {
            size += 1 + 1;
          }
          if (Seatid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seatid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_OperateVehicle other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Open != false) {
            Open = other.Open;
          }
          if (other.Seatid != 0) {
            Seatid = other.Seatid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 16: {
                Open = input.ReadBool();
                break;
              }
              case 24: {
                Seatid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_MoveVehicle : pb::IMessage<C2B_MoveVehicle> {
        private static readonly pb::MessageParser<C2B_MoveVehicle> _parser = new pb::MessageParser<C2B_MoveVehicle>(() => pb.ProtobufManager.New<C2B_MoveVehicle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_MoveVehicle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_MoveVehicle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(movepos_);
          movepos_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.Vector4PB>(facedir_);
          facedir_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_MoveVehicle(C2B_MoveVehicle other) : this() {
          entityid_ = other.entityid_;
          Movepos = other.movepos_ != null ? other.Movepos.Clone() : null;
          Facedir = other.facedir_ != null ? other.Facedir.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_MoveVehicle Clone() {
          return new C2B_MoveVehicle(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "movepos" field.</summary>
        public const int MoveposFieldNumber = 2;
        private global::Pb.Vector3PB movepos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Movepos {
          get { return movepos_; }
          set {
            movepos_ = value;
          }
        }

        /// <summary>Field number for the "facedir" field.</summary>
        public const int FacedirFieldNumber = 3;
        private global::Pb.Vector4PB facedir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector4PB Facedir {
          get { return facedir_; }
          set {
            facedir_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_MoveVehicle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_MoveVehicle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (!object.Equals(Movepos, other.Movepos)) return false;
          if (!object.Equals(Facedir, other.Facedir)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (movepos_ != null) hash ^= Movepos.GetHashCode();
          if (facedir_ != null) hash ^= Facedir.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (movepos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Movepos);
          }
          if (facedir_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Facedir);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (movepos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movepos);
          }
          if (facedir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Facedir);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_MoveVehicle other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.movepos_ != null) {
            if (movepos_ == null) {
              movepos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Movepos.MergeFrom(other.Movepos);
          }
          if (other.facedir_ != null) {
            if (facedir_ == null) {
              facedir_ = pb.ProtobufManager.New<global::Pb.Vector4PB>();
            }
            Facedir.MergeFrom(other.Facedir);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 18: {
                if (movepos_ == null) {
                  movepos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(movepos_);
                break;
              }
              case 26: {
                if (facedir_ == null) {
                  facedir_ = pb.ProtobufManager.New<global::Pb.Vector4PB>();
                }
                input.ReadMessage(facedir_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_SendItemToSharePack : pb::IMessage<C2B_SendItemToSharePack> {
        private static readonly pb::MessageParser<C2B_SendItemToSharePack> _parser = new pb::MessageParser<C2B_SendItemToSharePack>(() => pb.ProtobufManager.New<C2B_SendItemToSharePack>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_SendItemToSharePack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SendItemToSharePack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SendItemToSharePack(C2B_SendItemToSharePack other) : this() {
          itemuid_ = other.itemuid_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SendItemToSharePack Clone() {
          return new C2B_SendItemToSharePack(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_SendItemToSharePack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_SendItemToSharePack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_SendItemToSharePack other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_SendItemFromEquipment : pb::IMessage<C2B_SendItemFromEquipment> {
        private static readonly pb::MessageParser<C2B_SendItemFromEquipment> _parser = new pb::MessageParser<C2B_SendItemFromEquipment>(() => pb.ProtobufManager.New<C2B_SendItemFromEquipment>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_SendItemFromEquipment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SendItemFromEquipment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SendItemFromEquipment(C2B_SendItemFromEquipment other) : this() {
          itemuid_ = other.itemuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SendItemFromEquipment Clone() {
          return new C2B_SendItemFromEquipment(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_SendItemFromEquipment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_SendItemFromEquipment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_SendItemFromEquipment other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_PickItemFromSharePack : pb::IMessage<C2B_PickItemFromSharePack> {
        private static readonly pb::MessageParser<C2B_PickItemFromSharePack> _parser = new pb::MessageParser<C2B_PickItemFromSharePack>(() => pb.ProtobufManager.New<C2B_PickItemFromSharePack>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_PickItemFromSharePack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickItemFromSharePack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Num = 0;
          Ownerid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickItemFromSharePack(C2B_PickItemFromSharePack other) : this() {
          itemuid_ = other.itemuid_;
          num_ = other.num_;
          ownerid_ = other.ownerid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickItemFromSharePack Clone() {
          return new C2B_PickItemFromSharePack(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        /// <summary>Field number for the "ownerid" field.</summary>
        public const int OwneridFieldNumber = 3;
        private ulong ownerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Ownerid {
          get { return ownerid_; }
          set {
            ownerid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_PickItemFromSharePack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_PickItemFromSharePack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          if (Ownerid != other.Ownerid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          if (Ownerid != 0UL) hash ^= Ownerid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
          if (Ownerid != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Ownerid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (Ownerid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ownerid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_PickItemFromSharePack other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          if (other.Ownerid != 0UL) {
            Ownerid = other.Ownerid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
              case 24: {
                Ownerid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_FallGround : pb::IMessage<C2B_FallGround> {
        private static readonly pb::MessageParser<C2B_FallGround> _parser = new pb::MessageParser<C2B_FallGround>(() => pb.ProtobufManager.New<C2B_FallGround>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_FallGround> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_FallGround() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_FallGround(C2B_FallGround other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_FallGround Clone() {
          return new C2B_FallGround(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_FallGround);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_FallGround other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_FallGround other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class C2B_ClimbEffect : pb::IMessage<C2B_ClimbEffect> {
        private static readonly pb::MessageParser<C2B_ClimbEffect> _parser = new pb::MessageParser<C2B_ClimbEffect>(() => pb.ProtobufManager.New<C2B_ClimbEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ClimbEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ClimbEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(climbpos_);
          climbpos_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(climbdir_);
          climbdir_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ClimbEffect(C2B_ClimbEffect other) : this() {
          Climbpos = other.climbpos_ != null ? other.Climbpos.Clone() : null;
          Climbdir = other.climbdir_ != null ? other.Climbdir.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ClimbEffect Clone() {
          return new C2B_ClimbEffect(this);
        }

        /// <summary>Field number for the "climbpos" field.</summary>
        public const int ClimbposFieldNumber = 1;
        private global::Pb.Vector3PB climbpos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Climbpos {
          get { return climbpos_; }
          set {
            climbpos_ = value;
          }
        }

        /// <summary>Field number for the "climbdir" field.</summary>
        public const int ClimbdirFieldNumber = 2;
        private global::Pb.Vector3PB climbdir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Climbdir {
          get { return climbdir_; }
          set {
            climbdir_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ClimbEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ClimbEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Climbpos, other.Climbpos)) return false;
          if (!object.Equals(Climbdir, other.Climbdir)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (climbpos_ != null) hash ^= Climbpos.GetHashCode();
          if (climbdir_ != null) hash ^= Climbdir.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (climbpos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Climbpos);
          }
          if (climbdir_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Climbdir);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (climbpos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Climbpos);
          }
          if (climbdir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Climbdir);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ClimbEffect other) {
          if (other == null) {
            return;
          }
          if (other.climbpos_ != null) {
            if (climbpos_ == null) {
              climbpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Climbpos.MergeFrom(other.Climbpos);
          }
          if (other.climbdir_ != null) {
            if (climbdir_ == null) {
              climbdir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Climbdir.MergeFrom(other.Climbdir);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (climbpos_ == null) {
                  climbpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(climbpos_);
                break;
              }
              case 18: {
                if (climbdir_ == null) {
                  climbdir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(climbdir_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_SkillState : pb::IMessage<C2B_SkillState> {
        private static readonly pb::MessageParser<C2B_SkillState> _parser = new pb::MessageParser<C2B_SkillState>(() => pb.ProtobufManager.New<C2B_SkillState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_SkillState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SkillState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.SkillStateData>(skillstatedata_);
          skillstatedata_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SkillState(C2B_SkillState other) : this() {
          Skillstatedata = other.skillstatedata_ != null ? other.Skillstatedata.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SkillState Clone() {
          return new C2B_SkillState(this);
        }

        /// <summary>Field number for the "skillstatedata" field.</summary>
        public const int SkillstatedataFieldNumber = 1;
        private global::Pb.SkillStateData skillstatedata_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.SkillStateData Skillstatedata {
          get { return skillstatedata_; }
          set {
            skillstatedata_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_SkillState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_SkillState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Skillstatedata, other.Skillstatedata)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (skillstatedata_ != null) hash ^= Skillstatedata.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (skillstatedata_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Skillstatedata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (skillstatedata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skillstatedata);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_SkillState other) {
          if (other == null) {
            return;
          }
          if (other.skillstatedata_ != null) {
            if (skillstatedata_ == null) {
              skillstatedata_ = pb.ProtobufManager.New<global::Pb.SkillStateData>();
            }
            Skillstatedata.MergeFrom(other.Skillstatedata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (skillstatedata_ == null) {
                  skillstatedata_ = pb.ProtobufManager.New<global::Pb.SkillStateData>();
                }
                input.ReadMessage(skillstatedata_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_SightInfo : pb::IMessage<C2B_SightInfo> {
        private static readonly pb::MessageParser<C2B_SightInfo> _parser = new pb::MessageParser<C2B_SightInfo>(() => pb.ProtobufManager.New<C2B_SightInfo>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_SightInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SightInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Distance = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SightInfo(C2B_SightInfo other) : this() {
          distance_ = other.distance_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_SightInfo Clone() {
          return new C2B_SightInfo(this);
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 1;
        private float distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_SightInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_SightInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Distance != other.Distance) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Distance != 0F) hash ^= Distance.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Distance != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Distance);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Distance != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_SightInfo other) {
          if (other == null) {
            return;
          }
          if (other.Distance != 0F) {
            Distance = other.Distance;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                Distance = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_OpBlast : pb::IMessage<C2B_OpBlast> {
        private static readonly pb::MessageParser<C2B_OpBlast> _parser = new pb::MessageParser<C2B_OpBlast>(() => pb.ProtobufManager.New<C2B_OpBlast>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_OpBlast> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OpBlast() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          Open = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OpBlast(C2B_OpBlast other) : this() {
          entityid_ = other.entityid_;
          open_ = other.open_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_OpBlast Clone() {
          return new C2B_OpBlast(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 2;
        private bool open_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_OpBlast);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_OpBlast other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (Open != other.Open) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Open != false) hash ^= Open.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (Open != false) {
            output.WriteRawTag(16);
            output.WriteBool(Open);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Open != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_OpBlast other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Open != false) {
            Open = other.Open;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 16: {
                Open = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_DesEnterHouse : pb::IMessage<C2B_DesEnterHouse> {
        private static readonly pb::MessageParser<C2B_DesEnterHouse> _parser = new pb::MessageParser<C2B_DesEnterHouse>(() => pb.ProtobufManager.New<C2B_DesEnterHouse>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_DesEnterHouse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DesEnterHouse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DesEnterHouse(C2B_DesEnterHouse other) : this() {
          entityid_ = other.entityid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_DesEnterHouse Clone() {
          return new C2B_DesEnterHouse(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_DesEnterHouse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_DesEnterHouse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_DesEnterHouse other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_ShieldSkill : pb::IMessage<C2B_ShieldSkill> {
        private static readonly pb::MessageParser<C2B_ShieldSkill> _parser = new pb::MessageParser<C2B_ShieldSkill>(() => pb.ProtobufManager.New<C2B_ShieldSkill>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ShieldSkill> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ShieldSkill() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Skillid = 0;
          State = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ShieldSkill(C2B_ShieldSkill other) : this() {
          skillid_ = other.skillid_;
          state_ = other.state_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ShieldSkill Clone() {
          return new C2B_ShieldSkill(this);
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private uint state_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ShieldSkill);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ShieldSkill other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Skillid != other.Skillid) return false;
          if (State != other.State) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
          if (State != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(State);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ShieldSkill other) {
          if (other == null) {
            return;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.State != 0) {
            State = other.State;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 16: {
                State = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_Gamble : pb::IMessage<C2B_Gamble> {
        private static readonly pb::MessageParser<C2B_Gamble> _parser = new pb::MessageParser<C2B_Gamble>(() => pb.ProtobufManager.New<C2B_Gamble>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_Gamble> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Gamble() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Gamble(C2B_Gamble other) : this() {
          itemuid_ = other.itemuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_Gamble Clone() {
          return new C2B_Gamble(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_Gamble);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_Gamble other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_Gamble other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_WarningEffect : pb::IMessage<C2B_WarningEffect> {
        private static readonly pb::MessageParser<C2B_WarningEffect> _parser = new pb::MessageParser<C2B_WarningEffect>(() => pb.ProtobufManager.New<C2B_WarningEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_WarningEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WarningEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
          Skillid = 0;
          Lifetime = 0;
          Radius = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WarningEffect(C2B_WarningEffect other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          skillid_ = other.skillid_;
          lifetime_ = other.lifetime_;
          radius_ = other.radius_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WarningEffect Clone() {
          return new C2B_WarningEffect(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 4;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "lifetime" field.</summary>
        public const int LifetimeFieldNumber = 5;
        private int lifetime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lifetime {
          get { return lifetime_; }
          set {
            lifetime_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 6;
        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_WarningEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_WarningEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          if (Skillid != other.Skillid) return false;
          if (Lifetime != other.Lifetime) return false;
          if (Radius != other.Radius) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Lifetime != 0) hash ^= Lifetime.GetHashCode();
          if (Radius != 0F) hash ^= Radius.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (Skillid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Skillid);
          }
          if (Lifetime != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Lifetime);
          }
          if (Radius != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(Radius);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Lifetime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lifetime);
          }
          if (Radius != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_WarningEffect other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Lifetime != 0) {
            Lifetime = other.Lifetime;
          }
          if (other.Radius != 0F) {
            Radius = other.Radius;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
              case 32: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 40: {
                Lifetime = input.ReadInt32();
                break;
              }
              case 53: {
                Radius = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_PickGroundItem : pb::IMessage<C2B_PickGroundItem> {
        private static readonly pb::MessageParser<C2B_PickGroundItem> _parser = new pb::MessageParser<C2B_PickGroundItem>(() => pb.ProtobufManager.New<C2B_PickGroundItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_PickGroundItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickGroundItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          Tobackpack = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickGroundItem(C2B_PickGroundItem other) : this() {
          entityid_ = other.entityid_;
          tobackpack_ = other.tobackpack_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_PickGroundItem Clone() {
          return new C2B_PickGroundItem(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "tobackpack" field.</summary>
        public const int TobackpackFieldNumber = 2;
        private bool tobackpack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Tobackpack {
          get { return tobackpack_; }
          set {
            tobackpack_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_PickGroundItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_PickGroundItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (Tobackpack != other.Tobackpack) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Tobackpack != false) hash ^= Tobackpack.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (Tobackpack != false) {
            output.WriteRawTag(16);
            output.WriteBool(Tobackpack);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Tobackpack != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_PickGroundItem other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Tobackpack != false) {
            Tobackpack = other.Tobackpack;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 16: {
                Tobackpack = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_ExchangeCore : pb::IMessage<C2B_ExchangeCore> {
        private static readonly pb::MessageParser<C2B_ExchangeCore> _parser = new pb::MessageParser<C2B_ExchangeCore>(() => pb.ProtobufManager.New<C2B_ExchangeCore>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ExchangeCore> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ExchangeCore() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          DstIdx = 0;
          SrcIdx = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ExchangeCore(C2B_ExchangeCore other) : this() {
          dstIdx_ = other.dstIdx_;
          srcIdx_ = other.srcIdx_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ExchangeCore Clone() {
          return new C2B_ExchangeCore(this);
        }

        /// <summary>Field number for the "dstIdx" field.</summary>
        public const int DstIdxFieldNumber = 1;
        private int dstIdx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DstIdx {
          get { return dstIdx_; }
          set {
            dstIdx_ = value;
          }
        }

        /// <summary>Field number for the "srcIdx" field.</summary>
        public const int SrcIdxFieldNumber = 2;
        private int srcIdx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SrcIdx {
          get { return srcIdx_; }
          set {
            srcIdx_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ExchangeCore);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ExchangeCore other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DstIdx != other.DstIdx) return false;
          if (SrcIdx != other.SrcIdx) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DstIdx != 0) hash ^= DstIdx.GetHashCode();
          if (SrcIdx != 0) hash ^= SrcIdx.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DstIdx != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DstIdx);
          }
          if (SrcIdx != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(SrcIdx);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DstIdx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstIdx);
          }
          if (SrcIdx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcIdx);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ExchangeCore other) {
          if (other == null) {
            return;
          }
          if (other.DstIdx != 0) {
            DstIdx = other.DstIdx;
          }
          if (other.SrcIdx != 0) {
            SrcIdx = other.SrcIdx;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DstIdx = input.ReadInt32();
                break;
              }
              case 16: {
                SrcIdx = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_ClickNpc : pb::IMessage<C2B_ClickNpc> {
        private static readonly pb::MessageParser<C2B_ClickNpc> _parser = new pb::MessageParser<C2B_ClickNpc>(() => pb.ProtobufManager.New<C2B_ClickNpc>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_ClickNpc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ClickNpc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Npcuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ClickNpc(C2B_ClickNpc other) : this() {
          npcuid_ = other.npcuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_ClickNpc Clone() {
          return new C2B_ClickNpc(this);
        }

        /// <summary>Field number for the "npcuid" field.</summary>
        public const int NpcuidFieldNumber = 1;
        private ulong npcuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Npcuid {
          get { return npcuid_; }
          set {
            npcuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_ClickNpc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_ClickNpc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Npcuid != other.Npcuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Npcuid != 0UL) hash ^= Npcuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Npcuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Npcuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Npcuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_ClickNpc other) {
          if (other == null) {
            return;
          }
          if (other.Npcuid != 0UL) {
            Npcuid = other.Npcuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Npcuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_CatchNpc : pb::IMessage<C2B_CatchNpc> {
        private static readonly pb::MessageParser<C2B_CatchNpc> _parser = new pb::MessageParser<C2B_CatchNpc>(() => pb.ProtobufManager.New<C2B_CatchNpc>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_CatchNpc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_CatchNpc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Uuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_CatchNpc(C2B_CatchNpc other) : this() {
          uuid_ = other.uuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_CatchNpc Clone() {
          return new C2B_CatchNpc(this);
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 1;
        private ulong uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Uuid {
          get { return uuid_; }
          set {
            uuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_CatchNpc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_CatchNpc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uuid != other.Uuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Uuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_CatchNpc other) {
          if (other == null) {
            return;
          }
          if (other.Uuid != 0UL) {
            Uuid = other.Uuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_EquipGroundItem : pb::IMessage<C2B_EquipGroundItem> {
        private static readonly pb::MessageParser<C2B_EquipGroundItem> _parser = new pb::MessageParser<C2B_EquipGroundItem>(() => pb.ProtobufManager.New<C2B_EquipGroundItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_EquipGroundItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipGroundItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Index = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipGroundItem(C2B_EquipGroundItem other) : this() {
          itemuid_ = other.itemuid_;
          index_ = other.index_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_EquipGroundItem Clone() {
          return new C2B_EquipGroundItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private global::Pb.PackagePosType index_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.PackagePosType Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 3;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_EquipGroundItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_EquipGroundItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Index != other.Index) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Index);
          }
          if (Num != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Index);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_EquipGroundItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                index_ = (global::Pb.PackagePosType) input.ReadEnum();
                break;
              }
              case 24: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_NpcGameble : pb::IMessage<C2B_NpcGameble> {
        private static readonly pb::MessageParser<C2B_NpcGameble> _parser = new pb::MessageParser<C2B_NpcGameble>(() => pb.ProtobufManager.New<C2B_NpcGameble>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_NpcGameble> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[43]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcGameble() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Npcuid = 0;
          Index = 0;
          Leave = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcGameble(C2B_NpcGameble other) : this() {
          npcuid_ = other.npcuid_;
          index_ = other.index_;
          leave_ = other.leave_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcGameble Clone() {
          return new C2B_NpcGameble(this);
        }

        /// <summary>Field number for the "npcuid" field.</summary>
        public const int NpcuidFieldNumber = 1;
        private ulong npcuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Npcuid {
          get { return npcuid_; }
          set {
            npcuid_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "leave" field.</summary>
        public const int LeaveFieldNumber = 3;
        private bool leave_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Leave {
          get { return leave_; }
          set {
            leave_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_NpcGameble);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_NpcGameble other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Npcuid != other.Npcuid) return false;
          if (Index != other.Index) return false;
          if (Leave != other.Leave) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Npcuid != 0UL) hash ^= Npcuid.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Leave != false) hash ^= Leave.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Npcuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Npcuid);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Index);
          }
          if (Leave != false) {
            output.WriteRawTag(24);
            output.WriteBool(Leave);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Npcuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcuid);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          if (Leave != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_NpcGameble other) {
          if (other == null) {
            return;
          }
          if (other.Npcuid != 0UL) {
            Npcuid = other.Npcuid;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Leave != false) {
            Leave = other.Leave;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Npcuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Index = input.ReadInt32();
                break;
              }
              case 24: {
                Leave = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_GetGambleBoxItem : pb::IMessage<C2B_GetGambleBoxItem> {
        private static readonly pb::MessageParser<C2B_GetGambleBoxItem> _parser = new pb::MessageParser<C2B_GetGambleBoxItem>(() => pb.ProtobufManager.New<C2B_GetGambleBoxItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_GetGambleBoxItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[44]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_GetGambleBoxItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Drop = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_GetGambleBoxItem(C2B_GetGambleBoxItem other) : this() {
          itemuid_ = other.itemuid_;
          drop_ = other.drop_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_GetGambleBoxItem Clone() {
          return new C2B_GetGambleBoxItem(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "drop" field.</summary>
        public const int DropFieldNumber = 2;
        private bool drop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Drop {
          get { return drop_; }
          set {
            drop_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_GetGambleBoxItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_GetGambleBoxItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Drop != other.Drop) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Drop != false) hash ^= Drop.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Drop != false) {
            output.WriteRawTag(16);
            output.WriteBool(Drop);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Drop != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_GetGambleBoxItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Drop != false) {
            Drop = other.Drop;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Drop = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_NpcSellItem : pb::IMessage<C2B_NpcSellItem> {
        private static readonly pb::MessageParser<C2B_NpcSellItem> _parser = new pb::MessageParser<C2B_NpcSellItem>(() => pb.ProtobufManager.New<C2B_NpcSellItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_NpcSellItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[45]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcSellItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Npcuid = 0;
          Itemuid = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcSellItem(C2B_NpcSellItem other) : this() {
          npcuid_ = other.npcuid_;
          itemuid_ = other.itemuid_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcSellItem Clone() {
          return new C2B_NpcSellItem(this);
        }

        /// <summary>Field number for the "npcuid" field.</summary>
        public const int NpcuidFieldNumber = 1;
        private ulong npcuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Npcuid {
          get { return npcuid_; }
          set {
            npcuid_ = value;
          }
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 2;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 3;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_NpcSellItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_NpcSellItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Npcuid != other.Npcuid) return false;
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Npcuid != 0UL) hash ^= Npcuid.GetHashCode();
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Npcuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Npcuid);
          }
          if (Itemuid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Npcuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcuid);
          }
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_NpcSellItem other) {
          if (other == null) {
            return;
          }
          if (other.Npcuid != 0UL) {
            Npcuid = other.Npcuid;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Npcuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 24: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_NpcLevelUpItem : pb::IMessage<C2B_NpcLevelUpItem> {
        private static readonly pb::MessageParser<C2B_NpcLevelUpItem> _parser = new pb::MessageParser<C2B_NpcLevelUpItem>(() => pb.ProtobufManager.New<C2B_NpcLevelUpItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_NpcLevelUpItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_PlayerCommand.Descriptor.NestedTypes[46]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcLevelUpItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Npcuid = 0;
          Itemuid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcLevelUpItem(C2B_NpcLevelUpItem other) : this() {
          npcuid_ = other.npcuid_;
          itemuid_ = other.itemuid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_NpcLevelUpItem Clone() {
          return new C2B_NpcLevelUpItem(this);
        }

        /// <summary>Field number for the "npcuid" field.</summary>
        public const int NpcuidFieldNumber = 1;
        private ulong npcuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Npcuid {
          get { return npcuid_; }
          set {
            npcuid_ = value;
          }
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 2;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_NpcLevelUpItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_NpcLevelUpItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Npcuid != other.Npcuid) return false;
          if (Itemuid != other.Itemuid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Npcuid != 0UL) hash ^= Npcuid.GetHashCode();
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Npcuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Npcuid);
          }
          if (Itemuid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Itemuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Npcuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcuid);
          }
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_NpcLevelUpItem other) {
          if (other == null) {
            return;
          }
          if (other.Npcuid != 0UL) {
            Npcuid = other.Npcuid;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Npcuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Itemuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class C2B_Frame : pb::IMessage<C2B_Frame> {
    private static readonly pb::MessageParser<C2B_Frame> _parser = new pb::MessageParser<C2B_Frame>(() => pb.ProtobufManager.New<C2B_Frame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Frame = 0;
      FrameRunCache = 0;
      for (int i = 0; i < commands_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.C2B_PlayerCommand>(commands_[i]);
      }
      commands_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Frame(C2B_Frame other) : this() {
      frame_ = other.frame_;
      frameRunCache_ = other.frameRunCache_;
      commands_ = other.commands_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Frame Clone() {
      return new C2B_Frame(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frameRunCache" field.</summary>
    public const int FrameRunCacheFieldNumber = 2;
    private uint frameRunCache_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRunCache {
      get { return frameRunCache_; }
      set {
        frameRunCache_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.C2B_PlayerCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.C2B_PlayerCommand.Parser);
    private readonly pbc::RepeatedField<global::Pb.C2B_PlayerCommand> commands_ = new pbc::RepeatedField<global::Pb.C2B_PlayerCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.C2B_PlayerCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (FrameRunCache != other.FrameRunCache) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (FrameRunCache != 0) hash ^= FrameRunCache.GetHashCode();
      hash ^= commands_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Frame);
      }
      if (FrameRunCache != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameRunCache);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      if (FrameRunCache != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRunCache);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_Frame other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.FrameRunCache != 0) {
        FrameRunCache = other.FrameRunCache;
      }
      commands_.Add(other.commands_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameRunCache = input.ReadUInt32();
            break;
          }
          case 26: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_State : pb::IMessage<B2C_State> {
    private static readonly pb::MessageParser<B2C_State> _parser = new pb::MessageParser<B2C_State>(() => pb.ProtobufManager.New<B2C_State>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_State> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_State() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Frame = 0;
      switch (StateDataCase) {
        case StateDataOneofCase.Move:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Move>(Move);
          Move = null;
          break;
        case StateDataOneofCase.Rotation:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Rotation>(Rotation);
          Rotation = null;
          break;
        case StateDataOneofCase.Hp:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_HP>(Hp);
          Hp = null;
          break;
        case StateDataOneofCase.Live:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Live>(Live);
          Live = null;
          break;
        case StateDataOneofCase.Motion:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Motion>(Motion);
          Motion = null;
          break;
        case StateDataOneofCase.Pos:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Pos>(Pos);
          Pos = null;
          break;
        case StateDataOneofCase.Boxopen:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_BoxOpen>(Boxopen);
          Boxopen = null;
          break;
        case StateDataOneofCase.Planeinfo:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_PlaneState>(Planeinfo);
          Planeinfo = null;
          break;
        case StateDataOneofCase.Maxhp:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_MaxHP>(Maxhp);
          Maxhp = null;
          break;
        case StateDataOneofCase.Equipment:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Equipment>(Equipment);
          Equipment = null;
          break;
        case StateDataOneofCase.Becureeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_BeCureEffect>(Becureeffect);
          Becureeffect = null;
          break;
        case StateDataOneofCase.Cureeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CureEffect>(Cureeffect);
          Cureeffect = null;
          break;
        case StateDataOneofCase.Killeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_KillEffect>(Killeffect);
          Killeffect = null;
          break;
        case StateDataOneofCase.Slowrecovery:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_SlowRecovery>(Slowrecovery);
          Slowrecovery = null;
          break;
        case StateDataOneofCase.Housedata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_HouseData>(Housedata);
          Housedata = null;
          break;
        case StateDataOneofCase.Vehidata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_VehicleState>(Vehidata);
          Vehidata = null;
          break;
        case StateDataOneofCase.Plyvehi:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_PlayerVehicle>(Plyvehi);
          Plyvehi = null;
          break;
        case StateDataOneofCase.Boxtype:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_BoxType>(Boxtype);
          Boxtype = null;
          break;
        case StateDataOneofCase.Package:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Package>(Package);
          Package = null;
          break;
        case StateDataOneofCase.Flystate:
          Flystate = 0;
          break;
        case StateDataOneofCase.Bullet:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Bullet>(Bullet);
          Bullet = null;
          break;
        case StateDataOneofCase.Weapon:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Weapon>(Weapon);
          Weapon = null;
          break;
        case StateDataOneofCase.Aiming:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Aiming>(Aiming);
          Aiming = null;
          break;
        case StateDataOneofCase.Reloadeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_ReloadEffect>(Reloadeffect);
          Reloadeffect = null;
          break;
        case StateDataOneofCase.Recovering:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_RecoveryEffect>(Recovering);
          Recovering = null;
          break;
        case StateDataOneofCase.Grenade:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_GrenadeData>(Grenade);
          Grenade = null;
          break;
        case StateDataOneofCase.Shield:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Shield>(Shield);
          Shield = null;
          break;
        case StateDataOneofCase.Endurance:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Endurance>(Endurance);
          Endurance = null;
          break;
        case StateDataOneofCase.Shieldstate:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_ShieldState>(Shieldstate);
          Shieldstate = null;
          break;
        case StateDataOneofCase.Outlook:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Outlook>(Outlook);
          Outlook = null;
          break;
        case StateDataOneofCase.Superheat:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Superheat>(Superheat);
          Superheat = null;
          break;
        case StateDataOneofCase.Plystate:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_PlyState>(Plystate);
          Plystate = null;
          break;
        case StateDataOneofCase.Gamble:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Gamble>(Gamble);
          Gamble = null;
          break;
        case StateDataOneofCase.Monsterstate:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_MonsterState>(Monsterstate);
          Monsterstate = null;
          break;
        case StateDataOneofCase.Blockshield:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_BlockShieldData>(Blockshield);
          Blockshield = null;
          break;
        case StateDataOneofCase.Shopdata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Shop>(Shopdata);
          Shopdata = null;
          break;
        case StateDataOneofCase.Characterproperty:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CharacterProperty>(Characterproperty);
          Characterproperty = null;
          break;
        case StateDataOneofCase.Allproperty:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CharacterProperty>(Allproperty);
          Allproperty = null;
          break;
        case StateDataOneofCase.Changeenergy:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_ChargeEnergy>(Changeenergy);
          Changeenergy = null;
          break;
        case StateDataOneofCase.Initfeatures:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_InitFeatures>(Initfeatures);
          Initfeatures = null;
          break;
        case StateDataOneofCase.Grounditem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_GroundItem>(Grounditem);
          Grounditem = null;
          break;
        case StateDataOneofCase.Npc:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_Npc>(Npc);
          Npc = null;
          break;
        case StateDataOneofCase.Movetrigger:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_MoveTriggerData>(Movetrigger);
          Movetrigger = null;
          break;
        case StateDataOneofCase.Powerclip:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_PowerClip>(Powerclip);
          Powerclip = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_State(B2C_State other) : this() {
      frame_ = other.frame_;
      switch (other.StateDataCase) {
        case StateDataOneofCase.Move:
          Move = other.Move.Clone();
          break;
        case StateDataOneofCase.Rotation:
          Rotation = other.Rotation.Clone();
          break;
        case StateDataOneofCase.Hp:
          Hp = other.Hp.Clone();
          break;
        case StateDataOneofCase.Live:
          Live = other.Live.Clone();
          break;
        case StateDataOneofCase.Motion:
          Motion = other.Motion.Clone();
          break;
        case StateDataOneofCase.Pos:
          Pos = other.Pos.Clone();
          break;
        case StateDataOneofCase.Boxopen:
          Boxopen = other.Boxopen.Clone();
          break;
        case StateDataOneofCase.Planeinfo:
          Planeinfo = other.Planeinfo.Clone();
          break;
        case StateDataOneofCase.Maxhp:
          Maxhp = other.Maxhp.Clone();
          break;
        case StateDataOneofCase.Equipment:
          Equipment = other.Equipment.Clone();
          break;
        case StateDataOneofCase.Becureeffect:
          Becureeffect = other.Becureeffect.Clone();
          break;
        case StateDataOneofCase.Cureeffect:
          Cureeffect = other.Cureeffect.Clone();
          break;
        case StateDataOneofCase.Killeffect:
          Killeffect = other.Killeffect.Clone();
          break;
        case StateDataOneofCase.Slowrecovery:
          Slowrecovery = other.Slowrecovery.Clone();
          break;
        case StateDataOneofCase.Housedata:
          Housedata = other.Housedata.Clone();
          break;
        case StateDataOneofCase.Vehidata:
          Vehidata = other.Vehidata.Clone();
          break;
        case StateDataOneofCase.Plyvehi:
          Plyvehi = other.Plyvehi.Clone();
          break;
        case StateDataOneofCase.Boxtype:
          Boxtype = other.Boxtype.Clone();
          break;
        case StateDataOneofCase.Package:
          Package = other.Package.Clone();
          break;
        case StateDataOneofCase.Flystate:
          Flystate = other.Flystate;
          break;
        case StateDataOneofCase.Bullet:
          Bullet = other.Bullet.Clone();
          break;
        case StateDataOneofCase.Weapon:
          Weapon = other.Weapon.Clone();
          break;
        case StateDataOneofCase.Aiming:
          Aiming = other.Aiming.Clone();
          break;
        case StateDataOneofCase.Reloadeffect:
          Reloadeffect = other.Reloadeffect.Clone();
          break;
        case StateDataOneofCase.Recovering:
          Recovering = other.Recovering.Clone();
          break;
        case StateDataOneofCase.Grenade:
          Grenade = other.Grenade.Clone();
          break;
        case StateDataOneofCase.Shield:
          Shield = other.Shield.Clone();
          break;
        case StateDataOneofCase.Endurance:
          Endurance = other.Endurance.Clone();
          break;
        case StateDataOneofCase.Shieldstate:
          Shieldstate = other.Shieldstate.Clone();
          break;
        case StateDataOneofCase.Outlook:
          Outlook = other.Outlook.Clone();
          break;
        case StateDataOneofCase.Superheat:
          Superheat = other.Superheat.Clone();
          break;
        case StateDataOneofCase.Plystate:
          Plystate = other.Plystate.Clone();
          break;
        case StateDataOneofCase.Gamble:
          Gamble = other.Gamble.Clone();
          break;
        case StateDataOneofCase.Monsterstate:
          Monsterstate = other.Monsterstate.Clone();
          break;
        case StateDataOneofCase.Blockshield:
          Blockshield = other.Blockshield.Clone();
          break;
        case StateDataOneofCase.Shopdata:
          Shopdata = other.Shopdata.Clone();
          break;
        case StateDataOneofCase.Characterproperty:
          Characterproperty = other.Characterproperty.Clone();
          break;
        case StateDataOneofCase.Allproperty:
          Allproperty = other.Allproperty.Clone();
          break;
        case StateDataOneofCase.Changeenergy:
          Changeenergy = other.Changeenergy.Clone();
          break;
        case StateDataOneofCase.Initfeatures:
          Initfeatures = other.Initfeatures.Clone();
          break;
        case StateDataOneofCase.Grounditem:
          Grounditem = other.Grounditem.Clone();
          break;
        case StateDataOneofCase.Npc:
          Npc = other.Npc.Clone();
          break;
        case StateDataOneofCase.Movetrigger:
          Movetrigger = other.Movetrigger.Clone();
          break;
        case StateDataOneofCase.Powerclip:
          Powerclip = other.Powerclip.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_State Clone() {
      return new B2C_State(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Move Move {
      get { return stateDataCase_ == StateDataOneofCase.Move ? (global::Pb.B2C_State.Types.B2C_Move) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Move;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Rotation Rotation {
      get { return stateDataCase_ == StateDataOneofCase.Rotation ? (global::Pb.B2C_State.Types.B2C_Rotation) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Rotation;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_HP Hp {
      get { return stateDataCase_ == StateDataOneofCase.Hp ? (global::Pb.B2C_State.Types.B2C_HP) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Hp;
      }
    }

    /// <summary>Field number for the "live" field.</summary>
    public const int LiveFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Live Live {
      get { return stateDataCase_ == StateDataOneofCase.Live ? (global::Pb.B2C_State.Types.B2C_Live) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Live;
      }
    }

    /// <summary>Field number for the "motion" field.</summary>
    public const int MotionFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Motion Motion {
      get { return stateDataCase_ == StateDataOneofCase.Motion ? (global::Pb.B2C_State.Types.B2C_Motion) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Motion;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Pos Pos {
      get { return stateDataCase_ == StateDataOneofCase.Pos ? (global::Pb.B2C_State.Types.B2C_Pos) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Pos;
      }
    }

    /// <summary>Field number for the "boxopen" field.</summary>
    public const int BoxopenFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_BoxOpen Boxopen {
      get { return stateDataCase_ == StateDataOneofCase.Boxopen ? (global::Pb.B2C_State.Types.B2C_BoxOpen) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Boxopen;
      }
    }

    /// <summary>Field number for the "planeinfo" field.</summary>
    public const int PlaneinfoFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_PlaneState Planeinfo {
      get { return stateDataCase_ == StateDataOneofCase.Planeinfo ? (global::Pb.B2C_State.Types.B2C_PlaneState) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Planeinfo;
      }
    }

    /// <summary>Field number for the "maxhp" field.</summary>
    public const int MaxhpFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_MaxHP Maxhp {
      get { return stateDataCase_ == StateDataOneofCase.Maxhp ? (global::Pb.B2C_State.Types.B2C_MaxHP) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Maxhp;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Equipment Equipment {
      get { return stateDataCase_ == StateDataOneofCase.Equipment ? (global::Pb.B2C_State.Types.B2C_Equipment) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Equipment;
      }
    }

    /// <summary>Field number for the "becureeffect" field.</summary>
    public const int BecureeffectFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_BeCureEffect Becureeffect {
      get { return stateDataCase_ == StateDataOneofCase.Becureeffect ? (global::Pb.B2C_State.Types.B2C_BeCureEffect) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Becureeffect;
      }
    }

    /// <summary>Field number for the "cureeffect" field.</summary>
    public const int CureeffectFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_CureEffect Cureeffect {
      get { return stateDataCase_ == StateDataOneofCase.Cureeffect ? (global::Pb.B2C_State.Types.B2C_CureEffect) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Cureeffect;
      }
    }

    /// <summary>Field number for the "killeffect" field.</summary>
    public const int KilleffectFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_KillEffect Killeffect {
      get { return stateDataCase_ == StateDataOneofCase.Killeffect ? (global::Pb.B2C_State.Types.B2C_KillEffect) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Killeffect;
      }
    }

    /// <summary>Field number for the "slowrecovery" field.</summary>
    public const int SlowrecoveryFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_SlowRecovery Slowrecovery {
      get { return stateDataCase_ == StateDataOneofCase.Slowrecovery ? (global::Pb.B2C_State.Types.B2C_SlowRecovery) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Slowrecovery;
      }
    }

    /// <summary>Field number for the "housedata" field.</summary>
    public const int HousedataFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_HouseData Housedata {
      get { return stateDataCase_ == StateDataOneofCase.Housedata ? (global::Pb.B2C_State.Types.B2C_HouseData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Housedata;
      }
    }

    /// <summary>Field number for the "vehidata" field.</summary>
    public const int VehidataFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_VehicleState Vehidata {
      get { return stateDataCase_ == StateDataOneofCase.Vehidata ? (global::Pb.B2C_State.Types.B2C_VehicleState) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Vehidata;
      }
    }

    /// <summary>Field number for the "plyvehi" field.</summary>
    public const int PlyvehiFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_PlayerVehicle Plyvehi {
      get { return stateDataCase_ == StateDataOneofCase.Plyvehi ? (global::Pb.B2C_State.Types.B2C_PlayerVehicle) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Plyvehi;
      }
    }

    /// <summary>Field number for the "boxtype" field.</summary>
    public const int BoxtypeFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_BoxType Boxtype {
      get { return stateDataCase_ == StateDataOneofCase.Boxtype ? (global::Pb.B2C_State.Types.B2C_BoxType) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Boxtype;
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Package Package {
      get { return stateDataCase_ == StateDataOneofCase.Package ? (global::Pb.B2C_State.Types.B2C_Package) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Package;
      }
    }

    /// <summary>Field number for the "flystate" field.</summary>
    public const int FlystateFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.FlyStateType Flystate {
      get { return stateDataCase_ == StateDataOneofCase.Flystate ? (global::Pb.FlyStateType) stateData_ : 0; }
      set {
        stateData_ = value;
        stateDataCase_ = StateDataOneofCase.Flystate;
      }
    }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Bullet Bullet {
      get { return stateDataCase_ == StateDataOneofCase.Bullet ? (global::Pb.B2C_State.Types.B2C_Bullet) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Bullet;
      }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Weapon Weapon {
      get { return stateDataCase_ == StateDataOneofCase.Weapon ? (global::Pb.B2C_State.Types.B2C_Weapon) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Weapon;
      }
    }

    /// <summary>Field number for the "aiming" field.</summary>
    public const int AimingFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Aiming Aiming {
      get { return stateDataCase_ == StateDataOneofCase.Aiming ? (global::Pb.B2C_State.Types.B2C_Aiming) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Aiming;
      }
    }

    /// <summary>Field number for the "reloadeffect" field.</summary>
    public const int ReloadeffectFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_ReloadEffect Reloadeffect {
      get { return stateDataCase_ == StateDataOneofCase.Reloadeffect ? (global::Pb.B2C_State.Types.B2C_ReloadEffect) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Reloadeffect;
      }
    }

    /// <summary>Field number for the "recovering" field.</summary>
    public const int RecoveringFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_RecoveryEffect Recovering {
      get { return stateDataCase_ == StateDataOneofCase.Recovering ? (global::Pb.B2C_State.Types.B2C_RecoveryEffect) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Recovering;
      }
    }

    /// <summary>Field number for the "grenade" field.</summary>
    public const int GrenadeFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_GrenadeData Grenade {
      get { return stateDataCase_ == StateDataOneofCase.Grenade ? (global::Pb.B2C_State.Types.B2C_GrenadeData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Grenade;
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Shield Shield {
      get { return stateDataCase_ == StateDataOneofCase.Shield ? (global::Pb.B2C_State.Types.B2C_Shield) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Shield;
      }
    }

    /// <summary>Field number for the "endurance" field.</summary>
    public const int EnduranceFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Endurance Endurance {
      get { return stateDataCase_ == StateDataOneofCase.Endurance ? (global::Pb.B2C_State.Types.B2C_Endurance) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Endurance;
      }
    }

    /// <summary>Field number for the "shieldstate" field.</summary>
    public const int ShieldstateFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_ShieldState Shieldstate {
      get { return stateDataCase_ == StateDataOneofCase.Shieldstate ? (global::Pb.B2C_State.Types.B2C_ShieldState) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Shieldstate;
      }
    }

    /// <summary>Field number for the "outlook" field.</summary>
    public const int OutlookFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Outlook Outlook {
      get { return stateDataCase_ == StateDataOneofCase.Outlook ? (global::Pb.B2C_State.Types.B2C_Outlook) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Outlook;
      }
    }

    /// <summary>Field number for the "superheat" field.</summary>
    public const int SuperheatFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Superheat Superheat {
      get { return stateDataCase_ == StateDataOneofCase.Superheat ? (global::Pb.B2C_State.Types.B2C_Superheat) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Superheat;
      }
    }

    /// <summary>Field number for the "plystate" field.</summary>
    public const int PlystateFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_PlyState Plystate {
      get { return stateDataCase_ == StateDataOneofCase.Plystate ? (global::Pb.B2C_State.Types.B2C_PlyState) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Plystate;
      }
    }

    /// <summary>Field number for the "gamble" field.</summary>
    public const int GambleFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Gamble Gamble {
      get { return stateDataCase_ == StateDataOneofCase.Gamble ? (global::Pb.B2C_State.Types.B2C_Gamble) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Gamble;
      }
    }

    /// <summary>Field number for the "monsterstate" field.</summary>
    public const int MonsterstateFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_MonsterState Monsterstate {
      get { return stateDataCase_ == StateDataOneofCase.Monsterstate ? (global::Pb.B2C_State.Types.B2C_MonsterState) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Monsterstate;
      }
    }

    /// <summary>Field number for the "blockshield" field.</summary>
    public const int BlockshieldFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_BlockShieldData Blockshield {
      get { return stateDataCase_ == StateDataOneofCase.Blockshield ? (global::Pb.B2C_State.Types.B2C_BlockShieldData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Blockshield;
      }
    }

    /// <summary>Field number for the "shopdata" field.</summary>
    public const int ShopdataFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Shop Shopdata {
      get { return stateDataCase_ == StateDataOneofCase.Shopdata ? (global::Pb.B2C_State.Types.B2C_Shop) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Shopdata;
      }
    }

    /// <summary>Field number for the "characterproperty" field.</summary>
    public const int CharacterpropertyFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_CharacterProperty Characterproperty {
      get { return stateDataCase_ == StateDataOneofCase.Characterproperty ? (global::Pb.B2C_State.Types.B2C_CharacterProperty) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Characterproperty;
      }
    }

    /// <summary>Field number for the "allproperty" field.</summary>
    public const int AllpropertyFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_CharacterProperty Allproperty {
      get { return stateDataCase_ == StateDataOneofCase.Allproperty ? (global::Pb.B2C_State.Types.B2C_CharacterProperty) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Allproperty;
      }
    }

    /// <summary>Field number for the "changeenergy" field.</summary>
    public const int ChangeenergyFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_ChargeEnergy Changeenergy {
      get { return stateDataCase_ == StateDataOneofCase.Changeenergy ? (global::Pb.B2C_State.Types.B2C_ChargeEnergy) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Changeenergy;
      }
    }

    /// <summary>Field number for the "initfeatures" field.</summary>
    public const int InitfeaturesFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_InitFeatures Initfeatures {
      get { return stateDataCase_ == StateDataOneofCase.Initfeatures ? (global::Pb.B2C_State.Types.B2C_InitFeatures) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Initfeatures;
      }
    }

    /// <summary>Field number for the "grounditem" field.</summary>
    public const int GrounditemFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_GroundItem Grounditem {
      get { return stateDataCase_ == StateDataOneofCase.Grounditem ? (global::Pb.B2C_State.Types.B2C_GroundItem) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Grounditem;
      }
    }

    /// <summary>Field number for the "npc" field.</summary>
    public const int NpcFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_Npc Npc {
      get { return stateDataCase_ == StateDataOneofCase.Npc ? (global::Pb.B2C_State.Types.B2C_Npc) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Npc;
      }
    }

    /// <summary>Field number for the "movetrigger" field.</summary>
    public const int MovetriggerFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_MoveTriggerData Movetrigger {
      get { return stateDataCase_ == StateDataOneofCase.Movetrigger ? (global::Pb.B2C_State.Types.B2C_MoveTriggerData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Movetrigger;
      }
    }

    /// <summary>Field number for the "powerclip" field.</summary>
    public const int PowerclipFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_State.Types.B2C_PowerClip Powerclip {
      get { return stateDataCase_ == StateDataOneofCase.Powerclip ? (global::Pb.B2C_State.Types.B2C_PowerClip) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Powerclip;
      }
    }

    private object stateData_;
    /// <summary>Enum of possible cases for the "StateData" oneof.</summary>
    public enum StateDataOneofCase {
      None = 0,
      Move = 2,
      Rotation = 3,
      Hp = 4,
      Live = 5,
      Motion = 6,
      Pos = 7,
      Boxopen = 8,
      Planeinfo = 9,
      Maxhp = 10,
      Equipment = 11,
      Becureeffect = 12,
      Cureeffect = 13,
      Killeffect = 14,
      Slowrecovery = 15,
      Housedata = 16,
      Vehidata = 17,
      Plyvehi = 18,
      Boxtype = 19,
      Package = 20,
      Flystate = 21,
      Bullet = 22,
      Weapon = 23,
      Aiming = 24,
      Reloadeffect = 25,
      Recovering = 26,
      Grenade = 27,
      Shield = 28,
      Endurance = 29,
      Shieldstate = 30,
      Outlook = 31,
      Superheat = 32,
      Plystate = 33,
      Gamble = 34,
      Monsterstate = 35,
      Blockshield = 36,
      Shopdata = 37,
      Characterproperty = 38,
      Allproperty = 39,
      Changeenergy = 40,
      Initfeatures = 41,
      Grounditem = 42,
      Npc = 43,
      Movetrigger = 44,
      Powerclip = 45,
    }
    private StateDataOneofCase stateDataCase_ = StateDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateDataOneofCase StateDataCase {
      get { return stateDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateData() {
      stateDataCase_ = StateDataOneofCase.None;
      stateData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_State);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_State other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Hp, other.Hp)) return false;
      if (!object.Equals(Live, other.Live)) return false;
      if (!object.Equals(Motion, other.Motion)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Boxopen, other.Boxopen)) return false;
      if (!object.Equals(Planeinfo, other.Planeinfo)) return false;
      if (!object.Equals(Maxhp, other.Maxhp)) return false;
      if (!object.Equals(Equipment, other.Equipment)) return false;
      if (!object.Equals(Becureeffect, other.Becureeffect)) return false;
      if (!object.Equals(Cureeffect, other.Cureeffect)) return false;
      if (!object.Equals(Killeffect, other.Killeffect)) return false;
      if (!object.Equals(Slowrecovery, other.Slowrecovery)) return false;
      if (!object.Equals(Housedata, other.Housedata)) return false;
      if (!object.Equals(Vehidata, other.Vehidata)) return false;
      if (!object.Equals(Plyvehi, other.Plyvehi)) return false;
      if (!object.Equals(Boxtype, other.Boxtype)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (Flystate != other.Flystate) return false;
      if (!object.Equals(Bullet, other.Bullet)) return false;
      if (!object.Equals(Weapon, other.Weapon)) return false;
      if (!object.Equals(Aiming, other.Aiming)) return false;
      if (!object.Equals(Reloadeffect, other.Reloadeffect)) return false;
      if (!object.Equals(Recovering, other.Recovering)) return false;
      if (!object.Equals(Grenade, other.Grenade)) return false;
      if (!object.Equals(Shield, other.Shield)) return false;
      if (!object.Equals(Endurance, other.Endurance)) return false;
      if (!object.Equals(Shieldstate, other.Shieldstate)) return false;
      if (!object.Equals(Outlook, other.Outlook)) return false;
      if (!object.Equals(Superheat, other.Superheat)) return false;
      if (!object.Equals(Plystate, other.Plystate)) return false;
      if (!object.Equals(Gamble, other.Gamble)) return false;
      if (!object.Equals(Monsterstate, other.Monsterstate)) return false;
      if (!object.Equals(Blockshield, other.Blockshield)) return false;
      if (!object.Equals(Shopdata, other.Shopdata)) return false;
      if (!object.Equals(Characterproperty, other.Characterproperty)) return false;
      if (!object.Equals(Allproperty, other.Allproperty)) return false;
      if (!object.Equals(Changeenergy, other.Changeenergy)) return false;
      if (!object.Equals(Initfeatures, other.Initfeatures)) return false;
      if (!object.Equals(Grounditem, other.Grounditem)) return false;
      if (!object.Equals(Npc, other.Npc)) return false;
      if (!object.Equals(Movetrigger, other.Movetrigger)) return false;
      if (!object.Equals(Powerclip, other.Powerclip)) return false;
      if (StateDataCase != other.StateDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Move) hash ^= Move.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Rotation) hash ^= Rotation.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Hp) hash ^= Hp.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Live) hash ^= Live.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Motion) hash ^= Motion.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Pos) hash ^= Pos.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Boxopen) hash ^= Boxopen.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Planeinfo) hash ^= Planeinfo.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Maxhp) hash ^= Maxhp.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Equipment) hash ^= Equipment.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Becureeffect) hash ^= Becureeffect.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Cureeffect) hash ^= Cureeffect.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Killeffect) hash ^= Killeffect.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Slowrecovery) hash ^= Slowrecovery.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Housedata) hash ^= Housedata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Vehidata) hash ^= Vehidata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Plyvehi) hash ^= Plyvehi.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Boxtype) hash ^= Boxtype.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Package) hash ^= Package.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Flystate) hash ^= Flystate.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Bullet) hash ^= Bullet.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Weapon) hash ^= Weapon.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Aiming) hash ^= Aiming.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Reloadeffect) hash ^= Reloadeffect.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Recovering) hash ^= Recovering.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Grenade) hash ^= Grenade.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Shield) hash ^= Shield.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Endurance) hash ^= Endurance.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Shieldstate) hash ^= Shieldstate.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Outlook) hash ^= Outlook.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Superheat) hash ^= Superheat.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Plystate) hash ^= Plystate.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Gamble) hash ^= Gamble.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Monsterstate) hash ^= Monsterstate.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Blockshield) hash ^= Blockshield.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Shopdata) hash ^= Shopdata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Characterproperty) hash ^= Characterproperty.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Allproperty) hash ^= Allproperty.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Changeenergy) hash ^= Changeenergy.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Initfeatures) hash ^= Initfeatures.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Grounditem) hash ^= Grounditem.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Npc) hash ^= Npc.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Movetrigger) hash ^= Movetrigger.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Powerclip) hash ^= Powerclip.GetHashCode();
      hash ^= (int) stateDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Frame);
      }
      if (stateDataCase_ == StateDataOneofCase.Move) {
        output.WriteRawTag(18);
        output.WriteMessage(Move);
      }
      if (stateDataCase_ == StateDataOneofCase.Rotation) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (stateDataCase_ == StateDataOneofCase.Hp) {
        output.WriteRawTag(34);
        output.WriteMessage(Hp);
      }
      if (stateDataCase_ == StateDataOneofCase.Live) {
        output.WriteRawTag(42);
        output.WriteMessage(Live);
      }
      if (stateDataCase_ == StateDataOneofCase.Motion) {
        output.WriteRawTag(50);
        output.WriteMessage(Motion);
      }
      if (stateDataCase_ == StateDataOneofCase.Pos) {
        output.WriteRawTag(58);
        output.WriteMessage(Pos);
      }
      if (stateDataCase_ == StateDataOneofCase.Boxopen) {
        output.WriteRawTag(66);
        output.WriteMessage(Boxopen);
      }
      if (stateDataCase_ == StateDataOneofCase.Planeinfo) {
        output.WriteRawTag(74);
        output.WriteMessage(Planeinfo);
      }
      if (stateDataCase_ == StateDataOneofCase.Maxhp) {
        output.WriteRawTag(82);
        output.WriteMessage(Maxhp);
      }
      if (stateDataCase_ == StateDataOneofCase.Equipment) {
        output.WriteRawTag(90);
        output.WriteMessage(Equipment);
      }
      if (stateDataCase_ == StateDataOneofCase.Becureeffect) {
        output.WriteRawTag(98);
        output.WriteMessage(Becureeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Cureeffect) {
        output.WriteRawTag(106);
        output.WriteMessage(Cureeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Killeffect) {
        output.WriteRawTag(114);
        output.WriteMessage(Killeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Slowrecovery) {
        output.WriteRawTag(122);
        output.WriteMessage(Slowrecovery);
      }
      if (stateDataCase_ == StateDataOneofCase.Housedata) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Housedata);
      }
      if (stateDataCase_ == StateDataOneofCase.Vehidata) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Vehidata);
      }
      if (stateDataCase_ == StateDataOneofCase.Plyvehi) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Plyvehi);
      }
      if (stateDataCase_ == StateDataOneofCase.Boxtype) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Boxtype);
      }
      if (stateDataCase_ == StateDataOneofCase.Package) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Package);
      }
      if (stateDataCase_ == StateDataOneofCase.Flystate) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Flystate);
      }
      if (stateDataCase_ == StateDataOneofCase.Bullet) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Bullet);
      }
      if (stateDataCase_ == StateDataOneofCase.Weapon) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Weapon);
      }
      if (stateDataCase_ == StateDataOneofCase.Aiming) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Aiming);
      }
      if (stateDataCase_ == StateDataOneofCase.Reloadeffect) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Reloadeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Recovering) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Recovering);
      }
      if (stateDataCase_ == StateDataOneofCase.Grenade) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Grenade);
      }
      if (stateDataCase_ == StateDataOneofCase.Shield) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Shield);
      }
      if (stateDataCase_ == StateDataOneofCase.Endurance) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Endurance);
      }
      if (stateDataCase_ == StateDataOneofCase.Shieldstate) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Shieldstate);
      }
      if (stateDataCase_ == StateDataOneofCase.Outlook) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Outlook);
      }
      if (stateDataCase_ == StateDataOneofCase.Superheat) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Superheat);
      }
      if (stateDataCase_ == StateDataOneofCase.Plystate) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Plystate);
      }
      if (stateDataCase_ == StateDataOneofCase.Gamble) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Gamble);
      }
      if (stateDataCase_ == StateDataOneofCase.Monsterstate) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(Monsterstate);
      }
      if (stateDataCase_ == StateDataOneofCase.Blockshield) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Blockshield);
      }
      if (stateDataCase_ == StateDataOneofCase.Shopdata) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Shopdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Characterproperty) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Characterproperty);
      }
      if (stateDataCase_ == StateDataOneofCase.Allproperty) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Allproperty);
      }
      if (stateDataCase_ == StateDataOneofCase.Changeenergy) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Changeenergy);
      }
      if (stateDataCase_ == StateDataOneofCase.Initfeatures) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Initfeatures);
      }
      if (stateDataCase_ == StateDataOneofCase.Grounditem) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Grounditem);
      }
      if (stateDataCase_ == StateDataOneofCase.Npc) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(Npc);
      }
      if (stateDataCase_ == StateDataOneofCase.Movetrigger) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Movetrigger);
      }
      if (stateDataCase_ == StateDataOneofCase.Powerclip) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(Powerclip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      if (stateDataCase_ == StateDataOneofCase.Move) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (stateDataCase_ == StateDataOneofCase.Rotation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (stateDataCase_ == StateDataOneofCase.Hp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hp);
      }
      if (stateDataCase_ == StateDataOneofCase.Live) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Live);
      }
      if (stateDataCase_ == StateDataOneofCase.Motion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Motion);
      }
      if (stateDataCase_ == StateDataOneofCase.Pos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (stateDataCase_ == StateDataOneofCase.Boxopen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boxopen);
      }
      if (stateDataCase_ == StateDataOneofCase.Planeinfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Planeinfo);
      }
      if (stateDataCase_ == StateDataOneofCase.Maxhp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maxhp);
      }
      if (stateDataCase_ == StateDataOneofCase.Equipment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (stateDataCase_ == StateDataOneofCase.Becureeffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Becureeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Cureeffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cureeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Killeffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Killeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Slowrecovery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slowrecovery);
      }
      if (stateDataCase_ == StateDataOneofCase.Housedata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Housedata);
      }
      if (stateDataCase_ == StateDataOneofCase.Vehidata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vehidata);
      }
      if (stateDataCase_ == StateDataOneofCase.Plyvehi) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Plyvehi);
      }
      if (stateDataCase_ == StateDataOneofCase.Boxtype) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Boxtype);
      }
      if (stateDataCase_ == StateDataOneofCase.Package) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (stateDataCase_ == StateDataOneofCase.Flystate) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Flystate);
      }
      if (stateDataCase_ == StateDataOneofCase.Bullet) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bullet);
      }
      if (stateDataCase_ == StateDataOneofCase.Weapon) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Weapon);
      }
      if (stateDataCase_ == StateDataOneofCase.Aiming) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Aiming);
      }
      if (stateDataCase_ == StateDataOneofCase.Reloadeffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Reloadeffect);
      }
      if (stateDataCase_ == StateDataOneofCase.Recovering) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Recovering);
      }
      if (stateDataCase_ == StateDataOneofCase.Grenade) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Grenade);
      }
      if (stateDataCase_ == StateDataOneofCase.Shield) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Shield);
      }
      if (stateDataCase_ == StateDataOneofCase.Endurance) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Endurance);
      }
      if (stateDataCase_ == StateDataOneofCase.Shieldstate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Shieldstate);
      }
      if (stateDataCase_ == StateDataOneofCase.Outlook) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Outlook);
      }
      if (stateDataCase_ == StateDataOneofCase.Superheat) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Superheat);
      }
      if (stateDataCase_ == StateDataOneofCase.Plystate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Plystate);
      }
      if (stateDataCase_ == StateDataOneofCase.Gamble) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gamble);
      }
      if (stateDataCase_ == StateDataOneofCase.Monsterstate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Monsterstate);
      }
      if (stateDataCase_ == StateDataOneofCase.Blockshield) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Blockshield);
      }
      if (stateDataCase_ == StateDataOneofCase.Shopdata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Shopdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Characterproperty) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Characterproperty);
      }
      if (stateDataCase_ == StateDataOneofCase.Allproperty) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Allproperty);
      }
      if (stateDataCase_ == StateDataOneofCase.Changeenergy) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Changeenergy);
      }
      if (stateDataCase_ == StateDataOneofCase.Initfeatures) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Initfeatures);
      }
      if (stateDataCase_ == StateDataOneofCase.Grounditem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Grounditem);
      }
      if (stateDataCase_ == StateDataOneofCase.Npc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Npc);
      }
      if (stateDataCase_ == StateDataOneofCase.Movetrigger) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Movetrigger);
      }
      if (stateDataCase_ == StateDataOneofCase.Powerclip) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Powerclip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_State other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      switch (other.StateDataCase) {
        case StateDataOneofCase.Move:
          Move = other.Move;
          break;
        case StateDataOneofCase.Rotation:
          Rotation = other.Rotation;
          break;
        case StateDataOneofCase.Hp:
          Hp = other.Hp;
          break;
        case StateDataOneofCase.Live:
          Live = other.Live;
          break;
        case StateDataOneofCase.Motion:
          Motion = other.Motion;
          break;
        case StateDataOneofCase.Pos:
          Pos = other.Pos;
          break;
        case StateDataOneofCase.Boxopen:
          Boxopen = other.Boxopen;
          break;
        case StateDataOneofCase.Planeinfo:
          Planeinfo = other.Planeinfo;
          break;
        case StateDataOneofCase.Maxhp:
          Maxhp = other.Maxhp;
          break;
        case StateDataOneofCase.Equipment:
          Equipment = other.Equipment;
          break;
        case StateDataOneofCase.Becureeffect:
          Becureeffect = other.Becureeffect;
          break;
        case StateDataOneofCase.Cureeffect:
          Cureeffect = other.Cureeffect;
          break;
        case StateDataOneofCase.Killeffect:
          Killeffect = other.Killeffect;
          break;
        case StateDataOneofCase.Slowrecovery:
          Slowrecovery = other.Slowrecovery;
          break;
        case StateDataOneofCase.Housedata:
          Housedata = other.Housedata;
          break;
        case StateDataOneofCase.Vehidata:
          Vehidata = other.Vehidata;
          break;
        case StateDataOneofCase.Plyvehi:
          Plyvehi = other.Plyvehi;
          break;
        case StateDataOneofCase.Boxtype:
          Boxtype = other.Boxtype;
          break;
        case StateDataOneofCase.Package:
          Package = other.Package;
          break;
        case StateDataOneofCase.Flystate:
          Flystate = other.Flystate;
          break;
        case StateDataOneofCase.Bullet:
          Bullet = other.Bullet;
          break;
        case StateDataOneofCase.Weapon:
          Weapon = other.Weapon;
          break;
        case StateDataOneofCase.Aiming:
          Aiming = other.Aiming;
          break;
        case StateDataOneofCase.Reloadeffect:
          Reloadeffect = other.Reloadeffect;
          break;
        case StateDataOneofCase.Recovering:
          Recovering = other.Recovering;
          break;
        case StateDataOneofCase.Grenade:
          Grenade = other.Grenade;
          break;
        case StateDataOneofCase.Shield:
          Shield = other.Shield;
          break;
        case StateDataOneofCase.Endurance:
          Endurance = other.Endurance;
          break;
        case StateDataOneofCase.Shieldstate:
          Shieldstate = other.Shieldstate;
          break;
        case StateDataOneofCase.Outlook:
          Outlook = other.Outlook;
          break;
        case StateDataOneofCase.Superheat:
          Superheat = other.Superheat;
          break;
        case StateDataOneofCase.Plystate:
          Plystate = other.Plystate;
          break;
        case StateDataOneofCase.Gamble:
          Gamble = other.Gamble;
          break;
        case StateDataOneofCase.Monsterstate:
          Monsterstate = other.Monsterstate;
          break;
        case StateDataOneofCase.Blockshield:
          Blockshield = other.Blockshield;
          break;
        case StateDataOneofCase.Shopdata:
          Shopdata = other.Shopdata;
          break;
        case StateDataOneofCase.Characterproperty:
          Characterproperty = other.Characterproperty;
          break;
        case StateDataOneofCase.Allproperty:
          Allproperty = other.Allproperty;
          break;
        case StateDataOneofCase.Changeenergy:
          Changeenergy = other.Changeenergy;
          break;
        case StateDataOneofCase.Initfeatures:
          Initfeatures = other.Initfeatures;
          break;
        case StateDataOneofCase.Grounditem:
          Grounditem = other.Grounditem;
          break;
        case StateDataOneofCase.Npc:
          Npc = other.Npc;
          break;
        case StateDataOneofCase.Movetrigger:
          Movetrigger = other.Movetrigger;
          break;
        case StateDataOneofCase.Powerclip:
          Powerclip = other.Powerclip;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Pb.B2C_State.Types.B2C_Move subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Move>();
            if (stateDataCase_ == StateDataOneofCase.Move) {
              subBuilder.MergeFrom(Move);
            }
            input.ReadMessage(subBuilder);
            Move = subBuilder;
            break;
          }
          case 26: {
            global::Pb.B2C_State.Types.B2C_Rotation subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Rotation>();
            if (stateDataCase_ == StateDataOneofCase.Rotation) {
              subBuilder.MergeFrom(Rotation);
            }
            input.ReadMessage(subBuilder);
            Rotation = subBuilder;
            break;
          }
          case 34: {
            global::Pb.B2C_State.Types.B2C_HP subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_HP>();
            if (stateDataCase_ == StateDataOneofCase.Hp) {
              subBuilder.MergeFrom(Hp);
            }
            input.ReadMessage(subBuilder);
            Hp = subBuilder;
            break;
          }
          case 42: {
            global::Pb.B2C_State.Types.B2C_Live subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Live>();
            if (stateDataCase_ == StateDataOneofCase.Live) {
              subBuilder.MergeFrom(Live);
            }
            input.ReadMessage(subBuilder);
            Live = subBuilder;
            break;
          }
          case 50: {
            global::Pb.B2C_State.Types.B2C_Motion subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Motion>();
            if (stateDataCase_ == StateDataOneofCase.Motion) {
              subBuilder.MergeFrom(Motion);
            }
            input.ReadMessage(subBuilder);
            Motion = subBuilder;
            break;
          }
          case 58: {
            global::Pb.B2C_State.Types.B2C_Pos subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Pos>();
            if (stateDataCase_ == StateDataOneofCase.Pos) {
              subBuilder.MergeFrom(Pos);
            }
            input.ReadMessage(subBuilder);
            Pos = subBuilder;
            break;
          }
          case 66: {
            global::Pb.B2C_State.Types.B2C_BoxOpen subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_BoxOpen>();
            if (stateDataCase_ == StateDataOneofCase.Boxopen) {
              subBuilder.MergeFrom(Boxopen);
            }
            input.ReadMessage(subBuilder);
            Boxopen = subBuilder;
            break;
          }
          case 74: {
            global::Pb.B2C_State.Types.B2C_PlaneState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_PlaneState>();
            if (stateDataCase_ == StateDataOneofCase.Planeinfo) {
              subBuilder.MergeFrom(Planeinfo);
            }
            input.ReadMessage(subBuilder);
            Planeinfo = subBuilder;
            break;
          }
          case 82: {
            global::Pb.B2C_State.Types.B2C_MaxHP subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_MaxHP>();
            if (stateDataCase_ == StateDataOneofCase.Maxhp) {
              subBuilder.MergeFrom(Maxhp);
            }
            input.ReadMessage(subBuilder);
            Maxhp = subBuilder;
            break;
          }
          case 90: {
            global::Pb.B2C_State.Types.B2C_Equipment subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Equipment>();
            if (stateDataCase_ == StateDataOneofCase.Equipment) {
              subBuilder.MergeFrom(Equipment);
            }
            input.ReadMessage(subBuilder);
            Equipment = subBuilder;
            break;
          }
          case 98: {
            global::Pb.B2C_State.Types.B2C_BeCureEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_BeCureEffect>();
            if (stateDataCase_ == StateDataOneofCase.Becureeffect) {
              subBuilder.MergeFrom(Becureeffect);
            }
            input.ReadMessage(subBuilder);
            Becureeffect = subBuilder;
            break;
          }
          case 106: {
            global::Pb.B2C_State.Types.B2C_CureEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_CureEffect>();
            if (stateDataCase_ == StateDataOneofCase.Cureeffect) {
              subBuilder.MergeFrom(Cureeffect);
            }
            input.ReadMessage(subBuilder);
            Cureeffect = subBuilder;
            break;
          }
          case 114: {
            global::Pb.B2C_State.Types.B2C_KillEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_KillEffect>();
            if (stateDataCase_ == StateDataOneofCase.Killeffect) {
              subBuilder.MergeFrom(Killeffect);
            }
            input.ReadMessage(subBuilder);
            Killeffect = subBuilder;
            break;
          }
          case 122: {
            global::Pb.B2C_State.Types.B2C_SlowRecovery subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_SlowRecovery>();
            if (stateDataCase_ == StateDataOneofCase.Slowrecovery) {
              subBuilder.MergeFrom(Slowrecovery);
            }
            input.ReadMessage(subBuilder);
            Slowrecovery = subBuilder;
            break;
          }
          case 130: {
            global::Pb.B2C_State.Types.B2C_HouseData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_HouseData>();
            if (stateDataCase_ == StateDataOneofCase.Housedata) {
              subBuilder.MergeFrom(Housedata);
            }
            input.ReadMessage(subBuilder);
            Housedata = subBuilder;
            break;
          }
          case 138: {
            global::Pb.B2C_State.Types.B2C_VehicleState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_VehicleState>();
            if (stateDataCase_ == StateDataOneofCase.Vehidata) {
              subBuilder.MergeFrom(Vehidata);
            }
            input.ReadMessage(subBuilder);
            Vehidata = subBuilder;
            break;
          }
          case 146: {
            global::Pb.B2C_State.Types.B2C_PlayerVehicle subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_PlayerVehicle>();
            if (stateDataCase_ == StateDataOneofCase.Plyvehi) {
              subBuilder.MergeFrom(Plyvehi);
            }
            input.ReadMessage(subBuilder);
            Plyvehi = subBuilder;
            break;
          }
          case 154: {
            global::Pb.B2C_State.Types.B2C_BoxType subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_BoxType>();
            if (stateDataCase_ == StateDataOneofCase.Boxtype) {
              subBuilder.MergeFrom(Boxtype);
            }
            input.ReadMessage(subBuilder);
            Boxtype = subBuilder;
            break;
          }
          case 162: {
            global::Pb.B2C_State.Types.B2C_Package subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Package>();
            if (stateDataCase_ == StateDataOneofCase.Package) {
              subBuilder.MergeFrom(Package);
            }
            input.ReadMessage(subBuilder);
            Package = subBuilder;
            break;
          }
          case 168: {
            stateData_ = input.ReadEnum();
            stateDataCase_ = StateDataOneofCase.Flystate;
            break;
          }
          case 178: {
            global::Pb.B2C_State.Types.B2C_Bullet subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Bullet>();
            if (stateDataCase_ == StateDataOneofCase.Bullet) {
              subBuilder.MergeFrom(Bullet);
            }
            input.ReadMessage(subBuilder);
            Bullet = subBuilder;
            break;
          }
          case 186: {
            global::Pb.B2C_State.Types.B2C_Weapon subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Weapon>();
            if (stateDataCase_ == StateDataOneofCase.Weapon) {
              subBuilder.MergeFrom(Weapon);
            }
            input.ReadMessage(subBuilder);
            Weapon = subBuilder;
            break;
          }
          case 194: {
            global::Pb.B2C_State.Types.B2C_Aiming subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Aiming>();
            if (stateDataCase_ == StateDataOneofCase.Aiming) {
              subBuilder.MergeFrom(Aiming);
            }
            input.ReadMessage(subBuilder);
            Aiming = subBuilder;
            break;
          }
          case 202: {
            global::Pb.B2C_State.Types.B2C_ReloadEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_ReloadEffect>();
            if (stateDataCase_ == StateDataOneofCase.Reloadeffect) {
              subBuilder.MergeFrom(Reloadeffect);
            }
            input.ReadMessage(subBuilder);
            Reloadeffect = subBuilder;
            break;
          }
          case 210: {
            global::Pb.B2C_State.Types.B2C_RecoveryEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_RecoveryEffect>();
            if (stateDataCase_ == StateDataOneofCase.Recovering) {
              subBuilder.MergeFrom(Recovering);
            }
            input.ReadMessage(subBuilder);
            Recovering = subBuilder;
            break;
          }
          case 218: {
            global::Pb.B2C_State.Types.B2C_GrenadeData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_GrenadeData>();
            if (stateDataCase_ == StateDataOneofCase.Grenade) {
              subBuilder.MergeFrom(Grenade);
            }
            input.ReadMessage(subBuilder);
            Grenade = subBuilder;
            break;
          }
          case 226: {
            global::Pb.B2C_State.Types.B2C_Shield subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Shield>();
            if (stateDataCase_ == StateDataOneofCase.Shield) {
              subBuilder.MergeFrom(Shield);
            }
            input.ReadMessage(subBuilder);
            Shield = subBuilder;
            break;
          }
          case 234: {
            global::Pb.B2C_State.Types.B2C_Endurance subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Endurance>();
            if (stateDataCase_ == StateDataOneofCase.Endurance) {
              subBuilder.MergeFrom(Endurance);
            }
            input.ReadMessage(subBuilder);
            Endurance = subBuilder;
            break;
          }
          case 242: {
            global::Pb.B2C_State.Types.B2C_ShieldState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_ShieldState>();
            if (stateDataCase_ == StateDataOneofCase.Shieldstate) {
              subBuilder.MergeFrom(Shieldstate);
            }
            input.ReadMessage(subBuilder);
            Shieldstate = subBuilder;
            break;
          }
          case 250: {
            global::Pb.B2C_State.Types.B2C_Outlook subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Outlook>();
            if (stateDataCase_ == StateDataOneofCase.Outlook) {
              subBuilder.MergeFrom(Outlook);
            }
            input.ReadMessage(subBuilder);
            Outlook = subBuilder;
            break;
          }
          case 258: {
            global::Pb.B2C_State.Types.B2C_Superheat subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Superheat>();
            if (stateDataCase_ == StateDataOneofCase.Superheat) {
              subBuilder.MergeFrom(Superheat);
            }
            input.ReadMessage(subBuilder);
            Superheat = subBuilder;
            break;
          }
          case 266: {
            global::Pb.B2C_State.Types.B2C_PlyState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_PlyState>();
            if (stateDataCase_ == StateDataOneofCase.Plystate) {
              subBuilder.MergeFrom(Plystate);
            }
            input.ReadMessage(subBuilder);
            Plystate = subBuilder;
            break;
          }
          case 274: {
            global::Pb.B2C_State.Types.B2C_Gamble subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Gamble>();
            if (stateDataCase_ == StateDataOneofCase.Gamble) {
              subBuilder.MergeFrom(Gamble);
            }
            input.ReadMessage(subBuilder);
            Gamble = subBuilder;
            break;
          }
          case 282: {
            global::Pb.B2C_State.Types.B2C_MonsterState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_MonsterState>();
            if (stateDataCase_ == StateDataOneofCase.Monsterstate) {
              subBuilder.MergeFrom(Monsterstate);
            }
            input.ReadMessage(subBuilder);
            Monsterstate = subBuilder;
            break;
          }
          case 290: {
            global::Pb.B2C_State.Types.B2C_BlockShieldData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_BlockShieldData>();
            if (stateDataCase_ == StateDataOneofCase.Blockshield) {
              subBuilder.MergeFrom(Blockshield);
            }
            input.ReadMessage(subBuilder);
            Blockshield = subBuilder;
            break;
          }
          case 298: {
            global::Pb.B2C_State.Types.B2C_Shop subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Shop>();
            if (stateDataCase_ == StateDataOneofCase.Shopdata) {
              subBuilder.MergeFrom(Shopdata);
            }
            input.ReadMessage(subBuilder);
            Shopdata = subBuilder;
            break;
          }
          case 306: {
            global::Pb.B2C_State.Types.B2C_CharacterProperty subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_CharacterProperty>();
            if (stateDataCase_ == StateDataOneofCase.Characterproperty) {
              subBuilder.MergeFrom(Characterproperty);
            }
            input.ReadMessage(subBuilder);
            Characterproperty = subBuilder;
            break;
          }
          case 314: {
            global::Pb.B2C_State.Types.B2C_CharacterProperty subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_CharacterProperty>();
            if (stateDataCase_ == StateDataOneofCase.Allproperty) {
              subBuilder.MergeFrom(Allproperty);
            }
            input.ReadMessage(subBuilder);
            Allproperty = subBuilder;
            break;
          }
          case 322: {
            global::Pb.B2C_State.Types.B2C_ChargeEnergy subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_ChargeEnergy>();
            if (stateDataCase_ == StateDataOneofCase.Changeenergy) {
              subBuilder.MergeFrom(Changeenergy);
            }
            input.ReadMessage(subBuilder);
            Changeenergy = subBuilder;
            break;
          }
          case 330: {
            global::Pb.B2C_State.Types.B2C_InitFeatures subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_InitFeatures>();
            if (stateDataCase_ == StateDataOneofCase.Initfeatures) {
              subBuilder.MergeFrom(Initfeatures);
            }
            input.ReadMessage(subBuilder);
            Initfeatures = subBuilder;
            break;
          }
          case 338: {
            global::Pb.B2C_State.Types.B2C_GroundItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_GroundItem>();
            if (stateDataCase_ == StateDataOneofCase.Grounditem) {
              subBuilder.MergeFrom(Grounditem);
            }
            input.ReadMessage(subBuilder);
            Grounditem = subBuilder;
            break;
          }
          case 346: {
            global::Pb.B2C_State.Types.B2C_Npc subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_Npc>();
            if (stateDataCase_ == StateDataOneofCase.Npc) {
              subBuilder.MergeFrom(Npc);
            }
            input.ReadMessage(subBuilder);
            Npc = subBuilder;
            break;
          }
          case 354: {
            global::Pb.B2C_State.Types.B2C_MoveTriggerData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_MoveTriggerData>();
            if (stateDataCase_ == StateDataOneofCase.Movetrigger) {
              subBuilder.MergeFrom(Movetrigger);
            }
            input.ReadMessage(subBuilder);
            Movetrigger = subBuilder;
            break;
          }
          case 362: {
            global::Pb.B2C_State.Types.B2C_PowerClip subBuilder = pb.ProtobufManager.New<global::Pb.B2C_State.Types.B2C_PowerClip>();
            if (stateDataCase_ == StateDataOneofCase.Powerclip) {
              subBuilder.MergeFrom(Powerclip);
            }
            input.ReadMessage(subBuilder);
            Powerclip = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_State message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class B2C_Outlook : pb::IMessage<B2C_Outlook> {
        private static readonly pb::MessageParser<B2C_Outlook> _parser = new pb::MessageParser<B2C_Outlook>(() => pb.ProtobufManager.New<B2C_Outlook>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Outlook> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Outlook() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Charid = 0;
          Scale = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Outlook(B2C_Outlook other) : this() {
          charid_ = other.charid_;
          scale_ = other.scale_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Outlook Clone() {
          return new B2C_Outlook(this);
        }

        /// <summary>Field number for the "charid" field.</summary>
        public const int CharidFieldNumber = 1;
        private uint charid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Charid {
          get { return charid_; }
          set {
            charid_ = value;
          }
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 2;
        private float scale_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Scale {
          get { return scale_; }
          set {
            scale_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Outlook);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Outlook other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Charid != other.Charid) return false;
          if (Scale != other.Scale) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Charid != 0) hash ^= Charid.GetHashCode();
          if (Scale != 0F) hash ^= Scale.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Charid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Charid);
          }
          if (Scale != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Scale);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Charid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
          }
          if (Scale != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Outlook other) {
          if (other == null) {
            return;
          }
          if (other.Charid != 0) {
            Charid = other.Charid;
          }
          if (other.Scale != 0F) {
            Scale = other.Scale;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Charid = input.ReadUInt32();
                break;
              }
              case 21: {
                Scale = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Move : pb::IMessage<B2C_Move> {
        private static readonly pb::MessageParser<B2C_Move> _parser = new pb::MessageParser<B2C_Move>(() => pb.ProtobufManager.New<B2C_Move>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Move> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Move() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(velocity_);
          velocity_ = null;
          Teleport = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Move(B2C_Move other) : this() {
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
          Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
          teleport_ = other.teleport_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Move Clone() {
          return new B2C_Move(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "velocity" field.</summary>
        public const int VelocityFieldNumber = 2;
        private global::Pb.Vector3PB velocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Velocity {
          get { return velocity_; }
          set {
            velocity_ = value;
          }
        }

        /// <summary>Field number for the "teleport" field.</summary>
        public const int TeleportFieldNumber = 3;
        private bool teleport_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Teleport {
          get { return teleport_; }
          set {
            teleport_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Move);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Move other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Pos, other.Pos)) return false;
          if (!object.Equals(Velocity, other.Velocity)) return false;
          if (Teleport != other.Teleport) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (velocity_ != null) hash ^= Velocity.GetHashCode();
          if (Teleport != false) hash ^= Teleport.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (pos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Pos);
          }
          if (velocity_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Velocity);
          }
          if (Teleport != false) {
            output.WriteRawTag(24);
            output.WriteBool(Teleport);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (velocity_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
          }
          if (Teleport != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Move other) {
          if (other == null) {
            return;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.velocity_ != null) {
            if (velocity_ == null) {
              velocity_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Velocity.MergeFrom(other.Velocity);
          }
          if (other.Teleport != false) {
            Teleport = other.Teleport;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 18: {
                if (velocity_ == null) {
                  velocity_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(velocity_);
                break;
              }
              case 24: {
                Teleport = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Rotation : pb::IMessage<B2C_Rotation> {
        private static readonly pb::MessageParser<B2C_Rotation> _parser = new pb::MessageParser<B2C_Rotation>(() => pb.ProtobufManager.New<B2C_Rotation>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          DirX = 0;
          DirY = 0;
          DirZ = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Rotation(B2C_Rotation other) : this() {
          dirX_ = other.dirX_;
          dirY_ = other.dirY_;
          dirZ_ = other.dirZ_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Rotation Clone() {
          return new B2C_Rotation(this);
        }

        /// <summary>Field number for the "dirX" field.</summary>
        public const int DirXFieldNumber = 1;
        private float dirX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirX {
          get { return dirX_; }
          set {
            dirX_ = value;
          }
        }

        /// <summary>Field number for the "dirY" field.</summary>
        public const int DirYFieldNumber = 2;
        private float dirY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirY {
          get { return dirY_; }
          set {
            dirY_ = value;
          }
        }

        /// <summary>Field number for the "dirZ" field.</summary>
        public const int DirZFieldNumber = 3;
        private float dirZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirZ {
          get { return dirZ_; }
          set {
            dirZ_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DirX != other.DirX) return false;
          if (DirY != other.DirY) return false;
          if (DirZ != other.DirZ) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DirX != 0F) hash ^= DirX.GetHashCode();
          if (DirY != 0F) hash ^= DirY.GetHashCode();
          if (DirZ != 0F) hash ^= DirZ.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DirX != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(DirX);
          }
          if (DirY != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(DirY);
          }
          if (DirZ != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(DirZ);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DirX != 0F) {
            size += 1 + 4;
          }
          if (DirY != 0F) {
            size += 1 + 4;
          }
          if (DirZ != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Rotation other) {
          if (other == null) {
            return;
          }
          if (other.DirX != 0F) {
            DirX = other.DirX;
          }
          if (other.DirY != 0F) {
            DirY = other.DirY;
          }
          if (other.DirZ != 0F) {
            DirZ = other.DirZ;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                DirX = input.ReadFloat();
                break;
              }
              case 21: {
                DirY = input.ReadFloat();
                break;
              }
              case 29: {
                DirZ = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_HP : pb::IMessage<B2C_HP> {
        private static readonly pb::MessageParser<B2C_HP> _parser = new pb::MessageParser<B2C_HP>(() => pb.ProtobufManager.New<B2C_HP>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_HP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HP() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Hp = 0;
          Weakhp = 0;
          Reason = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HP(B2C_HP other) : this() {
          hp_ = other.hp_;
          weakhp_ = other.weakhp_;
          reason_ = other.reason_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HP Clone() {
          return new B2C_HP(this);
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 1;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "weakhp" field.</summary>
        public const int WeakhpFieldNumber = 2;
        private int weakhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Weakhp {
          get { return weakhp_; }
          set {
            weakhp_ = value;
          }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 3;
        private global::Pb.KillReason reason_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.KillReason Reason {
          get { return reason_; }
          set {
            reason_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_HP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_HP other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hp != other.Hp) return false;
          if (Weakhp != other.Weakhp) return false;
          if (Reason != other.Reason) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hp != 0) hash ^= Hp.GetHashCode();
          if (Weakhp != 0) hash ^= Weakhp.GetHashCode();
          if (Reason != 0) hash ^= Reason.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hp != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Hp);
          }
          if (Weakhp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Weakhp);
          }
          if (Reason != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Reason);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
          }
          if (Weakhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weakhp);
          }
          if (Reason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_HP other) {
          if (other == null) {
            return;
          }
          if (other.Hp != 0) {
            Hp = other.Hp;
          }
          if (other.Weakhp != 0) {
            Weakhp = other.Weakhp;
          }
          if (other.Reason != 0) {
            Reason = other.Reason;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Hp = input.ReadInt32();
                break;
              }
              case 16: {
                Weakhp = input.ReadInt32();
                break;
              }
              case 24: {
                reason_ = (global::Pb.KillReason) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Live : pb::IMessage<B2C_Live> {
        private static readonly pb::MessageParser<B2C_Live> _parser = new pb::MessageParser<B2C_Live>(() => pb.ProtobufManager.New<B2C_Live>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Live> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Live() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Live = false;
          Inweak = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Live(B2C_Live other) : this() {
          live_ = other.live_;
          inweak_ = other.inweak_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Live Clone() {
          return new B2C_Live(this);
        }

        /// <summary>Field number for the "live" field.</summary>
        public const int LiveFieldNumber = 1;
        private bool live_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Live {
          get { return live_; }
          set {
            live_ = value;
          }
        }

        /// <summary>Field number for the "inweak" field.</summary>
        public const int InweakFieldNumber = 2;
        private bool inweak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Inweak {
          get { return inweak_; }
          set {
            inweak_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Live);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Live other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Live != other.Live) return false;
          if (Inweak != other.Inweak) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Live != false) hash ^= Live.GetHashCode();
          if (Inweak != false) hash ^= Inweak.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Live != false) {
            output.WriteRawTag(8);
            output.WriteBool(Live);
          }
          if (Inweak != false) {
            output.WriteRawTag(16);
            output.WriteBool(Inweak);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Live != false) {
            size += 1 + 1;
          }
          if (Inweak != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Live other) {
          if (other == null) {
            return;
          }
          if (other.Live != false) {
            Live = other.Live;
          }
          if (other.Inweak != false) {
            Inweak = other.Inweak;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Live = input.ReadBool();
                break;
              }
              case 16: {
                Inweak = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MaxHP : pb::IMessage<B2C_MaxHP> {
        private static readonly pb::MessageParser<B2C_MaxHP> _parser = new pb::MessageParser<B2C_MaxHP>(() => pb.ProtobufManager.New<B2C_MaxHP>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MaxHP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MaxHP() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Maxhp = 0;
          Maxweakhp = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MaxHP(B2C_MaxHP other) : this() {
          maxhp_ = other.maxhp_;
          maxweakhp_ = other.maxweakhp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MaxHP Clone() {
          return new B2C_MaxHP(this);
        }

        /// <summary>Field number for the "maxhp" field.</summary>
        public const int MaxhpFieldNumber = 1;
        private int maxhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxhp {
          get { return maxhp_; }
          set {
            maxhp_ = value;
          }
        }

        /// <summary>Field number for the "maxweakhp" field.</summary>
        public const int MaxweakhpFieldNumber = 2;
        private int maxweakhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxweakhp {
          get { return maxweakhp_; }
          set {
            maxweakhp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MaxHP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MaxHP other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Maxhp != other.Maxhp) return false;
          if (Maxweakhp != other.Maxweakhp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Maxhp != 0) hash ^= Maxhp.GetHashCode();
          if (Maxweakhp != 0) hash ^= Maxweakhp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Maxhp != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Maxhp);
          }
          if (Maxweakhp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Maxweakhp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Maxhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxhp);
          }
          if (Maxweakhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxweakhp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MaxHP other) {
          if (other == null) {
            return;
          }
          if (other.Maxhp != 0) {
            Maxhp = other.Maxhp;
          }
          if (other.Maxweakhp != 0) {
            Maxweakhp = other.Maxweakhp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Maxhp = input.ReadInt32();
                break;
              }
              case 16: {
                Maxweakhp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Motion : pb::IMessage<B2C_Motion> {
        private static readonly pb::MessageParser<B2C_Motion> _parser = new pb::MessageParser<B2C_Motion>(() => pb.ProtobufManager.New<B2C_Motion>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Motion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Motion() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Crouch = false;
          Prone = false;
          Running = false;
          Climb = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Motion(B2C_Motion other) : this() {
          crouch_ = other.crouch_;
          prone_ = other.prone_;
          running_ = other.running_;
          climb_ = other.climb_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Motion Clone() {
          return new B2C_Motion(this);
        }

        /// <summary>Field number for the "crouch" field.</summary>
        public const int CrouchFieldNumber = 1;
        private bool crouch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Crouch {
          get { return crouch_; }
          set {
            crouch_ = value;
          }
        }

        /// <summary>Field number for the "prone" field.</summary>
        public const int ProneFieldNumber = 2;
        private bool prone_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Prone {
          get { return prone_; }
          set {
            prone_ = value;
          }
        }

        /// <summary>Field number for the "running" field.</summary>
        public const int RunningFieldNumber = 3;
        private bool running_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Running {
          get { return running_; }
          set {
            running_ = value;
          }
        }

        /// <summary>Field number for the "climb" field.</summary>
        public const int ClimbFieldNumber = 4;
        private bool climb_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Climb {
          get { return climb_; }
          set {
            climb_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Motion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Motion other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Crouch != other.Crouch) return false;
          if (Prone != other.Prone) return false;
          if (Running != other.Running) return false;
          if (Climb != other.Climb) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Crouch != false) hash ^= Crouch.GetHashCode();
          if (Prone != false) hash ^= Prone.GetHashCode();
          if (Running != false) hash ^= Running.GetHashCode();
          if (Climb != false) hash ^= Climb.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Crouch != false) {
            output.WriteRawTag(8);
            output.WriteBool(Crouch);
          }
          if (Prone != false) {
            output.WriteRawTag(16);
            output.WriteBool(Prone);
          }
          if (Running != false) {
            output.WriteRawTag(24);
            output.WriteBool(Running);
          }
          if (Climb != false) {
            output.WriteRawTag(32);
            output.WriteBool(Climb);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Crouch != false) {
            size += 1 + 1;
          }
          if (Prone != false) {
            size += 1 + 1;
          }
          if (Running != false) {
            size += 1 + 1;
          }
          if (Climb != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Motion other) {
          if (other == null) {
            return;
          }
          if (other.Crouch != false) {
            Crouch = other.Crouch;
          }
          if (other.Prone != false) {
            Prone = other.Prone;
          }
          if (other.Running != false) {
            Running = other.Running;
          }
          if (other.Climb != false) {
            Climb = other.Climb;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Crouch = input.ReadBool();
                break;
              }
              case 16: {
                Prone = input.ReadBool();
                break;
              }
              case 24: {
                Running = input.ReadBool();
                break;
              }
              case 32: {
                Climb = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Aiming : pb::IMessage<B2C_Aiming> {
        private static readonly pb::MessageParser<B2C_Aiming> _parser = new pb::MessageParser<B2C_Aiming>(() => pb.ProtobufManager.New<B2C_Aiming>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Aiming> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Aiming() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Aiming = false;
          Usinggrenade = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Aiming(B2C_Aiming other) : this() {
          aiming_ = other.aiming_;
          usinggrenade_ = other.usinggrenade_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Aiming Clone() {
          return new B2C_Aiming(this);
        }

        /// <summary>Field number for the "aiming" field.</summary>
        public const int AimingFieldNumber = 1;
        private bool aiming_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Aiming {
          get { return aiming_; }
          set {
            aiming_ = value;
          }
        }

        /// <summary>Field number for the "usinggrenade" field.</summary>
        public const int UsinggrenadeFieldNumber = 2;
        private bool usinggrenade_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Usinggrenade {
          get { return usinggrenade_; }
          set {
            usinggrenade_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Aiming);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Aiming other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Aiming != other.Aiming) return false;
          if (Usinggrenade != other.Usinggrenade) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Aiming != false) hash ^= Aiming.GetHashCode();
          if (Usinggrenade != false) hash ^= Usinggrenade.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Aiming != false) {
            output.WriteRawTag(8);
            output.WriteBool(Aiming);
          }
          if (Usinggrenade != false) {
            output.WriteRawTag(16);
            output.WriteBool(Usinggrenade);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Aiming != false) {
            size += 1 + 1;
          }
          if (Usinggrenade != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Aiming other) {
          if (other == null) {
            return;
          }
          if (other.Aiming != false) {
            Aiming = other.Aiming;
          }
          if (other.Usinggrenade != false) {
            Usinggrenade = other.Usinggrenade;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Aiming = input.ReadBool();
                break;
              }
              case 16: {
                Usinggrenade = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Pos : pb::IMessage<B2C_Pos> {
        private static readonly pb::MessageParser<B2C_Pos> _parser = new pb::MessageParser<B2C_Pos>(() => pb.ProtobufManager.New<B2C_Pos>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Pos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Pos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Pos(B2C_Pos other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Pos Clone() {
          return new B2C_Pos(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Pos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Pos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Pos other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_BoxOpen : pb::IMessage<B2C_BoxOpen> {
        private static readonly pb::MessageParser<B2C_BoxOpen> _parser = new pb::MessageParser<B2C_BoxOpen>(() => pb.ProtobufManager.New<B2C_BoxOpen>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BoxOpen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BoxOpen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Opened = false;
          Boxid = 0;
          Empty = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BoxOpen(B2C_BoxOpen other) : this() {
          opened_ = other.opened_;
          boxid_ = other.boxid_;
          empty_ = other.empty_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BoxOpen Clone() {
          return new B2C_BoxOpen(this);
        }

        /// <summary>Field number for the "opened" field.</summary>
        public const int OpenedFieldNumber = 1;
        private bool opened_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Opened {
          get { return opened_; }
          set {
            opened_ = value;
          }
        }

        /// <summary>Field number for the "boxid" field.</summary>
        public const int BoxidFieldNumber = 2;
        private uint boxid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Boxid {
          get { return boxid_; }
          set {
            boxid_ = value;
          }
        }

        /// <summary>Field number for the "empty" field.</summary>
        public const int EmptyFieldNumber = 3;
        private bool empty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Empty {
          get { return empty_; }
          set {
            empty_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BoxOpen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BoxOpen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Opened != other.Opened) return false;
          if (Boxid != other.Boxid) return false;
          if (Empty != other.Empty) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Opened != false) hash ^= Opened.GetHashCode();
          if (Boxid != 0) hash ^= Boxid.GetHashCode();
          if (Empty != false) hash ^= Empty.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Opened != false) {
            output.WriteRawTag(8);
            output.WriteBool(Opened);
          }
          if (Boxid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Boxid);
          }
          if (Empty != false) {
            output.WriteRawTag(24);
            output.WriteBool(Empty);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Opened != false) {
            size += 1 + 1;
          }
          if (Boxid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Boxid);
          }
          if (Empty != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BoxOpen other) {
          if (other == null) {
            return;
          }
          if (other.Opened != false) {
            Opened = other.Opened;
          }
          if (other.Boxid != 0) {
            Boxid = other.Boxid;
          }
          if (other.Empty != false) {
            Empty = other.Empty;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Opened = input.ReadBool();
                break;
              }
              case 16: {
                Boxid = input.ReadUInt32();
                break;
              }
              case 24: {
                Empty = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_BoxType : pb::IMessage<B2C_BoxType> {
        private static readonly pb::MessageParser<B2C_BoxType> _parser = new pb::MessageParser<B2C_BoxType>(() => pb.ProtobufManager.New<B2C_BoxType>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BoxType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BoxType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Boxtype = 0;
          Isairdrop = false;
          Boxid = 0;
          Owner = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BoxType(B2C_BoxType other) : this() {
          boxtype_ = other.boxtype_;
          isairdrop_ = other.isairdrop_;
          boxid_ = other.boxid_;
          owner_ = other.owner_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BoxType Clone() {
          return new B2C_BoxType(this);
        }

        /// <summary>Field number for the "boxtype" field.</summary>
        public const int BoxtypeFieldNumber = 1;
        private uint boxtype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Boxtype {
          get { return boxtype_; }
          set {
            boxtype_ = value;
          }
        }

        /// <summary>Field number for the "isairdrop" field.</summary>
        public const int IsairdropFieldNumber = 2;
        private bool isairdrop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Isairdrop {
          get { return isairdrop_; }
          set {
            isairdrop_ = value;
          }
        }

        /// <summary>Field number for the "boxid" field.</summary>
        public const int BoxidFieldNumber = 3;
        private uint boxid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Boxid {
          get { return boxid_; }
          set {
            boxid_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 4;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BoxType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BoxType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Boxtype != other.Boxtype) return false;
          if (Isairdrop != other.Isairdrop) return false;
          if (Boxid != other.Boxid) return false;
          if (Owner != other.Owner) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Boxtype != 0) hash ^= Boxtype.GetHashCode();
          if (Isairdrop != false) hash ^= Isairdrop.GetHashCode();
          if (Boxid != 0) hash ^= Boxid.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Boxtype != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Boxtype);
          }
          if (Isairdrop != false) {
            output.WriteRawTag(16);
            output.WriteBool(Isairdrop);
          }
          if (Boxid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Boxid);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Owner);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Boxtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Boxtype);
          }
          if (Isairdrop != false) {
            size += 1 + 1;
          }
          if (Boxid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Boxid);
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BoxType other) {
          if (other == null) {
            return;
          }
          if (other.Boxtype != 0) {
            Boxtype = other.Boxtype;
          }
          if (other.Isairdrop != false) {
            Isairdrop = other.Isairdrop;
          }
          if (other.Boxid != 0) {
            Boxid = other.Boxid;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Boxtype = input.ReadUInt32();
                break;
              }
              case 16: {
                Isairdrop = input.ReadBool();
                break;
              }
              case 24: {
                Boxid = input.ReadUInt32();
                break;
              }
              case 32: {
                Owner = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PlaneState : pb::IMessage<B2C_PlaneState> {
        private static readonly pb::MessageParser<B2C_PlaneState> _parser = new pb::MessageParser<B2C_PlaneState>(() => pb.ProtobufManager.New<B2C_PlaneState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PlaneState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlaneState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Planeid = 0;
          Startx = 0;
          Starty = 0;
          Startz = 0;
          Endx = 0;
          Endy = 0;
          Endz = 0;
          Starttime = 0;
          Speed = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlaneState(B2C_PlaneState other) : this() {
          planeid_ = other.planeid_;
          startx_ = other.startx_;
          starty_ = other.starty_;
          startz_ = other.startz_;
          endx_ = other.endx_;
          endy_ = other.endy_;
          endz_ = other.endz_;
          starttime_ = other.starttime_;
          speed_ = other.speed_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlaneState Clone() {
          return new B2C_PlaneState(this);
        }

        /// <summary>Field number for the "planeid" field.</summary>
        public const int PlaneidFieldNumber = 1;
        private ulong planeid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Planeid {
          get { return planeid_; }
          set {
            planeid_ = value;
          }
        }

        /// <summary>Field number for the "startx" field.</summary>
        public const int StartxFieldNumber = 2;
        private float startx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Startx {
          get { return startx_; }
          set {
            startx_ = value;
          }
        }

        /// <summary>Field number for the "starty" field.</summary>
        public const int StartyFieldNumber = 3;
        private float starty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Starty {
          get { return starty_; }
          set {
            starty_ = value;
          }
        }

        /// <summary>Field number for the "startz" field.</summary>
        public const int StartzFieldNumber = 4;
        private float startz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Startz {
          get { return startz_; }
          set {
            startz_ = value;
          }
        }

        /// <summary>Field number for the "endx" field.</summary>
        public const int EndxFieldNumber = 5;
        private float endx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Endx {
          get { return endx_; }
          set {
            endx_ = value;
          }
        }

        /// <summary>Field number for the "endy" field.</summary>
        public const int EndyFieldNumber = 6;
        private float endy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Endy {
          get { return endy_; }
          set {
            endy_ = value;
          }
        }

        /// <summary>Field number for the "endz" field.</summary>
        public const int EndzFieldNumber = 7;
        private float endz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Endz {
          get { return endz_; }
          set {
            endz_ = value;
          }
        }

        /// <summary>Field number for the "starttime" field.</summary>
        public const int StarttimeFieldNumber = 8;
        private long starttime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Starttime {
          get { return starttime_; }
          set {
            starttime_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 9;
        private float speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PlaneState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PlaneState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Planeid != other.Planeid) return false;
          if (Startx != other.Startx) return false;
          if (Starty != other.Starty) return false;
          if (Startz != other.Startz) return false;
          if (Endx != other.Endx) return false;
          if (Endy != other.Endy) return false;
          if (Endz != other.Endz) return false;
          if (Starttime != other.Starttime) return false;
          if (Speed != other.Speed) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Planeid != 0UL) hash ^= Planeid.GetHashCode();
          if (Startx != 0F) hash ^= Startx.GetHashCode();
          if (Starty != 0F) hash ^= Starty.GetHashCode();
          if (Startz != 0F) hash ^= Startz.GetHashCode();
          if (Endx != 0F) hash ^= Endx.GetHashCode();
          if (Endy != 0F) hash ^= Endy.GetHashCode();
          if (Endz != 0F) hash ^= Endz.GetHashCode();
          if (Starttime != 0L) hash ^= Starttime.GetHashCode();
          if (Speed != 0F) hash ^= Speed.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Planeid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Planeid);
          }
          if (Startx != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Startx);
          }
          if (Starty != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Starty);
          }
          if (Startz != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Startz);
          }
          if (Endx != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Endx);
          }
          if (Endy != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(Endy);
          }
          if (Endz != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(Endz);
          }
          if (Starttime != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(Starttime);
          }
          if (Speed != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(Speed);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Planeid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Planeid);
          }
          if (Startx != 0F) {
            size += 1 + 4;
          }
          if (Starty != 0F) {
            size += 1 + 4;
          }
          if (Startz != 0F) {
            size += 1 + 4;
          }
          if (Endx != 0F) {
            size += 1 + 4;
          }
          if (Endy != 0F) {
            size += 1 + 4;
          }
          if (Endz != 0F) {
            size += 1 + 4;
          }
          if (Starttime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Starttime);
          }
          if (Speed != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PlaneState other) {
          if (other == null) {
            return;
          }
          if (other.Planeid != 0UL) {
            Planeid = other.Planeid;
          }
          if (other.Startx != 0F) {
            Startx = other.Startx;
          }
          if (other.Starty != 0F) {
            Starty = other.Starty;
          }
          if (other.Startz != 0F) {
            Startz = other.Startz;
          }
          if (other.Endx != 0F) {
            Endx = other.Endx;
          }
          if (other.Endy != 0F) {
            Endy = other.Endy;
          }
          if (other.Endz != 0F) {
            Endz = other.Endz;
          }
          if (other.Starttime != 0L) {
            Starttime = other.Starttime;
          }
          if (other.Speed != 0F) {
            Speed = other.Speed;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Planeid = input.ReadUInt64();
                break;
              }
              case 21: {
                Startx = input.ReadFloat();
                break;
              }
              case 29: {
                Starty = input.ReadFloat();
                break;
              }
              case 37: {
                Startz = input.ReadFloat();
                break;
              }
              case 45: {
                Endx = input.ReadFloat();
                break;
              }
              case 53: {
                Endy = input.ReadFloat();
                break;
              }
              case 61: {
                Endz = input.ReadFloat();
                break;
              }
              case 64: {
                Starttime = input.ReadInt64();
                break;
              }
              case 77: {
                Speed = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Equipment : pb::IMessage<B2C_Equipment> {
        private static readonly pb::MessageParser<B2C_Equipment> _parser = new pb::MessageParser<B2C_Equipment>(() => pb.ProtobufManager.New<B2C_Equipment>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Equipment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Equipment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Helmet = 0;
          Vest = 0;
          Weapon = 0;
          Backmain = 0;
          Backsecond = 0;
          Shoes = 0;
          Weaponready = false;
          Backmainready = false;
          Backsecready = false;
          Pet = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Equipment(B2C_Equipment other) : this() {
          helmet_ = other.helmet_;
          vest_ = other.vest_;
          weapon_ = other.weapon_;
          backmain_ = other.backmain_;
          backsecond_ = other.backsecond_;
          shoes_ = other.shoes_;
          weaponready_ = other.weaponready_;
          backmainready_ = other.backmainready_;
          backsecready_ = other.backsecready_;
          pet_ = other.pet_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Equipment Clone() {
          return new B2C_Equipment(this);
        }

        /// <summary>Field number for the "helmet" field.</summary>
        public const int HelmetFieldNumber = 1;
        private uint helmet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Helmet {
          get { return helmet_; }
          set {
            helmet_ = value;
          }
        }

        /// <summary>Field number for the "vest" field.</summary>
        public const int VestFieldNumber = 2;
        private uint vest_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Vest {
          get { return vest_; }
          set {
            vest_ = value;
          }
        }

        /// <summary>Field number for the "weapon" field.</summary>
        public const int WeaponFieldNumber = 3;
        private uint weapon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Weapon {
          get { return weapon_; }
          set {
            weapon_ = value;
          }
        }

        /// <summary>Field number for the "backmain" field.</summary>
        public const int BackmainFieldNumber = 4;
        private uint backmain_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Backmain {
          get { return backmain_; }
          set {
            backmain_ = value;
          }
        }

        /// <summary>Field number for the "backsecond" field.</summary>
        public const int BacksecondFieldNumber = 5;
        private uint backsecond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Backsecond {
          get { return backsecond_; }
          set {
            backsecond_ = value;
          }
        }

        /// <summary>Field number for the "shoes" field.</summary>
        public const int ShoesFieldNumber = 6;
        private uint shoes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Shoes {
          get { return shoes_; }
          set {
            shoes_ = value;
          }
        }

        /// <summary>Field number for the "weaponready" field.</summary>
        public const int WeaponreadyFieldNumber = 7;
        private bool weaponready_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Weaponready {
          get { return weaponready_; }
          set {
            weaponready_ = value;
          }
        }

        /// <summary>Field number for the "backmainready" field.</summary>
        public const int BackmainreadyFieldNumber = 8;
        private bool backmainready_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Backmainready {
          get { return backmainready_; }
          set {
            backmainready_ = value;
          }
        }

        /// <summary>Field number for the "backsecready" field.</summary>
        public const int BacksecreadyFieldNumber = 9;
        private bool backsecready_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Backsecready {
          get { return backsecready_; }
          set {
            backsecready_ = value;
          }
        }

        /// <summary>Field number for the "pet" field.</summary>
        public const int PetFieldNumber = 10;
        private uint pet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Pet {
          get { return pet_; }
          set {
            pet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Equipment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Equipment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Helmet != other.Helmet) return false;
          if (Vest != other.Vest) return false;
          if (Weapon != other.Weapon) return false;
          if (Backmain != other.Backmain) return false;
          if (Backsecond != other.Backsecond) return false;
          if (Shoes != other.Shoes) return false;
          if (Weaponready != other.Weaponready) return false;
          if (Backmainready != other.Backmainready) return false;
          if (Backsecready != other.Backsecready) return false;
          if (Pet != other.Pet) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Helmet != 0) hash ^= Helmet.GetHashCode();
          if (Vest != 0) hash ^= Vest.GetHashCode();
          if (Weapon != 0) hash ^= Weapon.GetHashCode();
          if (Backmain != 0) hash ^= Backmain.GetHashCode();
          if (Backsecond != 0) hash ^= Backsecond.GetHashCode();
          if (Shoes != 0) hash ^= Shoes.GetHashCode();
          if (Weaponready != false) hash ^= Weaponready.GetHashCode();
          if (Backmainready != false) hash ^= Backmainready.GetHashCode();
          if (Backsecready != false) hash ^= Backsecready.GetHashCode();
          if (Pet != 0) hash ^= Pet.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Helmet != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Helmet);
          }
          if (Vest != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Vest);
          }
          if (Weapon != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Weapon);
          }
          if (Backmain != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Backmain);
          }
          if (Backsecond != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Backsecond);
          }
          if (Shoes != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Shoes);
          }
          if (Weaponready != false) {
            output.WriteRawTag(56);
            output.WriteBool(Weaponready);
          }
          if (Backmainready != false) {
            output.WriteRawTag(64);
            output.WriteBool(Backmainready);
          }
          if (Backsecready != false) {
            output.WriteRawTag(72);
            output.WriteBool(Backsecready);
          }
          if (Pet != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Pet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Helmet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Helmet);
          }
          if (Vest != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vest);
          }
          if (Weapon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weapon);
          }
          if (Backmain != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Backmain);
          }
          if (Backsecond != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Backsecond);
          }
          if (Shoes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shoes);
          }
          if (Weaponready != false) {
            size += 1 + 1;
          }
          if (Backmainready != false) {
            size += 1 + 1;
          }
          if (Backsecready != false) {
            size += 1 + 1;
          }
          if (Pet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pet);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Equipment other) {
          if (other == null) {
            return;
          }
          if (other.Helmet != 0) {
            Helmet = other.Helmet;
          }
          if (other.Vest != 0) {
            Vest = other.Vest;
          }
          if (other.Weapon != 0) {
            Weapon = other.Weapon;
          }
          if (other.Backmain != 0) {
            Backmain = other.Backmain;
          }
          if (other.Backsecond != 0) {
            Backsecond = other.Backsecond;
          }
          if (other.Shoes != 0) {
            Shoes = other.Shoes;
          }
          if (other.Weaponready != false) {
            Weaponready = other.Weaponready;
          }
          if (other.Backmainready != false) {
            Backmainready = other.Backmainready;
          }
          if (other.Backsecready != false) {
            Backsecready = other.Backsecready;
          }
          if (other.Pet != 0) {
            Pet = other.Pet;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Helmet = input.ReadUInt32();
                break;
              }
              case 16: {
                Vest = input.ReadUInt32();
                break;
              }
              case 24: {
                Weapon = input.ReadUInt32();
                break;
              }
              case 32: {
                Backmain = input.ReadUInt32();
                break;
              }
              case 40: {
                Backsecond = input.ReadUInt32();
                break;
              }
              case 48: {
                Shoes = input.ReadUInt32();
                break;
              }
              case 56: {
                Weaponready = input.ReadBool();
                break;
              }
              case 64: {
                Backmainready = input.ReadBool();
                break;
              }
              case 72: {
                Backsecready = input.ReadBool();
                break;
              }
              case 80: {
                Pet = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_BeCureEffect : pb::IMessage<B2C_BeCureEffect> {
        private static readonly pb::MessageParser<B2C_BeCureEffect> _parser = new pb::MessageParser<B2C_BeCureEffect>(() => pb.ProtobufManager.New<B2C_BeCureEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BeCureEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BeCureEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Becuring = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BeCureEffect(B2C_BeCureEffect other) : this() {
          becuring_ = other.becuring_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BeCureEffect Clone() {
          return new B2C_BeCureEffect(this);
        }

        /// <summary>Field number for the "becuring" field.</summary>
        public const int BecuringFieldNumber = 1;
        private bool becuring_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Becuring {
          get { return becuring_; }
          set {
            becuring_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BeCureEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BeCureEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Becuring != other.Becuring) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Becuring != false) hash ^= Becuring.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Becuring != false) {
            output.WriteRawTag(8);
            output.WriteBool(Becuring);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Becuring != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BeCureEffect other) {
          if (other == null) {
            return;
          }
          if (other.Becuring != false) {
            Becuring = other.Becuring;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Becuring = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_CureEffect : pb::IMessage<B2C_CureEffect> {
        private static readonly pb::MessageParser<B2C_CureEffect> _parser = new pb::MessageParser<B2C_CureEffect>(() => pb.ProtobufManager.New<B2C_CureEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_CureEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CureEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Curing = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CureEffect(B2C_CureEffect other) : this() {
          curing_ = other.curing_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CureEffect Clone() {
          return new B2C_CureEffect(this);
        }

        /// <summary>Field number for the "curing" field.</summary>
        public const int CuringFieldNumber = 1;
        private bool curing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Curing {
          get { return curing_; }
          set {
            curing_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_CureEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_CureEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Curing != other.Curing) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Curing != false) hash ^= Curing.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Curing != false) {
            output.WriteRawTag(8);
            output.WriteBool(Curing);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Curing != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_CureEffect other) {
          if (other == null) {
            return;
          }
          if (other.Curing != false) {
            Curing = other.Curing;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Curing = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_KillEffect : pb::IMessage<B2C_KillEffect> {
        private static readonly pb::MessageParser<B2C_KillEffect> _parser = new pb::MessageParser<B2C_KillEffect>(() => pb.ProtobufManager.New<B2C_KillEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_KillEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Killing = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillEffect(B2C_KillEffect other) : this() {
          killing_ = other.killing_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillEffect Clone() {
          return new B2C_KillEffect(this);
        }

        /// <summary>Field number for the "killing" field.</summary>
        public const int KillingFieldNumber = 1;
        private bool killing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Killing {
          get { return killing_; }
          set {
            killing_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_KillEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_KillEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Killing != other.Killing) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Killing != false) hash ^= Killing.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Killing != false) {
            output.WriteRawTag(8);
            output.WriteBool(Killing);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Killing != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_KillEffect other) {
          if (other == null) {
            return;
          }
          if (other.Killing != false) {
            Killing = other.Killing;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Killing = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SlowRecovery : pb::IMessage<B2C_SlowRecovery> {
        private static readonly pb::MessageParser<B2C_SlowRecovery> _parser = new pb::MessageParser<B2C_SlowRecovery>(() => pb.ProtobufManager.New<B2C_SlowRecovery>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SlowRecovery> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SlowRecovery() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Recovery = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SlowRecovery(B2C_SlowRecovery other) : this() {
          recovery_ = other.recovery_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SlowRecovery Clone() {
          return new B2C_SlowRecovery(this);
        }

        /// <summary>Field number for the "recovery" field.</summary>
        public const int RecoveryFieldNumber = 1;
        private int recovery_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Recovery {
          get { return recovery_; }
          set {
            recovery_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SlowRecovery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SlowRecovery other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Recovery != other.Recovery) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Recovery != 0) hash ^= Recovery.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Recovery != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Recovery);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Recovery != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Recovery);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SlowRecovery other) {
          if (other == null) {
            return;
          }
          if (other.Recovery != 0) {
            Recovery = other.Recovery;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Recovery = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_HouseData : pb::IMessage<B2C_HouseData> {
        private static readonly pb::MessageParser<B2C_HouseData> _parser = new pb::MessageParser<B2C_HouseData>(() => pb.ProtobufManager.New<B2C_HouseData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_HouseData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HouseData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          State = 0;
          Doorid = 0;
          Revive = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HouseData(B2C_HouseData other) : this() {
          state_ = other.state_;
          doorid_ = other.doorid_;
          revive_ = other.revive_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HouseData Clone() {
          return new B2C_HouseData(this);
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 1;
        private int state_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "doorid" field.</summary>
        public const int DooridFieldNumber = 2;
        private int doorid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Doorid {
          get { return doorid_; }
          set {
            doorid_ = value;
          }
        }

        /// <summary>Field number for the "revive" field.</summary>
        public const int ReviveFieldNumber = 3;
        private bool revive_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Revive {
          get { return revive_; }
          set {
            revive_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_HouseData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_HouseData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (State != other.State) return false;
          if (Doorid != other.Doorid) return false;
          if (Revive != other.Revive) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (State != 0) hash ^= State.GetHashCode();
          if (Doorid != 0) hash ^= Doorid.GetHashCode();
          if (Revive != false) hash ^= Revive.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (State != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(State);
          }
          if (Doorid != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Doorid);
          }
          if (Revive != false) {
            output.WriteRawTag(24);
            output.WriteBool(Revive);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
          }
          if (Doorid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Doorid);
          }
          if (Revive != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_HouseData other) {
          if (other == null) {
            return;
          }
          if (other.State != 0) {
            State = other.State;
          }
          if (other.Doorid != 0) {
            Doorid = other.Doorid;
          }
          if (other.Revive != false) {
            Revive = other.Revive;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                State = input.ReadInt32();
                break;
              }
              case 16: {
                Doorid = input.ReadInt32();
                break;
              }
              case 24: {
                Revive = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_VehicleState : pb::IMessage<B2C_VehicleState> {
        private static readonly pb::MessageParser<B2C_VehicleState> _parser = new pb::MessageParser<B2C_VehicleState>(() => pb.ProtobufManager.New<B2C_VehicleState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_VehicleState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VehicleState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.Vector4PB>(facedir_);
          facedir_ = null;
          Vehicletypeid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VehicleState(B2C_VehicleState other) : this() {
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
          Facedir = other.facedir_ != null ? other.Facedir.Clone() : null;
          vehicletypeid_ = other.vehicletypeid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VehicleState Clone() {
          return new B2C_VehicleState(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "facedir" field.</summary>
        public const int FacedirFieldNumber = 2;
        private global::Pb.Vector4PB facedir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector4PB Facedir {
          get { return facedir_; }
          set {
            facedir_ = value;
          }
        }

        /// <summary>Field number for the "vehicletypeid" field.</summary>
        public const int VehicletypeidFieldNumber = 3;
        private uint vehicletypeid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Vehicletypeid {
          get { return vehicletypeid_; }
          set {
            vehicletypeid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_VehicleState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_VehicleState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Pos, other.Pos)) return false;
          if (!object.Equals(Facedir, other.Facedir)) return false;
          if (Vehicletypeid != other.Vehicletypeid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (facedir_ != null) hash ^= Facedir.GetHashCode();
          if (Vehicletypeid != 0) hash ^= Vehicletypeid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (pos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Pos);
          }
          if (facedir_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Facedir);
          }
          if (Vehicletypeid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Vehicletypeid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (facedir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Facedir);
          }
          if (Vehicletypeid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vehicletypeid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_VehicleState other) {
          if (other == null) {
            return;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.facedir_ != null) {
            if (facedir_ == null) {
              facedir_ = pb.ProtobufManager.New<global::Pb.Vector4PB>();
            }
            Facedir.MergeFrom(other.Facedir);
          }
          if (other.Vehicletypeid != 0) {
            Vehicletypeid = other.Vehicletypeid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 18: {
                if (facedir_ == null) {
                  facedir_ = pb.ProtobufManager.New<global::Pb.Vector4PB>();
                }
                input.ReadMessage(facedir_);
                break;
              }
              case 24: {
                Vehicletypeid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PlayerVehicle : pb::IMessage<B2C_PlayerVehicle> {
        private static readonly pb::MessageParser<B2C_PlayerVehicle> _parser = new pb::MessageParser<B2C_PlayerVehicle>(() => pb.ProtobufManager.New<B2C_PlayerVehicle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PlayerVehicle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlayerVehicle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Vehicleid = 0;
          Seatid = 0;
          Type = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlayerVehicle(B2C_PlayerVehicle other) : this() {
          vehicleid_ = other.vehicleid_;
          seatid_ = other.seatid_;
          type_ = other.type_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlayerVehicle Clone() {
          return new B2C_PlayerVehicle(this);
        }

        /// <summary>Field number for the "vehicleid" field.</summary>
        public const int VehicleidFieldNumber = 1;
        private ulong vehicleid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Vehicleid {
          get { return vehicleid_; }
          set {
            vehicleid_ = value;
          }
        }

        /// <summary>Field number for the "seatid" field.</summary>
        public const int SeatidFieldNumber = 2;
        private uint seatid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Seatid {
          get { return seatid_; }
          set {
            seatid_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private global::Pb.VehicleType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.VehicleType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PlayerVehicle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PlayerVehicle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Vehicleid != other.Vehicleid) return false;
          if (Seatid != other.Seatid) return false;
          if (Type != other.Type) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Vehicleid != 0UL) hash ^= Vehicleid.GetHashCode();
          if (Seatid != 0) hash ^= Seatid.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Vehicleid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Vehicleid);
          }
          if (Seatid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Seatid);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Vehicleid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Vehicleid);
          }
          if (Seatid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seatid);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PlayerVehicle other) {
          if (other == null) {
            return;
          }
          if (other.Vehicleid != 0UL) {
            Vehicleid = other.Vehicleid;
          }
          if (other.Seatid != 0) {
            Seatid = other.Seatid;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Vehicleid = input.ReadUInt64();
                break;
              }
              case 16: {
                Seatid = input.ReadUInt32();
                break;
              }
              case 24: {
                type_ = (global::Pb.VehicleType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Bullet : pb::IMessage<B2C_Bullet> {
        private static readonly pb::MessageParser<B2C_Bullet> _parser = new pb::MessageParser<B2C_Bullet>(() => pb.ProtobufManager.New<B2C_Bullet>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Bullet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Bullet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Mainbullet = 0;
          Secondbullet = 0;
          Defbullet = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Bullet(B2C_Bullet other) : this() {
          mainbullet_ = other.mainbullet_;
          secondbullet_ = other.secondbullet_;
          defbullet_ = other.defbullet_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Bullet Clone() {
          return new B2C_Bullet(this);
        }

        /// <summary>Field number for the "mainbullet" field.</summary>
        public const int MainbulletFieldNumber = 1;
        private int mainbullet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mainbullet {
          get { return mainbullet_; }
          set {
            mainbullet_ = value;
          }
        }

        /// <summary>Field number for the "secondbullet" field.</summary>
        public const int SecondbulletFieldNumber = 2;
        private int secondbullet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Secondbullet {
          get { return secondbullet_; }
          set {
            secondbullet_ = value;
          }
        }

        /// <summary>Field number for the "defbullet" field.</summary>
        public const int DefbulletFieldNumber = 3;
        private int defbullet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Defbullet {
          get { return defbullet_; }
          set {
            defbullet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Bullet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Bullet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Mainbullet != other.Mainbullet) return false;
          if (Secondbullet != other.Secondbullet) return false;
          if (Defbullet != other.Defbullet) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Mainbullet != 0) hash ^= Mainbullet.GetHashCode();
          if (Secondbullet != 0) hash ^= Secondbullet.GetHashCode();
          if (Defbullet != 0) hash ^= Defbullet.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Mainbullet != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Mainbullet);
          }
          if (Secondbullet != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Secondbullet);
          }
          if (Defbullet != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Defbullet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Mainbullet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mainbullet);
          }
          if (Secondbullet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Secondbullet);
          }
          if (Defbullet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defbullet);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Bullet other) {
          if (other == null) {
            return;
          }
          if (other.Mainbullet != 0) {
            Mainbullet = other.Mainbullet;
          }
          if (other.Secondbullet != 0) {
            Secondbullet = other.Secondbullet;
          }
          if (other.Defbullet != 0) {
            Defbullet = other.Defbullet;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Mainbullet = input.ReadInt32();
                break;
              }
              case 16: {
                Secondbullet = input.ReadInt32();
                break;
              }
              case 24: {
                Defbullet = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Weapon : pb::IMessage<B2C_Weapon> {
        private static readonly pb::MessageParser<B2C_Weapon> _parser = new pb::MessageParser<B2C_Weapon>(() => pb.ProtobufManager.New<B2C_Weapon>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Weapon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Weapon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          ActiveIdx = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Weapon(B2C_Weapon other) : this() {
          activeIdx_ = other.activeIdx_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Weapon Clone() {
          return new B2C_Weapon(this);
        }

        /// <summary>Field number for the "activeIdx" field.</summary>
        public const int ActiveIdxFieldNumber = 1;
        private int activeIdx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ActiveIdx {
          get { return activeIdx_; }
          set {
            activeIdx_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Weapon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Weapon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ActiveIdx != other.ActiveIdx) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ActiveIdx != 0) hash ^= ActiveIdx.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ActiveIdx != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ActiveIdx);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ActiveIdx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveIdx);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Weapon other) {
          if (other == null) {
            return;
          }
          if (other.ActiveIdx != 0) {
            ActiveIdx = other.ActiveIdx;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ActiveIdx = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Package : pb::IMessage<B2C_Package> {
        private static readonly pb::MessageParser<B2C_Package> _parser = new pb::MessageParser<B2C_Package>(() => pb.ProtobufManager.New<B2C_Package>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Package> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Package() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Maxweight = 0;
          Weight = 0;
          pb.ProtobufManager.Reclaim<global::Pb.ItemData>(mainweapon_);
          mainweapon_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.ItemData>(secondweapon_);
          secondweapon_ = null;
          for (int i = 0; i < cores_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ItemData>(cores_[i]);
          }
          cores_.Clear();
          for (int i = 0; i < backpack_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ItemData>(backpack_[i]);
          }
          backpack_.Clear();
          pb.ProtobufManager.Reclaim<global::Pb.ItemData>(helmet_);
          helmet_ = null;
          for (int i = 0; i < passive_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ItemData>(passive_[i]);
          }
          passive_.Clear();
          pb.ProtobufManager.Reclaim<global::Pb.ItemData>(pet_);
          pet_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Package(B2C_Package other) : this() {
          maxweight_ = other.maxweight_;
          weight_ = other.weight_;
          Mainweapon = other.mainweapon_ != null ? other.Mainweapon.Clone() : null;
          Secondweapon = other.secondweapon_ != null ? other.Secondweapon.Clone() : null;
          cores_ = other.cores_.Clone();
          backpack_ = other.backpack_.Clone();
          Helmet = other.helmet_ != null ? other.Helmet.Clone() : null;
          passive_ = other.passive_.Clone();
          Pet = other.pet_ != null ? other.Pet.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Package Clone() {
          return new B2C_Package(this);
        }

        /// <summary>Field number for the "maxweight" field.</summary>
        public const int MaxweightFieldNumber = 1;
        private int maxweight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxweight {
          get { return maxweight_; }
          set {
            maxweight_ = value;
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 2;
        private int weight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }

        /// <summary>Field number for the "mainweapon" field.</summary>
        public const int MainweaponFieldNumber = 3;
        private global::Pb.ItemData mainweapon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.ItemData Mainweapon {
          get { return mainweapon_; }
          set {
            mainweapon_ = value;
          }
        }

        /// <summary>Field number for the "secondweapon" field.</summary>
        public const int SecondweaponFieldNumber = 4;
        private global::Pb.ItemData secondweapon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.ItemData Secondweapon {
          get { return secondweapon_; }
          set {
            secondweapon_ = value;
          }
        }

        /// <summary>Field number for the "cores" field.</summary>
        public const int CoresFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_cores_codec
            = pb::FieldCodec.ForMessage(42, global::Pb.ItemData.Parser);
        private readonly pbc::RepeatedField<global::Pb.ItemData> cores_ = new pbc::RepeatedField<global::Pb.ItemData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ItemData> Cores {
          get { return cores_; }
        }

        /// <summary>Field number for the "backpack" field.</summary>
        public const int BackpackFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_backpack_codec
            = pb::FieldCodec.ForMessage(50, global::Pb.ItemData.Parser);
        private readonly pbc::RepeatedField<global::Pb.ItemData> backpack_ = new pbc::RepeatedField<global::Pb.ItemData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ItemData> Backpack {
          get { return backpack_; }
        }

        /// <summary>Field number for the "helmet" field.</summary>
        public const int HelmetFieldNumber = 7;
        private global::Pb.ItemData helmet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.ItemData Helmet {
          get { return helmet_; }
          set {
            helmet_ = value;
          }
        }

        /// <summary>Field number for the "passive" field.</summary>
        public const int PassiveFieldNumber = 8;
        private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_passive_codec
            = pb::FieldCodec.ForMessage(66, global::Pb.ItemData.Parser);
        private readonly pbc::RepeatedField<global::Pb.ItemData> passive_ = new pbc::RepeatedField<global::Pb.ItemData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ItemData> Passive {
          get { return passive_; }
        }

        /// <summary>Field number for the "pet" field.</summary>
        public const int PetFieldNumber = 9;
        private global::Pb.ItemData pet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.ItemData Pet {
          get { return pet_; }
          set {
            pet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Package);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Package other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Maxweight != other.Maxweight) return false;
          if (Weight != other.Weight) return false;
          if (!object.Equals(Mainweapon, other.Mainweapon)) return false;
          if (!object.Equals(Secondweapon, other.Secondweapon)) return false;
          if(!cores_.Equals(other.cores_)) return false;
          if(!backpack_.Equals(other.backpack_)) return false;
          if (!object.Equals(Helmet, other.Helmet)) return false;
          if(!passive_.Equals(other.passive_)) return false;
          if (!object.Equals(Pet, other.Pet)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Maxweight != 0) hash ^= Maxweight.GetHashCode();
          if (Weight != 0) hash ^= Weight.GetHashCode();
          if (mainweapon_ != null) hash ^= Mainweapon.GetHashCode();
          if (secondweapon_ != null) hash ^= Secondweapon.GetHashCode();
          hash ^= cores_.GetHashCode();
          hash ^= backpack_.GetHashCode();
          if (helmet_ != null) hash ^= Helmet.GetHashCode();
          hash ^= passive_.GetHashCode();
          if (pet_ != null) hash ^= Pet.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Maxweight != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Maxweight);
          }
          if (Weight != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Weight);
          }
          if (mainweapon_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Mainweapon);
          }
          if (secondweapon_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Secondweapon);
          }
          cores_.WriteTo(output, _repeated_cores_codec);
          backpack_.WriteTo(output, _repeated_backpack_codec);
          if (helmet_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Helmet);
          }
          passive_.WriteTo(output, _repeated_passive_codec);
          if (pet_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(Pet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Maxweight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxweight);
          }
          if (Weight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
          }
          if (mainweapon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mainweapon);
          }
          if (secondweapon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Secondweapon);
          }
          size += cores_.CalculateSize(_repeated_cores_codec);
          size += backpack_.CalculateSize(_repeated_backpack_codec);
          if (helmet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Helmet);
          }
          size += passive_.CalculateSize(_repeated_passive_codec);
          if (pet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Package other) {
          if (other == null) {
            return;
          }
          if (other.Maxweight != 0) {
            Maxweight = other.Maxweight;
          }
          if (other.Weight != 0) {
            Weight = other.Weight;
          }
          if (other.mainweapon_ != null) {
            if (mainweapon_ == null) {
              mainweapon_ = pb.ProtobufManager.New<global::Pb.ItemData>();
            }
            Mainweapon.MergeFrom(other.Mainweapon);
          }
          if (other.secondweapon_ != null) {
            if (secondweapon_ == null) {
              secondweapon_ = pb.ProtobufManager.New<global::Pb.ItemData>();
            }
            Secondweapon.MergeFrom(other.Secondweapon);
          }
          cores_.Add(other.cores_);
          backpack_.Add(other.backpack_);
          if (other.helmet_ != null) {
            if (helmet_ == null) {
              helmet_ = pb.ProtobufManager.New<global::Pb.ItemData>();
            }
            Helmet.MergeFrom(other.Helmet);
          }
          passive_.Add(other.passive_);
          if (other.pet_ != null) {
            if (pet_ == null) {
              pet_ = pb.ProtobufManager.New<global::Pb.ItemData>();
            }
            Pet.MergeFrom(other.Pet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Maxweight = input.ReadInt32();
                break;
              }
              case 16: {
                Weight = input.ReadInt32();
                break;
              }
              case 26: {
                if (mainweapon_ == null) {
                  mainweapon_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                }
                input.ReadMessage(mainweapon_);
                break;
              }
              case 34: {
                if (secondweapon_ == null) {
                  secondweapon_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                }
                input.ReadMessage(secondweapon_);
                break;
              }
              case 42: {
                cores_.AddEntriesFrom(input, _repeated_cores_codec);
                break;
              }
              case 50: {
                backpack_.AddEntriesFrom(input, _repeated_backpack_codec);
                break;
              }
              case 58: {
                if (helmet_ == null) {
                  helmet_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                }
                input.ReadMessage(helmet_);
                break;
              }
              case 66: {
                passive_.AddEntriesFrom(input, _repeated_passive_codec);
                break;
              }
              case 74: {
                if (pet_ == null) {
                  pet_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                }
                input.ReadMessage(pet_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_ReloadEffect : pb::IMessage<B2C_ReloadEffect> {
        private static readonly pb::MessageParser<B2C_ReloadEffect> _parser = new pb::MessageParser<B2C_ReloadEffect>(() => pb.ProtobufManager.New<B2C_ReloadEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ReloadEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ReloadEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Reloading = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ReloadEffect(B2C_ReloadEffect other) : this() {
          reloading_ = other.reloading_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ReloadEffect Clone() {
          return new B2C_ReloadEffect(this);
        }

        /// <summary>Field number for the "reloading" field.</summary>
        public const int ReloadingFieldNumber = 1;
        private bool reloading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Reloading {
          get { return reloading_; }
          set {
            reloading_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ReloadEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ReloadEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Reloading != other.Reloading) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Reloading != false) hash ^= Reloading.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Reloading != false) {
            output.WriteRawTag(8);
            output.WriteBool(Reloading);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Reloading != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ReloadEffect other) {
          if (other == null) {
            return;
          }
          if (other.Reloading != false) {
            Reloading = other.Reloading;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Reloading = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_RecoveryEffect : pb::IMessage<B2C_RecoveryEffect> {
        private static readonly pb::MessageParser<B2C_RecoveryEffect> _parser = new pb::MessageParser<B2C_RecoveryEffect>(() => pb.ProtobufManager.New<B2C_RecoveryEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_RecoveryEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_RecoveryEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Recovering = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_RecoveryEffect(B2C_RecoveryEffect other) : this() {
          recovering_ = other.recovering_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_RecoveryEffect Clone() {
          return new B2C_RecoveryEffect(this);
        }

        /// <summary>Field number for the "recovering" field.</summary>
        public const int RecoveringFieldNumber = 1;
        private bool recovering_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Recovering {
          get { return recovering_; }
          set {
            recovering_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_RecoveryEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_RecoveryEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Recovering != other.Recovering) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Recovering != false) hash ^= Recovering.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Recovering != false) {
            output.WriteRawTag(8);
            output.WriteBool(Recovering);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Recovering != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_RecoveryEffect other) {
          if (other == null) {
            return;
          }
          if (other.Recovering != false) {
            Recovering = other.Recovering;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Recovering = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_GrenadeData : pb::IMessage<B2C_GrenadeData> {
        private static readonly pb::MessageParser<B2C_GrenadeData> _parser = new pb::MessageParser<B2C_GrenadeData>(() => pb.ProtobufManager.New<B2C_GrenadeData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_GrenadeData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GrenadeData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
          Skillid = 0;
          Owner = 0;
          Dirx = 0;
          Diry = 0;
          Dirz = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GrenadeData(B2C_GrenadeData other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          skillid_ = other.skillid_;
          owner_ = other.owner_;
          dirx_ = other.dirx_;
          diry_ = other.diry_;
          dirz_ = other.dirz_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GrenadeData Clone() {
          return new B2C_GrenadeData(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 4;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 5;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "dirx" field.</summary>
        public const int DirxFieldNumber = 6;
        private float dirx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Dirx {
          get { return dirx_; }
          set {
            dirx_ = value;
          }
        }

        /// <summary>Field number for the "diry" field.</summary>
        public const int DiryFieldNumber = 7;
        private float diry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Diry {
          get { return diry_; }
          set {
            diry_ = value;
          }
        }

        /// <summary>Field number for the "dirz" field.</summary>
        public const int DirzFieldNumber = 8;
        private float dirz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Dirz {
          get { return dirz_; }
          set {
            dirz_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_GrenadeData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_GrenadeData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          if (Skillid != other.Skillid) return false;
          if (Owner != other.Owner) return false;
          if (Dirx != other.Dirx) return false;
          if (Diry != other.Diry) return false;
          if (Dirz != other.Dirz) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          if (Dirx != 0F) hash ^= Dirx.GetHashCode();
          if (Diry != 0F) hash ^= Diry.GetHashCode();
          if (Dirz != 0F) hash ^= Dirz.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (Skillid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Skillid);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Owner);
          }
          if (Dirx != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(Dirx);
          }
          if (Diry != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(Diry);
          }
          if (Dirz != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(Dirz);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          if (Dirx != 0F) {
            size += 1 + 4;
          }
          if (Diry != 0F) {
            size += 1 + 4;
          }
          if (Dirz != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_GrenadeData other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
          if (other.Dirx != 0F) {
            Dirx = other.Dirx;
          }
          if (other.Diry != 0F) {
            Diry = other.Diry;
          }
          if (other.Dirz != 0F) {
            Dirz = other.Dirz;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
              case 32: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 40: {
                Owner = input.ReadUInt64();
                break;
              }
              case 53: {
                Dirx = input.ReadFloat();
                break;
              }
              case 61: {
                Diry = input.ReadFloat();
                break;
              }
              case 69: {
                Dirz = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Shield : pb::IMessage<B2C_Shield> {
        private static readonly pb::MessageParser<B2C_Shield> _parser = new pb::MessageParser<B2C_Shield>(() => pb.ProtobufManager.New<B2C_Shield>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Shield> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shield() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Shieldhp = 0;
          Shieldmaxhp = 0;
          Reason = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shield(B2C_Shield other) : this() {
          shieldhp_ = other.shieldhp_;
          shieldmaxhp_ = other.shieldmaxhp_;
          reason_ = other.reason_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shield Clone() {
          return new B2C_Shield(this);
        }

        /// <summary>Field number for the "shieldhp" field.</summary>
        public const int ShieldhpFieldNumber = 1;
        private int shieldhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Shieldhp {
          get { return shieldhp_; }
          set {
            shieldhp_ = value;
          }
        }

        /// <summary>Field number for the "shieldmaxhp" field.</summary>
        public const int ShieldmaxhpFieldNumber = 2;
        private int shieldmaxhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Shieldmaxhp {
          get { return shieldmaxhp_; }
          set {
            shieldmaxhp_ = value;
          }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 3;
        private global::Pb.KillReason reason_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.KillReason Reason {
          get { return reason_; }
          set {
            reason_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Shield);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Shield other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Shieldhp != other.Shieldhp) return false;
          if (Shieldmaxhp != other.Shieldmaxhp) return false;
          if (Reason != other.Reason) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Shieldhp != 0) hash ^= Shieldhp.GetHashCode();
          if (Shieldmaxhp != 0) hash ^= Shieldmaxhp.GetHashCode();
          if (Reason != 0) hash ^= Reason.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Shieldhp != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Shieldhp);
          }
          if (Shieldmaxhp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Shieldmaxhp);
          }
          if (Reason != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Reason);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Shieldhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shieldhp);
          }
          if (Shieldmaxhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shieldmaxhp);
          }
          if (Reason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Shield other) {
          if (other == null) {
            return;
          }
          if (other.Shieldhp != 0) {
            Shieldhp = other.Shieldhp;
          }
          if (other.Shieldmaxhp != 0) {
            Shieldmaxhp = other.Shieldmaxhp;
          }
          if (other.Reason != 0) {
            Reason = other.Reason;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Shieldhp = input.ReadInt32();
                break;
              }
              case 16: {
                Shieldmaxhp = input.ReadInt32();
                break;
              }
              case 24: {
                reason_ = (global::Pb.KillReason) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Endurance : pb::IMessage<B2C_Endurance> {
        private static readonly pb::MessageParser<B2C_Endurance> _parser = new pb::MessageParser<B2C_Endurance>(() => pb.ProtobufManager.New<B2C_Endurance>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Endurance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Endurance() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Vest = 0;
          Helmet = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Endurance(B2C_Endurance other) : this() {
          vest_ = other.vest_;
          helmet_ = other.helmet_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Endurance Clone() {
          return new B2C_Endurance(this);
        }

        /// <summary>Field number for the "vest" field.</summary>
        public const int VestFieldNumber = 1;
        private int vest_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Vest {
          get { return vest_; }
          set {
            vest_ = value;
          }
        }

        /// <summary>Field number for the "helmet" field.</summary>
        public const int HelmetFieldNumber = 2;
        private int helmet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Helmet {
          get { return helmet_; }
          set {
            helmet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Endurance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Endurance other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Vest != other.Vest) return false;
          if (Helmet != other.Helmet) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Vest != 0) hash ^= Vest.GetHashCode();
          if (Helmet != 0) hash ^= Helmet.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Vest != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Vest);
          }
          if (Helmet != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Helmet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Vest != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vest);
          }
          if (Helmet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Helmet);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Endurance other) {
          if (other == null) {
            return;
          }
          if (other.Vest != 0) {
            Vest = other.Vest;
          }
          if (other.Helmet != 0) {
            Helmet = other.Helmet;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Vest = input.ReadInt32();
                break;
              }
              case 16: {
                Helmet = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_ShieldState : pb::IMessage<B2C_ShieldState> {
        private static readonly pb::MessageParser<B2C_ShieldState> _parser = new pb::MessageParser<B2C_ShieldState>(() => pb.ProtobufManager.New<B2C_ShieldState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ShieldState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShieldState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          State = 0;
          Id = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShieldState(B2C_ShieldState other) : this() {
          state_ = other.state_;
          id_ = other.id_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShieldState Clone() {
          return new B2C_ShieldState(this);
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 1;
        private global::Pb.ShieldState state_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.ShieldState State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ShieldState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ShieldState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (State != other.State) return false;
          if (Id != other.Id) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (State != 0) hash ^= State.GetHashCode();
          if (Id != 0) hash ^= Id.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (State != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) State);
          }
          if (Id != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Id);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ShieldState other) {
          if (other == null) {
            return;
          }
          if (other.State != 0) {
            State = other.State;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                state_ = (global::Pb.ShieldState) input.ReadEnum();
                break;
              }
              case 16: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_OpBlasting : pb::IMessage<B2C_OpBlasting> {
        private static readonly pb::MessageParser<B2C_OpBlasting> _parser = new pb::MessageParser<B2C_OpBlasting>(() => pb.ProtobufManager.New<B2C_OpBlasting>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_OpBlasting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OpBlasting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Open = false;
          Reloading = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OpBlasting(B2C_OpBlasting other) : this() {
          open_ = other.open_;
          reloading_ = other.reloading_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OpBlasting Clone() {
          return new B2C_OpBlasting(this);
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 1;
        private bool open_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        /// <summary>Field number for the "reloading" field.</summary>
        public const int ReloadingFieldNumber = 2;
        private bool reloading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Reloading {
          get { return reloading_; }
          set {
            reloading_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_OpBlasting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_OpBlasting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Open != other.Open) return false;
          if (Reloading != other.Reloading) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Open != false) hash ^= Open.GetHashCode();
          if (Reloading != false) hash ^= Reloading.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Open != false) {
            output.WriteRawTag(8);
            output.WriteBool(Open);
          }
          if (Reloading != false) {
            output.WriteRawTag(16);
            output.WriteBool(Reloading);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Open != false) {
            size += 1 + 1;
          }
          if (Reloading != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_OpBlasting other) {
          if (other == null) {
            return;
          }
          if (other.Open != false) {
            Open = other.Open;
          }
          if (other.Reloading != false) {
            Reloading = other.Reloading;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Open = input.ReadBool();
                break;
              }
              case 16: {
                Reloading = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Superheat : pb::IMessage<B2C_Superheat> {
        private static readonly pb::MessageParser<B2C_Superheat> _parser = new pb::MessageParser<B2C_Superheat>(() => pb.ProtobufManager.New<B2C_Superheat>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Superheat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Superheat() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          MainEnergy = 0;
          SecondEnergy = 0;
          DefEnergy = 0;
          IsMainSuperheat = false;
          IsSecondSuperheat = false;
          IsDefSuperheat = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Superheat(B2C_Superheat other) : this() {
          mainEnergy_ = other.mainEnergy_;
          secondEnergy_ = other.secondEnergy_;
          defEnergy_ = other.defEnergy_;
          isMainSuperheat_ = other.isMainSuperheat_;
          isSecondSuperheat_ = other.isSecondSuperheat_;
          isDefSuperheat_ = other.isDefSuperheat_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Superheat Clone() {
          return new B2C_Superheat(this);
        }

        /// <summary>Field number for the "mainEnergy" field.</summary>
        public const int MainEnergyFieldNumber = 1;
        private int mainEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MainEnergy {
          get { return mainEnergy_; }
          set {
            mainEnergy_ = value;
          }
        }

        /// <summary>Field number for the "secondEnergy" field.</summary>
        public const int SecondEnergyFieldNumber = 2;
        private int secondEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SecondEnergy {
          get { return secondEnergy_; }
          set {
            secondEnergy_ = value;
          }
        }

        /// <summary>Field number for the "defEnergy" field.</summary>
        public const int DefEnergyFieldNumber = 3;
        private int defEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DefEnergy {
          get { return defEnergy_; }
          set {
            defEnergy_ = value;
          }
        }

        /// <summary>Field number for the "isMainSuperheat" field.</summary>
        public const int IsMainSuperheatFieldNumber = 4;
        private bool isMainSuperheat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsMainSuperheat {
          get { return isMainSuperheat_; }
          set {
            isMainSuperheat_ = value;
          }
        }

        /// <summary>Field number for the "isSecondSuperheat" field.</summary>
        public const int IsSecondSuperheatFieldNumber = 5;
        private bool isSecondSuperheat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsSecondSuperheat {
          get { return isSecondSuperheat_; }
          set {
            isSecondSuperheat_ = value;
          }
        }

        /// <summary>Field number for the "isDefSuperheat" field.</summary>
        public const int IsDefSuperheatFieldNumber = 6;
        private bool isDefSuperheat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsDefSuperheat {
          get { return isDefSuperheat_; }
          set {
            isDefSuperheat_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Superheat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Superheat other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MainEnergy != other.MainEnergy) return false;
          if (SecondEnergy != other.SecondEnergy) return false;
          if (DefEnergy != other.DefEnergy) return false;
          if (IsMainSuperheat != other.IsMainSuperheat) return false;
          if (IsSecondSuperheat != other.IsSecondSuperheat) return false;
          if (IsDefSuperheat != other.IsDefSuperheat) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MainEnergy != 0) hash ^= MainEnergy.GetHashCode();
          if (SecondEnergy != 0) hash ^= SecondEnergy.GetHashCode();
          if (DefEnergy != 0) hash ^= DefEnergy.GetHashCode();
          if (IsMainSuperheat != false) hash ^= IsMainSuperheat.GetHashCode();
          if (IsSecondSuperheat != false) hash ^= IsSecondSuperheat.GetHashCode();
          if (IsDefSuperheat != false) hash ^= IsDefSuperheat.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MainEnergy != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MainEnergy);
          }
          if (SecondEnergy != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(SecondEnergy);
          }
          if (DefEnergy != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(DefEnergy);
          }
          if (IsMainSuperheat != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsMainSuperheat);
          }
          if (IsSecondSuperheat != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsSecondSuperheat);
          }
          if (IsDefSuperheat != false) {
            output.WriteRawTag(48);
            output.WriteBool(IsDefSuperheat);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MainEnergy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainEnergy);
          }
          if (SecondEnergy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondEnergy);
          }
          if (DefEnergy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefEnergy);
          }
          if (IsMainSuperheat != false) {
            size += 1 + 1;
          }
          if (IsSecondSuperheat != false) {
            size += 1 + 1;
          }
          if (IsDefSuperheat != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Superheat other) {
          if (other == null) {
            return;
          }
          if (other.MainEnergy != 0) {
            MainEnergy = other.MainEnergy;
          }
          if (other.SecondEnergy != 0) {
            SecondEnergy = other.SecondEnergy;
          }
          if (other.DefEnergy != 0) {
            DefEnergy = other.DefEnergy;
          }
          if (other.IsMainSuperheat != false) {
            IsMainSuperheat = other.IsMainSuperheat;
          }
          if (other.IsSecondSuperheat != false) {
            IsSecondSuperheat = other.IsSecondSuperheat;
          }
          if (other.IsDefSuperheat != false) {
            IsDefSuperheat = other.IsDefSuperheat;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MainEnergy = input.ReadInt32();
                break;
              }
              case 16: {
                SecondEnergy = input.ReadInt32();
                break;
              }
              case 24: {
                DefEnergy = input.ReadInt32();
                break;
              }
              case 32: {
                IsMainSuperheat = input.ReadBool();
                break;
              }
              case 40: {
                IsSecondSuperheat = input.ReadBool();
                break;
              }
              case 48: {
                IsDefSuperheat = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PlyState : pb::IMessage<B2C_PlyState> {
        private static readonly pb::MessageParser<B2C_PlyState> _parser = new pb::MessageParser<B2C_PlyState>(() => pb.ProtobufManager.New<B2C_PlyState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PlyState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlyState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < states_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_PlyState.Types.State>(states_[i]);
          }
          states_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlyState(B2C_PlyState other) : this() {
          states_ = other.states_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlyState Clone() {
          return new B2C_PlyState(this);
        }

        /// <summary>Field number for the "states" field.</summary>
        public const int StatesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_State.Types.B2C_PlyState.Types.State> _repeated_states_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_State.Types.B2C_PlyState.Types.State.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_PlyState.Types.State> states_ = new pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_PlyState.Types.State>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_PlyState.Types.State> States {
          get { return states_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PlyState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PlyState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!states_.Equals(other.states_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= states_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          states_.WriteTo(output, _repeated_states_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += states_.CalculateSize(_repeated_states_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PlyState other) {
          if (other == null) {
            return;
          }
          states_.Add(other.states_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                states_.AddEntriesFrom(input, _repeated_states_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_PlyState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class State : pb::IMessage<State> {
            private static readonly pb::MessageParser<State> _parser = new pb::MessageParser<State>(() => pb.ProtobufManager.New<State>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<State> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_State.Types.B2C_PlyState.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public State() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Id = 0;
              Lifetime = 0;
              Totaltime = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public State(State other) : this() {
              id_ = other.id_;
              lifetime_ = other.lifetime_;
              totaltime_ = other.totaltime_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public State Clone() {
              return new State(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private uint id_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            /// <summary>Field number for the "lifetime" field.</summary>
            public const int LifetimeFieldNumber = 2;
            private long lifetime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Lifetime {
              get { return lifetime_; }
              set {
                lifetime_ = value;
              }
            }

            /// <summary>Field number for the "totaltime" field.</summary>
            public const int TotaltimeFieldNumber = 3;
            private long totaltime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Totaltime {
              get { return totaltime_; }
              set {
                totaltime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as State);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(State other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (Lifetime != other.Lifetime) return false;
              if (Totaltime != other.Totaltime) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id != 0) hash ^= Id.GetHashCode();
              if (Lifetime != 0L) hash ^= Lifetime.GetHashCode();
              if (Totaltime != 0L) hash ^= Totaltime.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (Lifetime != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Lifetime);
              }
              if (Totaltime != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Totaltime);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (Lifetime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lifetime);
              }
              if (Totaltime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Totaltime);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(State other) {
              if (other == null) {
                return;
              }
              if (other.Id != 0) {
                Id = other.Id;
              }
              if (other.Lifetime != 0L) {
                Lifetime = other.Lifetime;
              }
              if (other.Totaltime != 0L) {
                Totaltime = other.Totaltime;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Lifetime = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    Totaltime = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_Gamble : pb::IMessage<B2C_Gamble> {
        private static readonly pb::MessageParser<B2C_Gamble> _parser = new pb::MessageParser<B2C_Gamble>(() => pb.ProtobufManager.New<B2C_Gamble>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Gamble> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Gamble() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Gamblenum = 0;
          Maxgamble = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Gamble(B2C_Gamble other) : this() {
          gamblenum_ = other.gamblenum_;
          maxgamble_ = other.maxgamble_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Gamble Clone() {
          return new B2C_Gamble(this);
        }

        /// <summary>Field number for the "gamblenum" field.</summary>
        public const int GamblenumFieldNumber = 1;
        private uint gamblenum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Gamblenum {
          get { return gamblenum_; }
          set {
            gamblenum_ = value;
          }
        }

        /// <summary>Field number for the "maxgamble" field.</summary>
        public const int MaxgambleFieldNumber = 2;
        private uint maxgamble_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Maxgamble {
          get { return maxgamble_; }
          set {
            maxgamble_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Gamble);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Gamble other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Gamblenum != other.Gamblenum) return false;
          if (Maxgamble != other.Maxgamble) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Gamblenum != 0) hash ^= Gamblenum.GetHashCode();
          if (Maxgamble != 0) hash ^= Maxgamble.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Gamblenum != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Gamblenum);
          }
          if (Maxgamble != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Maxgamble);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Gamblenum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gamblenum);
          }
          if (Maxgamble != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxgamble);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Gamble other) {
          if (other == null) {
            return;
          }
          if (other.Gamblenum != 0) {
            Gamblenum = other.Gamblenum;
          }
          if (other.Maxgamble != 0) {
            Maxgamble = other.Maxgamble;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Gamblenum = input.ReadUInt32();
                break;
              }
              case 16: {
                Maxgamble = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MonsterState : pb::IMessage<B2C_MonsterState> {
        private static readonly pb::MessageParser<B2C_MonsterState> _parser = new pb::MessageParser<B2C_MonsterState>(() => pb.ProtobufManager.New<B2C_MonsterState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MonsterState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Sight = 0;
          Ownerid = 0;
          Monsterid = 0;
          Forceid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterState(B2C_MonsterState other) : this() {
          sight_ = other.sight_;
          ownerid_ = other.ownerid_;
          monsterid_ = other.monsterid_;
          forceid_ = other.forceid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterState Clone() {
          return new B2C_MonsterState(this);
        }

        /// <summary>Field number for the "sight" field.</summary>
        public const int SightFieldNumber = 1;
        private float sight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Sight {
          get { return sight_; }
          set {
            sight_ = value;
          }
        }

        /// <summary>Field number for the "ownerid" field.</summary>
        public const int OwneridFieldNumber = 2;
        private ulong ownerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Ownerid {
          get { return ownerid_; }
          set {
            ownerid_ = value;
          }
        }

        /// <summary>Field number for the "monsterid" field.</summary>
        public const int MonsteridFieldNumber = 3;
        private uint monsterid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Monsterid {
          get { return monsterid_; }
          set {
            monsterid_ = value;
          }
        }

        /// <summary>Field number for the "forceid" field.</summary>
        public const int ForceidFieldNumber = 4;
        private uint forceid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Forceid {
          get { return forceid_; }
          set {
            forceid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MonsterState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MonsterState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sight != other.Sight) return false;
          if (Ownerid != other.Ownerid) return false;
          if (Monsterid != other.Monsterid) return false;
          if (Forceid != other.Forceid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Sight != 0F) hash ^= Sight.GetHashCode();
          if (Ownerid != 0UL) hash ^= Ownerid.GetHashCode();
          if (Monsterid != 0) hash ^= Monsterid.GetHashCode();
          if (Forceid != 0) hash ^= Forceid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Sight != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Sight);
          }
          if (Ownerid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Ownerid);
          }
          if (Monsterid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Monsterid);
          }
          if (Forceid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Forceid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Sight != 0F) {
            size += 1 + 4;
          }
          if (Ownerid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ownerid);
          }
          if (Monsterid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Monsterid);
          }
          if (Forceid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Forceid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MonsterState other) {
          if (other == null) {
            return;
          }
          if (other.Sight != 0F) {
            Sight = other.Sight;
          }
          if (other.Ownerid != 0UL) {
            Ownerid = other.Ownerid;
          }
          if (other.Monsterid != 0) {
            Monsterid = other.Monsterid;
          }
          if (other.Forceid != 0) {
            Forceid = other.Forceid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                Sight = input.ReadFloat();
                break;
              }
              case 16: {
                Ownerid = input.ReadUInt64();
                break;
              }
              case 24: {
                Monsterid = input.ReadUInt32();
                break;
              }
              case 32: {
                Forceid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_BlockShieldData : pb::IMessage<B2C_BlockShieldData> {
        private static readonly pb::MessageParser<B2C_BlockShieldData> _parser = new pb::MessageParser<B2C_BlockShieldData>(() => pb.ProtobufManager.New<B2C_BlockShieldData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BlockShieldData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BlockShieldData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
          Skillid = 0;
          Owner = 0;
          Destroy = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BlockShieldData(B2C_BlockShieldData other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          skillid_ = other.skillid_;
          owner_ = other.owner_;
          destroy_ = other.destroy_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BlockShieldData Clone() {
          return new B2C_BlockShieldData(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 4;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 5;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "destroy" field.</summary>
        public const int DestroyFieldNumber = 6;
        private bool destroy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Destroy {
          get { return destroy_; }
          set {
            destroy_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BlockShieldData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BlockShieldData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          if (Skillid != other.Skillid) return false;
          if (Owner != other.Owner) return false;
          if (Destroy != other.Destroy) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          if (Destroy != false) hash ^= Destroy.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (Skillid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Skillid);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Owner);
          }
          if (Destroy != false) {
            output.WriteRawTag(48);
            output.WriteBool(Destroy);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          if (Destroy != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BlockShieldData other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
          if (other.Destroy != false) {
            Destroy = other.Destroy;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
              case 32: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 40: {
                Owner = input.ReadUInt64();
                break;
              }
              case 48: {
                Destroy = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Shop : pb::IMessage<B2C_Shop> {
        private static readonly pb::MessageParser<B2C_Shop> _parser = new pb::MessageParser<B2C_Shop>(() => pb.ProtobufManager.New<B2C_Shop>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Shop> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shop() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < normalshop_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ShopItem>(normalshop_[i]);
          }
          normalshop_.Clear();
          for (int i = 0; i < blackshop_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ShopItem>(blackshop_[i]);
          }
          blackshop_.Clear();
          Hasblack = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shop(B2C_Shop other) : this() {
          normalshop_ = other.normalshop_.Clone();
          blackshop_ = other.blackshop_.Clone();
          hasblack_ = other.hasblack_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shop Clone() {
          return new B2C_Shop(this);
        }

        /// <summary>Field number for the "normalshop" field.</summary>
        public const int NormalshopFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.ShopItem> _repeated_normalshop_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.ShopItem.Parser);
        private readonly pbc::RepeatedField<global::Pb.ShopItem> normalshop_ = new pbc::RepeatedField<global::Pb.ShopItem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ShopItem> Normalshop {
          get { return normalshop_; }
        }

        /// <summary>Field number for the "blackshop" field.</summary>
        public const int BlackshopFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Pb.ShopItem> _repeated_blackshop_codec
            = pb::FieldCodec.ForMessage(18, global::Pb.ShopItem.Parser);
        private readonly pbc::RepeatedField<global::Pb.ShopItem> blackshop_ = new pbc::RepeatedField<global::Pb.ShopItem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ShopItem> Blackshop {
          get { return blackshop_; }
        }

        /// <summary>Field number for the "hasblack" field.</summary>
        public const int HasblackFieldNumber = 3;
        private bool hasblack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Hasblack {
          get { return hasblack_; }
          set {
            hasblack_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Shop);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Shop other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!normalshop_.Equals(other.normalshop_)) return false;
          if(!blackshop_.Equals(other.blackshop_)) return false;
          if (Hasblack != other.Hasblack) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= normalshop_.GetHashCode();
          hash ^= blackshop_.GetHashCode();
          if (Hasblack != false) hash ^= Hasblack.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          normalshop_.WriteTo(output, _repeated_normalshop_codec);
          blackshop_.WriteTo(output, _repeated_blackshop_codec);
          if (Hasblack != false) {
            output.WriteRawTag(24);
            output.WriteBool(Hasblack);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += normalshop_.CalculateSize(_repeated_normalshop_codec);
          size += blackshop_.CalculateSize(_repeated_blackshop_codec);
          if (Hasblack != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Shop other) {
          if (other == null) {
            return;
          }
          normalshop_.Add(other.normalshop_);
          blackshop_.Add(other.blackshop_);
          if (other.Hasblack != false) {
            Hasblack = other.Hasblack;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                normalshop_.AddEntriesFrom(input, _repeated_normalshop_codec);
                break;
              }
              case 18: {
                blackshop_.AddEntriesFrom(input, _repeated_blackshop_codec);
                break;
              }
              case 24: {
                Hasblack = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_CharacterProperty : pb::IMessage<B2C_CharacterProperty> {
        private static readonly pb::MessageParser<B2C_CharacterProperty> _parser = new pb::MessageParser<B2C_CharacterProperty>(() => pb.ProtobufManager.New<B2C_CharacterProperty>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_CharacterProperty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterProperty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < normal_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty>(normal_[i]);
          }
          normal_.Clear();
          for (int i = 0; i < point_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty>(point_[i]);
          }
          point_.Clear();
          for (int i = 0; i < base_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty>(base_[i]);
          }
          base_.Clear();
          for (int i = 0; i < exmoneys_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney>(exmoneys_[i]);
          }
          exmoneys_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterProperty(B2C_CharacterProperty other) : this() {
          normal_ = other.normal_.Clone();
          point_ = other.point_.Clone();
          base_ = other.base_.Clone();
          exmoneys_ = other.exmoneys_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterProperty Clone() {
          return new B2C_CharacterProperty(this);
        }

        /// <summary>Field number for the "normal" field.</summary>
        public const int NormalFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty> _repeated_normal_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty> normal_ = new pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.NormalProperty> Normal {
          get { return normal_; }
        }

        /// <summary>Field number for the "point" field.</summary>
        public const int PointFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty> _repeated_point_codec
            = pb::FieldCodec.ForMessage(18, global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty> point_ = new pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.PointProperty> Point {
          get { return point_; }
        }

        /// <summary>Field number for the "base" field.</summary>
        public const int BaseFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty> _repeated_base_codec
            = pb::FieldCodec.ForMessage(26, global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty> base_ = new pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.BaseProperty> Base {
          get { return base_; }
        }

        /// <summary>Field number for the "exmoneys" field.</summary>
        public const int ExmoneysFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney> _repeated_exmoneys_codec
            = pb::FieldCodec.ForMessage(34, global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney> exmoneys_ = new pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_State.Types.B2C_CharacterProperty.Types.ExMoney> Exmoneys {
          get { return exmoneys_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_CharacterProperty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_CharacterProperty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!normal_.Equals(other.normal_)) return false;
          if(!point_.Equals(other.point_)) return false;
          if(!base_.Equals(other.base_)) return false;
          if(!exmoneys_.Equals(other.exmoneys_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= normal_.GetHashCode();
          hash ^= point_.GetHashCode();
          hash ^= base_.GetHashCode();
          hash ^= exmoneys_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          normal_.WriteTo(output, _repeated_normal_codec);
          point_.WriteTo(output, _repeated_point_codec);
          base_.WriteTo(output, _repeated_base_codec);
          exmoneys_.WriteTo(output, _repeated_exmoneys_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += normal_.CalculateSize(_repeated_normal_codec);
          size += point_.CalculateSize(_repeated_point_codec);
          size += base_.CalculateSize(_repeated_base_codec);
          size += exmoneys_.CalculateSize(_repeated_exmoneys_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_CharacterProperty other) {
          if (other == null) {
            return;
          }
          normal_.Add(other.normal_);
          point_.Add(other.point_);
          base_.Add(other.base_);
          exmoneys_.Add(other.exmoneys_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                normal_.AddEntriesFrom(input, _repeated_normal_codec);
                break;
              }
              case 18: {
                point_.AddEntriesFrom(input, _repeated_point_codec);
                break;
              }
              case 26: {
                base_.AddEntriesFrom(input, _repeated_base_codec);
                break;
              }
              case 34: {
                exmoneys_.AddEntriesFrom(input, _repeated_exmoneys_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_CharacterProperty message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class NormalProperty : pb::IMessage<NormalProperty> {
            private static readonly pb::MessageParser<NormalProperty> _parser = new pb::MessageParser<NormalProperty>(() => pb.ProtobufManager.New<NormalProperty>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<NormalProperty> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_State.Types.B2C_CharacterProperty.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NormalProperty() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Type = 0;
              Data = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NormalProperty(NormalProperty other) : this() {
              type_ = other.type_;
              data_ = other.data_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NormalProperty Clone() {
              return new NormalProperty(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private uint type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "data" field.</summary>
            public const int DataFieldNumber = 2;
            private float data_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Data {
              get { return data_; }
              set {
                data_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as NormalProperty);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(NormalProperty other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Data != other.Data) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != 0) hash ^= Type.GetHashCode();
              if (Data != 0F) hash ^= Data.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
              }
              if (Data != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
              }
              if (Data != 0F) {
                size += 1 + 4;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(NormalProperty other) {
              if (other == null) {
                return;
              }
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.Data != 0F) {
                Data = other.Data;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Type = input.ReadUInt32();
                    break;
                  }
                  case 21: {
                    Data = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PointProperty : pb::IMessage<PointProperty> {
            private static readonly pb::MessageParser<PointProperty> _parser = new pb::MessageParser<PointProperty>(() => pb.ProtobufManager.New<PointProperty>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PointProperty> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_State.Types.B2C_CharacterProperty.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PointProperty() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Type = 0;
              Data = 0;
              Max = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PointProperty(PointProperty other) : this() {
              type_ = other.type_;
              data_ = other.data_;
              max_ = other.max_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PointProperty Clone() {
              return new PointProperty(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private uint type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "data" field.</summary>
            public const int DataFieldNumber = 2;
            private long data_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Data {
              get { return data_; }
              set {
                data_ = value;
              }
            }

            /// <summary>Field number for the "max" field.</summary>
            public const int MaxFieldNumber = 3;
            private long max_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Max {
              get { return max_; }
              set {
                max_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PointProperty);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PointProperty other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Data != other.Data) return false;
              if (Max != other.Max) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != 0) hash ^= Type.GetHashCode();
              if (Data != 0L) hash ^= Data.GetHashCode();
              if (Max != 0L) hash ^= Max.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
              }
              if (Data != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Data);
              }
              if (Max != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Max);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
              }
              if (Data != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Data);
              }
              if (Max != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PointProperty other) {
              if (other == null) {
                return;
              }
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.Data != 0L) {
                Data = other.Data;
              }
              if (other.Max != 0L) {
                Max = other.Max;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Type = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Data = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    Max = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class BaseProperty : pb::IMessage<BaseProperty> {
            private static readonly pb::MessageParser<BaseProperty> _parser = new pb::MessageParser<BaseProperty>(() => pb.ProtobufManager.New<BaseProperty>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BaseProperty> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_State.Types.B2C_CharacterProperty.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BaseProperty() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Type = 0;
              Data = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BaseProperty(BaseProperty other) : this() {
              type_ = other.type_;
              data_ = other.data_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BaseProperty Clone() {
              return new BaseProperty(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private uint type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "data" field.</summary>
            public const int DataFieldNumber = 2;
            private float data_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Data {
              get { return data_; }
              set {
                data_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BaseProperty);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BaseProperty other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Data != other.Data) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != 0) hash ^= Type.GetHashCode();
              if (Data != 0F) hash ^= Data.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
              }
              if (Data != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
              }
              if (Data != 0F) {
                size += 1 + 4;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BaseProperty other) {
              if (other == null) {
                return;
              }
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.Data != 0F) {
                Data = other.Data;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Type = input.ReadUInt32();
                    break;
                  }
                  case 21: {
                    Data = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ExMoney : pb::IMessage<ExMoney> {
            private static readonly pb::MessageParser<ExMoney> _parser = new pb::MessageParser<ExMoney>(() => pb.ProtobufManager.New<ExMoney>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ExMoney> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_State.Types.B2C_CharacterProperty.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ExMoney() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Type = 0;
              Value = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ExMoney(ExMoney other) : this() {
              type_ = other.type_;
              value_ = other.value_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ExMoney Clone() {
              return new ExMoney(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private uint type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private int value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ExMoney);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ExMoney other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Value != other.Value) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != 0) hash ^= Type.GetHashCode();
              if (Value != 0) hash ^= Value.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
              }
              if (Value != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Value);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
              }
              if (Value != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ExMoney other) {
              if (other == null) {
                return;
              }
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.Value != 0) {
                Value = other.Value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Type = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Value = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_ChargeEnergy : pb::IMessage<B2C_ChargeEnergy> {
        private static readonly pb::MessageParser<B2C_ChargeEnergy> _parser = new pb::MessageParser<B2C_ChargeEnergy>(() => pb.ProtobufManager.New<B2C_ChargeEnergy>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ChargeEnergy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ChargeEnergy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Def = 0;
          Main = 0;
          Sec = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ChargeEnergy(B2C_ChargeEnergy other) : this() {
          def_ = other.def_;
          main_ = other.main_;
          sec_ = other.sec_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ChargeEnergy Clone() {
          return new B2C_ChargeEnergy(this);
        }

        /// <summary>Field number for the "def" field.</summary>
        public const int DefFieldNumber = 1;
        private int def_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Def {
          get { return def_; }
          set {
            def_ = value;
          }
        }

        /// <summary>Field number for the "main" field.</summary>
        public const int MainFieldNumber = 2;
        private int main_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Main {
          get { return main_; }
          set {
            main_ = value;
          }
        }

        /// <summary>Field number for the "sec" field.</summary>
        public const int SecFieldNumber = 3;
        private int sec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Sec {
          get { return sec_; }
          set {
            sec_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ChargeEnergy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ChargeEnergy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Def != other.Def) return false;
          if (Main != other.Main) return false;
          if (Sec != other.Sec) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Def != 0) hash ^= Def.GetHashCode();
          if (Main != 0) hash ^= Main.GetHashCode();
          if (Sec != 0) hash ^= Sec.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Def != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Def);
          }
          if (Main != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Main);
          }
          if (Sec != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Sec);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Def != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Def);
          }
          if (Main != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Main);
          }
          if (Sec != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sec);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ChargeEnergy other) {
          if (other == null) {
            return;
          }
          if (other.Def != 0) {
            Def = other.Def;
          }
          if (other.Main != 0) {
            Main = other.Main;
          }
          if (other.Sec != 0) {
            Sec = other.Sec;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Def = input.ReadInt32();
                break;
              }
              case 16: {
                Main = input.ReadInt32();
                break;
              }
              case 24: {
                Sec = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_InitFeatures : pb::IMessage<B2C_InitFeatures> {
        private static readonly pb::MessageParser<B2C_InitFeatures> _parser = new pb::MessageParser<B2C_InitFeatures>(() => pb.ProtobufManager.New<B2C_InitFeatures>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_InitFeatures> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_InitFeatures() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          initfine_.Clear();
          initbad_.Clear();
          defskill_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_InitFeatures(B2C_InitFeatures other) : this() {
          initfine_ = other.initfine_.Clone();
          initbad_ = other.initbad_.Clone();
          defskill_ = other.defskill_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_InitFeatures Clone() {
          return new B2C_InitFeatures(this);
        }

        /// <summary>Field number for the "initfine" field.</summary>
        public const int InitfineFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_initfine_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> initfine_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Initfine {
          get { return initfine_; }
        }

        /// <summary>Field number for the "initbad" field.</summary>
        public const int InitbadFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_initbad_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> initbad_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Initbad {
          get { return initbad_; }
        }

        /// <summary>Field number for the "defskill" field.</summary>
        public const int DefskillFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_defskill_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> defskill_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Defskill {
          get { return defskill_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_InitFeatures);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_InitFeatures other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!initfine_.Equals(other.initfine_)) return false;
          if(!initbad_.Equals(other.initbad_)) return false;
          if(!defskill_.Equals(other.defskill_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= initfine_.GetHashCode();
          hash ^= initbad_.GetHashCode();
          hash ^= defskill_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          initfine_.WriteTo(output, _repeated_initfine_codec);
          initbad_.WriteTo(output, _repeated_initbad_codec);
          defskill_.WriteTo(output, _repeated_defskill_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += initfine_.CalculateSize(_repeated_initfine_codec);
          size += initbad_.CalculateSize(_repeated_initbad_codec);
          size += defskill_.CalculateSize(_repeated_defskill_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_InitFeatures other) {
          if (other == null) {
            return;
          }
          initfine_.Add(other.initfine_);
          initbad_.Add(other.initbad_);
          defskill_.Add(other.defskill_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                initfine_.AddEntriesFrom(input, _repeated_initfine_codec);
                break;
              }
              case 18:
              case 16: {
                initbad_.AddEntriesFrom(input, _repeated_initbad_codec);
                break;
              }
              case 26:
              case 24: {
                defskill_.AddEntriesFrom(input, _repeated_defskill_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_GroundItem : pb::IMessage<B2C_GroundItem> {
        private static readonly pb::MessageParser<B2C_GroundItem> _parser = new pb::MessageParser<B2C_GroundItem>(() => pb.ProtobufManager.New<B2C_GroundItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_GroundItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GroundItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemid = 0;
          Visible = false;
          Owner = 0;
          Teampick = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GroundItem(B2C_GroundItem other) : this() {
          itemid_ = other.itemid_;
          visible_ = other.visible_;
          owner_ = other.owner_;
          teampick_ = other.teampick_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GroundItem Clone() {
          return new B2C_GroundItem(this);
        }

        /// <summary>Field number for the "itemid" field.</summary>
        public const int ItemidFieldNumber = 1;
        private uint itemid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemid {
          get { return itemid_; }
          set {
            itemid_ = value;
          }
        }

        /// <summary>Field number for the "visible" field.</summary>
        public const int VisibleFieldNumber = 2;
        private bool visible_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Visible {
          get { return visible_; }
          set {
            visible_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 3;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "teampick" field.</summary>
        public const int TeampickFieldNumber = 4;
        private bool teampick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Teampick {
          get { return teampick_; }
          set {
            teampick_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_GroundItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_GroundItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemid != other.Itemid) return false;
          if (Visible != other.Visible) return false;
          if (Owner != other.Owner) return false;
          if (Teampick != other.Teampick) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemid != 0) hash ^= Itemid.GetHashCode();
          if (Visible != false) hash ^= Visible.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          if (Teampick != false) hash ^= Teampick.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemid);
          }
          if (Visible != false) {
            output.WriteRawTag(16);
            output.WriteBool(Visible);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Owner);
          }
          if (Teampick != false) {
            output.WriteRawTag(32);
            output.WriteBool(Teampick);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
          }
          if (Visible != false) {
            size += 1 + 1;
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          if (Teampick != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_GroundItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemid != 0) {
            Itemid = other.Itemid;
          }
          if (other.Visible != false) {
            Visible = other.Visible;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
          if (other.Teampick != false) {
            Teampick = other.Teampick;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemid = input.ReadUInt32();
                break;
              }
              case 16: {
                Visible = input.ReadBool();
                break;
              }
              case 24: {
                Owner = input.ReadUInt64();
                break;
              }
              case 32: {
                Teampick = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Npc : pb::IMessage<B2C_Npc> {
        private static readonly pb::MessageParser<B2C_Npc> _parser = new pb::MessageParser<B2C_Npc>(() => pb.ProtobufManager.New<B2C_Npc>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Npc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Npc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Npcid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Npc(B2C_Npc other) : this() {
          npcid_ = other.npcid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Npc Clone() {
          return new B2C_Npc(this);
        }

        /// <summary>Field number for the "npcid" field.</summary>
        public const int NpcidFieldNumber = 1;
        private uint npcid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Npcid {
          get { return npcid_; }
          set {
            npcid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Npc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Npc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Npcid != other.Npcid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Npcid != 0) hash ^= Npcid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Npcid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Npcid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Npcid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Npc other) {
          if (other == null) {
            return;
          }
          if (other.Npcid != 0) {
            Npcid = other.Npcid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Npcid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MoveTriggerData : pb::IMessage<B2C_MoveTriggerData> {
        private static readonly pb::MessageParser<B2C_MoveTriggerData> _parser = new pb::MessageParser<B2C_MoveTriggerData>(() => pb.ProtobufManager.New<B2C_MoveTriggerData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MoveTriggerData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MoveTriggerData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
          Triggerid = 0;
          Owner = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MoveTriggerData(B2C_MoveTriggerData other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          triggerid_ = other.triggerid_;
          owner_ = other.owner_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MoveTriggerData Clone() {
          return new B2C_MoveTriggerData(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "triggerid" field.</summary>
        public const int TriggeridFieldNumber = 4;
        private uint triggerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Triggerid {
          get { return triggerid_; }
          set {
            triggerid_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 5;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MoveTriggerData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MoveTriggerData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          if (Triggerid != other.Triggerid) return false;
          if (Owner != other.Owner) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          if (Triggerid != 0) hash ^= Triggerid.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (Triggerid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Triggerid);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Owner);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (Triggerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Triggerid);
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MoveTriggerData other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          if (other.Triggerid != 0) {
            Triggerid = other.Triggerid;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
              case 32: {
                Triggerid = input.ReadUInt32();
                break;
              }
              case 40: {
                Owner = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PowerClip : pb::IMessage<B2C_PowerClip> {
        private static readonly pb::MessageParser<B2C_PowerClip> _parser = new pb::MessageParser<B2C_PowerClip>(() => pb.ProtobufManager.New<B2C_PowerClip>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PowerClip> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_State.Descriptor.NestedTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PowerClip() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Power = 0;
          Max = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PowerClip(B2C_PowerClip other) : this() {
          power_ = other.power_;
          max_ = other.max_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PowerClip Clone() {
          return new B2C_PowerClip(this);
        }

        /// <summary>Field number for the "power" field.</summary>
        public const int PowerFieldNumber = 1;
        private int power_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Power {
          get { return power_; }
          set {
            power_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private int max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PowerClip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PowerClip other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Power != other.Power) return false;
          if (Max != other.Max) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Power != 0) hash ^= Power.GetHashCode();
          if (Max != 0) hash ^= Max.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Power != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Power);
          }
          if (Max != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Max);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Power != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
          }
          if (Max != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PowerClip other) {
          if (other == null) {
            return;
          }
          if (other.Power != 0) {
            Power = other.Power;
          }
          if (other.Max != 0) {
            Max = other.Max;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Power = input.ReadInt32();
                break;
              }
              case 16: {
                Max = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class B2C_Event : pb::IMessage<B2C_Event> {
    private static readonly pb::MessageParser<B2C_Event> _parser = new pb::MessageParser<B2C_Event>(() => pb.ProtobufManager.New<B2C_Event>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (EventDataCase) {
        case EventDataOneofCase.Attack:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Attack>(Attack);
          Attack = null;
          break;
        case EventDataOneofCase.BeHit:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_BeHit>(BeHit);
          BeHit = null;
          break;
        case EventDataOneofCase.Getboxitem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_GetBoxItem>(Getboxitem);
          Getboxitem = null;
          break;
        case EventDataOneofCase.Deplane:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_LeavePlane>(Deplane);
          Deplane = null;
          break;
        case EventDataOneofCase.Parachute:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Parachute>(Parachute);
          Parachute = null;
          break;
        case EventDataOneofCase.Teleport:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.S2C_Teleport>(Teleport);
          Teleport = null;
          break;
        case EventDataOneofCase.Spemove:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.S2C_SpeMove>(Spemove);
          Spemove = null;
          break;
        case EventDataOneofCase.Hitdown:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_HitDown>(Hitdown);
          Hitdown = null;
          break;
        case EventDataOneofCase.Grenade:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Grenade>(Grenade);
          Grenade = null;
          break;
        case EventDataOneofCase.Opdoor:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_OperateDoor>(Opdoor);
          Opdoor = null;
          break;
        case EventDataOneofCase.Opvehicle:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_OperateVehicle>(Opvehicle);
          Opvehicle = null;
          break;
        case EventDataOneofCase.Fallground:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_FallGround>(Fallground);
          Fallground = null;
          break;
        case EventDataOneofCase.Vehicontact:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_VehicleContact>(Vehicontact);
          Vehicontact = null;
          break;
        case EventDataOneofCase.Emptyray:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_EmptyGun>(Emptyray);
          Emptyray = null;
          break;
        case EventDataOneofCase.Rebullet:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_ReloadBullet>(Rebullet);
          Rebullet = null;
          break;
        case EventDataOneofCase.Casting:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Casting>(Casting);
          Casting = null;
          break;
        case EventDataOneofCase.Hitback:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_HitBack>(Hitback);
          Hitback = null;
          break;
        case EventDataOneofCase.Packageitem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_PackageItem>(Packageitem);
          Packageitem = null;
          break;
        case EventDataOneofCase.Packageweight:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_PackageWeight>(Packageweight);
          Packageweight = null;
          break;
        case EventDataOneofCase.Killnum:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_KillNum>(Killnum);
          Killnum = null;
          break;
        case EventDataOneofCase.Climbeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_ClimbEffect>(Climbeffect);
          Climbeffect = null;
          break;
        case EventDataOneofCase.Shieldbreakeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect>(Shieldbreakeffect);
          Shieldbreakeffect = null;
          break;
        case EventDataOneofCase.Skillstate:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_SkillState>(Skillstate);
          Skillstate = null;
          break;
        case EventDataOneofCase.Monsterattack:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_MonsterAttack>(Monsterattack);
          Monsterattack = null;
          break;
        case EventDataOneofCase.Warningeffect:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_WarningEffect>(Warningeffect);
          Warningeffect = null;
          break;
        case EventDataOneofCase.Waitweaponready:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady>(Waitweaponready);
          Waitweaponready = null;
          break;
        case EventDataOneofCase.Quickcoldskill:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_QuickColdSkill>(Quickcoldskill);
          Quickcoldskill = null;
          break;
        case EventDataOneofCase.Catchingentity:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_CatchingEntity>(Catchingentity);
          Catchingentity = null;
          break;
        case EventDataOneofCase.Grounditem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_CreateGroundItem>(Grounditem);
          Grounditem = null;
          break;
        case EventDataOneofCase.Skillcold:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_SkillCold>(Skillcold);
          Skillcold = null;
          break;
        case EventDataOneofCase.Interface:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Interface>(Interface);
          Interface = null;
          break;
        case EventDataOneofCase.Skillmove:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_SkillMove>(Skillmove);
          Skillmove = null;
          break;
        case EventDataOneofCase.Gamblebox:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_GambleBox>(Gamblebox);
          Gamblebox = null;
          break;
        case EventDataOneofCase.Charyell:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_CharacterYell>(Charyell);
          Charyell = null;
          break;
        case EventDataOneofCase.LvupRet:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_LevelUpItemRet>(LvupRet);
          LvupRet = null;
          break;
        case EventDataOneofCase.Playerstate:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_PlayerState>(Playerstate);
          Playerstate = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Event(B2C_Event other) : this() {
      switch (other.EventDataCase) {
        case EventDataOneofCase.Attack:
          Attack = other.Attack.Clone();
          break;
        case EventDataOneofCase.BeHit:
          BeHit = other.BeHit.Clone();
          break;
        case EventDataOneofCase.Getboxitem:
          Getboxitem = other.Getboxitem.Clone();
          break;
        case EventDataOneofCase.Deplane:
          Deplane = other.Deplane.Clone();
          break;
        case EventDataOneofCase.Parachute:
          Parachute = other.Parachute.Clone();
          break;
        case EventDataOneofCase.Teleport:
          Teleport = other.Teleport.Clone();
          break;
        case EventDataOneofCase.Spemove:
          Spemove = other.Spemove.Clone();
          break;
        case EventDataOneofCase.Hitdown:
          Hitdown = other.Hitdown.Clone();
          break;
        case EventDataOneofCase.Grenade:
          Grenade = other.Grenade.Clone();
          break;
        case EventDataOneofCase.Opdoor:
          Opdoor = other.Opdoor.Clone();
          break;
        case EventDataOneofCase.Opvehicle:
          Opvehicle = other.Opvehicle.Clone();
          break;
        case EventDataOneofCase.Fallground:
          Fallground = other.Fallground.Clone();
          break;
        case EventDataOneofCase.Vehicontact:
          Vehicontact = other.Vehicontact.Clone();
          break;
        case EventDataOneofCase.Emptyray:
          Emptyray = other.Emptyray.Clone();
          break;
        case EventDataOneofCase.Rebullet:
          Rebullet = other.Rebullet.Clone();
          break;
        case EventDataOneofCase.Casting:
          Casting = other.Casting.Clone();
          break;
        case EventDataOneofCase.Hitback:
          Hitback = other.Hitback.Clone();
          break;
        case EventDataOneofCase.Packageitem:
          Packageitem = other.Packageitem.Clone();
          break;
        case EventDataOneofCase.Packageweight:
          Packageweight = other.Packageweight.Clone();
          break;
        case EventDataOneofCase.Killnum:
          Killnum = other.Killnum.Clone();
          break;
        case EventDataOneofCase.Climbeffect:
          Climbeffect = other.Climbeffect.Clone();
          break;
        case EventDataOneofCase.Shieldbreakeffect:
          Shieldbreakeffect = other.Shieldbreakeffect.Clone();
          break;
        case EventDataOneofCase.Skillstate:
          Skillstate = other.Skillstate.Clone();
          break;
        case EventDataOneofCase.Monsterattack:
          Monsterattack = other.Monsterattack.Clone();
          break;
        case EventDataOneofCase.Warningeffect:
          Warningeffect = other.Warningeffect.Clone();
          break;
        case EventDataOneofCase.Waitweaponready:
          Waitweaponready = other.Waitweaponready.Clone();
          break;
        case EventDataOneofCase.Quickcoldskill:
          Quickcoldskill = other.Quickcoldskill.Clone();
          break;
        case EventDataOneofCase.Catchingentity:
          Catchingentity = other.Catchingentity.Clone();
          break;
        case EventDataOneofCase.Grounditem:
          Grounditem = other.Grounditem.Clone();
          break;
        case EventDataOneofCase.Skillcold:
          Skillcold = other.Skillcold.Clone();
          break;
        case EventDataOneofCase.Interface:
          Interface = other.Interface.Clone();
          break;
        case EventDataOneofCase.Skillmove:
          Skillmove = other.Skillmove.Clone();
          break;
        case EventDataOneofCase.Gamblebox:
          Gamblebox = other.Gamblebox.Clone();
          break;
        case EventDataOneofCase.Charyell:
          Charyell = other.Charyell.Clone();
          break;
        case EventDataOneofCase.LvupRet:
          LvupRet = other.LvupRet.Clone();
          break;
        case EventDataOneofCase.Playerstate:
          Playerstate = other.Playerstate.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Event Clone() {
      return new B2C_Event(this);
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_Attack Attack {
      get { return eventDataCase_ == EventDataOneofCase.Attack ? (global::Pb.B2C_Event.Types.B2C_Attack) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Attack;
      }
    }

    /// <summary>Field number for the "beHit" field.</summary>
    public const int BeHitFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_BeHit BeHit {
      get { return eventDataCase_ == EventDataOneofCase.BeHit ? (global::Pb.B2C_Event.Types.B2C_BeHit) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.BeHit;
      }
    }

    /// <summary>Field number for the "getboxitem" field.</summary>
    public const int GetboxitemFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_GetBoxItem Getboxitem {
      get { return eventDataCase_ == EventDataOneofCase.Getboxitem ? (global::Pb.B2C_Event.Types.B2C_GetBoxItem) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Getboxitem;
      }
    }

    /// <summary>Field number for the "deplane" field.</summary>
    public const int DeplaneFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_LeavePlane Deplane {
      get { return eventDataCase_ == EventDataOneofCase.Deplane ? (global::Pb.B2C_Event.Types.B2C_LeavePlane) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Deplane;
      }
    }

    /// <summary>Field number for the "parachute" field.</summary>
    public const int ParachuteFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_Parachute Parachute {
      get { return eventDataCase_ == EventDataOneofCase.Parachute ? (global::Pb.B2C_Event.Types.B2C_Parachute) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Parachute;
      }
    }

    /// <summary>Field number for the "teleport" field.</summary>
    public const int TeleportFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.S2C_Teleport Teleport {
      get { return eventDataCase_ == EventDataOneofCase.Teleport ? (global::Pb.B2C_Event.Types.S2C_Teleport) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Teleport;
      }
    }

    /// <summary>Field number for the "spemove" field.</summary>
    public const int SpemoveFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.S2C_SpeMove Spemove {
      get { return eventDataCase_ == EventDataOneofCase.Spemove ? (global::Pb.B2C_Event.Types.S2C_SpeMove) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Spemove;
      }
    }

    /// <summary>Field number for the "hitdown" field.</summary>
    public const int HitdownFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_HitDown Hitdown {
      get { return eventDataCase_ == EventDataOneofCase.Hitdown ? (global::Pb.B2C_Event.Types.B2C_HitDown) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Hitdown;
      }
    }

    /// <summary>Field number for the "grenade" field.</summary>
    public const int GrenadeFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_Grenade Grenade {
      get { return eventDataCase_ == EventDataOneofCase.Grenade ? (global::Pb.B2C_Event.Types.B2C_Grenade) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Grenade;
      }
    }

    /// <summary>Field number for the "opdoor" field.</summary>
    public const int OpdoorFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_OperateDoor Opdoor {
      get { return eventDataCase_ == EventDataOneofCase.Opdoor ? (global::Pb.B2C_Event.Types.B2C_OperateDoor) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Opdoor;
      }
    }

    /// <summary>Field number for the "opvehicle" field.</summary>
    public const int OpvehicleFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_OperateVehicle Opvehicle {
      get { return eventDataCase_ == EventDataOneofCase.Opvehicle ? (global::Pb.B2C_Event.Types.B2C_OperateVehicle) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Opvehicle;
      }
    }

    /// <summary>Field number for the "fallground" field.</summary>
    public const int FallgroundFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_FallGround Fallground {
      get { return eventDataCase_ == EventDataOneofCase.Fallground ? (global::Pb.B2C_Event.Types.B2C_FallGround) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Fallground;
      }
    }

    /// <summary>Field number for the "vehicontact" field.</summary>
    public const int VehicontactFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_VehicleContact Vehicontact {
      get { return eventDataCase_ == EventDataOneofCase.Vehicontact ? (global::Pb.B2C_Event.Types.B2C_VehicleContact) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Vehicontact;
      }
    }

    /// <summary>Field number for the "emptyray" field.</summary>
    public const int EmptyrayFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_EmptyGun Emptyray {
      get { return eventDataCase_ == EventDataOneofCase.Emptyray ? (global::Pb.B2C_Event.Types.B2C_EmptyGun) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Emptyray;
      }
    }

    /// <summary>Field number for the "rebullet" field.</summary>
    public const int RebulletFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_ReloadBullet Rebullet {
      get { return eventDataCase_ == EventDataOneofCase.Rebullet ? (global::Pb.B2C_Event.Types.B2C_ReloadBullet) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Rebullet;
      }
    }

    /// <summary>Field number for the "casting" field.</summary>
    public const int CastingFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_Casting Casting {
      get { return eventDataCase_ == EventDataOneofCase.Casting ? (global::Pb.B2C_Event.Types.B2C_Casting) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Casting;
      }
    }

    /// <summary>Field number for the "hitback" field.</summary>
    public const int HitbackFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_HitBack Hitback {
      get { return eventDataCase_ == EventDataOneofCase.Hitback ? (global::Pb.B2C_Event.Types.B2C_HitBack) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Hitback;
      }
    }

    /// <summary>Field number for the "packageitem" field.</summary>
    public const int PackageitemFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_PackageItem Packageitem {
      get { return eventDataCase_ == EventDataOneofCase.Packageitem ? (global::Pb.B2C_Event.Types.B2C_PackageItem) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Packageitem;
      }
    }

    /// <summary>Field number for the "packageweight" field.</summary>
    public const int PackageweightFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_PackageWeight Packageweight {
      get { return eventDataCase_ == EventDataOneofCase.Packageweight ? (global::Pb.B2C_Event.Types.B2C_PackageWeight) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Packageweight;
      }
    }

    /// <summary>Field number for the "killnum" field.</summary>
    public const int KillnumFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_KillNum Killnum {
      get { return eventDataCase_ == EventDataOneofCase.Killnum ? (global::Pb.B2C_Event.Types.B2C_KillNum) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Killnum;
      }
    }

    /// <summary>Field number for the "climbeffect" field.</summary>
    public const int ClimbeffectFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_ClimbEffect Climbeffect {
      get { return eventDataCase_ == EventDataOneofCase.Climbeffect ? (global::Pb.B2C_Event.Types.B2C_ClimbEffect) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Climbeffect;
      }
    }

    /// <summary>Field number for the "shieldbreakeffect" field.</summary>
    public const int ShieldbreakeffectFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect Shieldbreakeffect {
      get { return eventDataCase_ == EventDataOneofCase.Shieldbreakeffect ? (global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Shieldbreakeffect;
      }
    }

    /// <summary>Field number for the "skillstate" field.</summary>
    public const int SkillstateFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_SkillState Skillstate {
      get { return eventDataCase_ == EventDataOneofCase.Skillstate ? (global::Pb.B2C_Event.Types.B2C_SkillState) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Skillstate;
      }
    }

    /// <summary>Field number for the "monsterattack" field.</summary>
    public const int MonsterattackFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_MonsterAttack Monsterattack {
      get { return eventDataCase_ == EventDataOneofCase.Monsterattack ? (global::Pb.B2C_Event.Types.B2C_MonsterAttack) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Monsterattack;
      }
    }

    /// <summary>Field number for the "warningeffect" field.</summary>
    public const int WarningeffectFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_WarningEffect Warningeffect {
      get { return eventDataCase_ == EventDataOneofCase.Warningeffect ? (global::Pb.B2C_Event.Types.B2C_WarningEffect) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Warningeffect;
      }
    }

    /// <summary>Field number for the "waitweaponready" field.</summary>
    public const int WaitweaponreadyFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_WaitWeaponReady Waitweaponready {
      get { return eventDataCase_ == EventDataOneofCase.Waitweaponready ? (global::Pb.B2C_Event.Types.B2C_WaitWeaponReady) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Waitweaponready;
      }
    }

    /// <summary>Field number for the "quickcoldskill" field.</summary>
    public const int QuickcoldskillFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_QuickColdSkill Quickcoldskill {
      get { return eventDataCase_ == EventDataOneofCase.Quickcoldskill ? (global::Pb.B2C_Event.Types.B2C_QuickColdSkill) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Quickcoldskill;
      }
    }

    /// <summary>Field number for the "catchingentity" field.</summary>
    public const int CatchingentityFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_CatchingEntity Catchingentity {
      get { return eventDataCase_ == EventDataOneofCase.Catchingentity ? (global::Pb.B2C_Event.Types.B2C_CatchingEntity) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Catchingentity;
      }
    }

    /// <summary>Field number for the "grounditem" field.</summary>
    public const int GrounditemFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_CreateGroundItem Grounditem {
      get { return eventDataCase_ == EventDataOneofCase.Grounditem ? (global::Pb.B2C_Event.Types.B2C_CreateGroundItem) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Grounditem;
      }
    }

    /// <summary>Field number for the "skillcold" field.</summary>
    public const int SkillcoldFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_SkillCold Skillcold {
      get { return eventDataCase_ == EventDataOneofCase.Skillcold ? (global::Pb.B2C_Event.Types.B2C_SkillCold) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Skillcold;
      }
    }

    /// <summary>Field number for the "interface" field.</summary>
    public const int InterfaceFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_Interface Interface {
      get { return eventDataCase_ == EventDataOneofCase.Interface ? (global::Pb.B2C_Event.Types.B2C_Interface) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Interface;
      }
    }

    /// <summary>Field number for the "skillmove" field.</summary>
    public const int SkillmoveFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_SkillMove Skillmove {
      get { return eventDataCase_ == EventDataOneofCase.Skillmove ? (global::Pb.B2C_Event.Types.B2C_SkillMove) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Skillmove;
      }
    }

    /// <summary>Field number for the "gamblebox" field.</summary>
    public const int GambleboxFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_GambleBox Gamblebox {
      get { return eventDataCase_ == EventDataOneofCase.Gamblebox ? (global::Pb.B2C_Event.Types.B2C_GambleBox) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Gamblebox;
      }
    }

    /// <summary>Field number for the "charyell" field.</summary>
    public const int CharyellFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_CharacterYell Charyell {
      get { return eventDataCase_ == EventDataOneofCase.Charyell ? (global::Pb.B2C_Event.Types.B2C_CharacterYell) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Charyell;
      }
    }

    /// <summary>Field number for the "lvupRet" field.</summary>
    public const int LvupRetFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_LevelUpItemRet LvupRet {
      get { return eventDataCase_ == EventDataOneofCase.LvupRet ? (global::Pb.B2C_Event.Types.B2C_LevelUpItemRet) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.LvupRet;
      }
    }

    /// <summary>Field number for the "playerstate" field.</summary>
    public const int PlayerstateFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Event.Types.B2C_PlayerState Playerstate {
      get { return eventDataCase_ == EventDataOneofCase.Playerstate ? (global::Pb.B2C_Event.Types.B2C_PlayerState) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Playerstate;
      }
    }

    private object eventData_;
    /// <summary>Enum of possible cases for the "EventData" oneof.</summary>
    public enum EventDataOneofCase {
      None = 0,
      Attack = 1,
      BeHit = 2,
      Getboxitem = 3,
      Deplane = 4,
      Parachute = 5,
      Teleport = 6,
      Spemove = 7,
      Hitdown = 8,
      Grenade = 9,
      Opdoor = 11,
      Opvehicle = 12,
      Fallground = 13,
      Vehicontact = 14,
      Emptyray = 15,
      Rebullet = 16,
      Casting = 17,
      Hitback = 18,
      Packageitem = 19,
      Packageweight = 20,
      Killnum = 21,
      Climbeffect = 22,
      Shieldbreakeffect = 23,
      Skillstate = 24,
      Monsterattack = 25,
      Warningeffect = 26,
      Waitweaponready = 27,
      Quickcoldskill = 28,
      Catchingentity = 29,
      Grounditem = 30,
      Skillcold = 31,
      Interface = 32,
      Skillmove = 33,
      Gamblebox = 34,
      Charyell = 35,
      LvupRet = 36,
      Playerstate = 37,
    }
    private EventDataOneofCase eventDataCase_ = EventDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataOneofCase EventDataCase {
      get { return eventDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventData() {
      eventDataCase_ = EventDataOneofCase.None;
      eventData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attack, other.Attack)) return false;
      if (!object.Equals(BeHit, other.BeHit)) return false;
      if (!object.Equals(Getboxitem, other.Getboxitem)) return false;
      if (!object.Equals(Deplane, other.Deplane)) return false;
      if (!object.Equals(Parachute, other.Parachute)) return false;
      if (!object.Equals(Teleport, other.Teleport)) return false;
      if (!object.Equals(Spemove, other.Spemove)) return false;
      if (!object.Equals(Hitdown, other.Hitdown)) return false;
      if (!object.Equals(Grenade, other.Grenade)) return false;
      if (!object.Equals(Opdoor, other.Opdoor)) return false;
      if (!object.Equals(Opvehicle, other.Opvehicle)) return false;
      if (!object.Equals(Fallground, other.Fallground)) return false;
      if (!object.Equals(Vehicontact, other.Vehicontact)) return false;
      if (!object.Equals(Emptyray, other.Emptyray)) return false;
      if (!object.Equals(Rebullet, other.Rebullet)) return false;
      if (!object.Equals(Casting, other.Casting)) return false;
      if (!object.Equals(Hitback, other.Hitback)) return false;
      if (!object.Equals(Packageitem, other.Packageitem)) return false;
      if (!object.Equals(Packageweight, other.Packageweight)) return false;
      if (!object.Equals(Killnum, other.Killnum)) return false;
      if (!object.Equals(Climbeffect, other.Climbeffect)) return false;
      if (!object.Equals(Shieldbreakeffect, other.Shieldbreakeffect)) return false;
      if (!object.Equals(Skillstate, other.Skillstate)) return false;
      if (!object.Equals(Monsterattack, other.Monsterattack)) return false;
      if (!object.Equals(Warningeffect, other.Warningeffect)) return false;
      if (!object.Equals(Waitweaponready, other.Waitweaponready)) return false;
      if (!object.Equals(Quickcoldskill, other.Quickcoldskill)) return false;
      if (!object.Equals(Catchingentity, other.Catchingentity)) return false;
      if (!object.Equals(Grounditem, other.Grounditem)) return false;
      if (!object.Equals(Skillcold, other.Skillcold)) return false;
      if (!object.Equals(Interface, other.Interface)) return false;
      if (!object.Equals(Skillmove, other.Skillmove)) return false;
      if (!object.Equals(Gamblebox, other.Gamblebox)) return false;
      if (!object.Equals(Charyell, other.Charyell)) return false;
      if (!object.Equals(LvupRet, other.LvupRet)) return false;
      if (!object.Equals(Playerstate, other.Playerstate)) return false;
      if (EventDataCase != other.EventDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventDataCase_ == EventDataOneofCase.Attack) hash ^= Attack.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.BeHit) hash ^= BeHit.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Getboxitem) hash ^= Getboxitem.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Deplane) hash ^= Deplane.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Parachute) hash ^= Parachute.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Teleport) hash ^= Teleport.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Spemove) hash ^= Spemove.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Hitdown) hash ^= Hitdown.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Grenade) hash ^= Grenade.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Opdoor) hash ^= Opdoor.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Opvehicle) hash ^= Opvehicle.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Fallground) hash ^= Fallground.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Vehicontact) hash ^= Vehicontact.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Emptyray) hash ^= Emptyray.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Rebullet) hash ^= Rebullet.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Casting) hash ^= Casting.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Hitback) hash ^= Hitback.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Packageitem) hash ^= Packageitem.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Packageweight) hash ^= Packageweight.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Killnum) hash ^= Killnum.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Climbeffect) hash ^= Climbeffect.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Shieldbreakeffect) hash ^= Shieldbreakeffect.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Skillstate) hash ^= Skillstate.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Monsterattack) hash ^= Monsterattack.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Warningeffect) hash ^= Warningeffect.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Waitweaponready) hash ^= Waitweaponready.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Quickcoldskill) hash ^= Quickcoldskill.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Catchingentity) hash ^= Catchingentity.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Grounditem) hash ^= Grounditem.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Skillcold) hash ^= Skillcold.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Interface) hash ^= Interface.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Skillmove) hash ^= Skillmove.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Gamblebox) hash ^= Gamblebox.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Charyell) hash ^= Charyell.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.LvupRet) hash ^= LvupRet.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Playerstate) hash ^= Playerstate.GetHashCode();
      hash ^= (int) eventDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventDataCase_ == EventDataOneofCase.Attack) {
        output.WriteRawTag(10);
        output.WriteMessage(Attack);
      }
      if (eventDataCase_ == EventDataOneofCase.BeHit) {
        output.WriteRawTag(18);
        output.WriteMessage(BeHit);
      }
      if (eventDataCase_ == EventDataOneofCase.Getboxitem) {
        output.WriteRawTag(26);
        output.WriteMessage(Getboxitem);
      }
      if (eventDataCase_ == EventDataOneofCase.Deplane) {
        output.WriteRawTag(34);
        output.WriteMessage(Deplane);
      }
      if (eventDataCase_ == EventDataOneofCase.Parachute) {
        output.WriteRawTag(42);
        output.WriteMessage(Parachute);
      }
      if (eventDataCase_ == EventDataOneofCase.Teleport) {
        output.WriteRawTag(50);
        output.WriteMessage(Teleport);
      }
      if (eventDataCase_ == EventDataOneofCase.Spemove) {
        output.WriteRawTag(58);
        output.WriteMessage(Spemove);
      }
      if (eventDataCase_ == EventDataOneofCase.Hitdown) {
        output.WriteRawTag(66);
        output.WriteMessage(Hitdown);
      }
      if (eventDataCase_ == EventDataOneofCase.Grenade) {
        output.WriteRawTag(74);
        output.WriteMessage(Grenade);
      }
      if (eventDataCase_ == EventDataOneofCase.Opdoor) {
        output.WriteRawTag(90);
        output.WriteMessage(Opdoor);
      }
      if (eventDataCase_ == EventDataOneofCase.Opvehicle) {
        output.WriteRawTag(98);
        output.WriteMessage(Opvehicle);
      }
      if (eventDataCase_ == EventDataOneofCase.Fallground) {
        output.WriteRawTag(106);
        output.WriteMessage(Fallground);
      }
      if (eventDataCase_ == EventDataOneofCase.Vehicontact) {
        output.WriteRawTag(114);
        output.WriteMessage(Vehicontact);
      }
      if (eventDataCase_ == EventDataOneofCase.Emptyray) {
        output.WriteRawTag(122);
        output.WriteMessage(Emptyray);
      }
      if (eventDataCase_ == EventDataOneofCase.Rebullet) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Rebullet);
      }
      if (eventDataCase_ == EventDataOneofCase.Casting) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Casting);
      }
      if (eventDataCase_ == EventDataOneofCase.Hitback) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Hitback);
      }
      if (eventDataCase_ == EventDataOneofCase.Packageitem) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Packageitem);
      }
      if (eventDataCase_ == EventDataOneofCase.Packageweight) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Packageweight);
      }
      if (eventDataCase_ == EventDataOneofCase.Killnum) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Killnum);
      }
      if (eventDataCase_ == EventDataOneofCase.Climbeffect) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Climbeffect);
      }
      if (eventDataCase_ == EventDataOneofCase.Shieldbreakeffect) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Shieldbreakeffect);
      }
      if (eventDataCase_ == EventDataOneofCase.Skillstate) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Skillstate);
      }
      if (eventDataCase_ == EventDataOneofCase.Monsterattack) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Monsterattack);
      }
      if (eventDataCase_ == EventDataOneofCase.Warningeffect) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Warningeffect);
      }
      if (eventDataCase_ == EventDataOneofCase.Waitweaponready) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Waitweaponready);
      }
      if (eventDataCase_ == EventDataOneofCase.Quickcoldskill) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Quickcoldskill);
      }
      if (eventDataCase_ == EventDataOneofCase.Catchingentity) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Catchingentity);
      }
      if (eventDataCase_ == EventDataOneofCase.Grounditem) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Grounditem);
      }
      if (eventDataCase_ == EventDataOneofCase.Skillcold) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Skillcold);
      }
      if (eventDataCase_ == EventDataOneofCase.Interface) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Interface);
      }
      if (eventDataCase_ == EventDataOneofCase.Skillmove) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Skillmove);
      }
      if (eventDataCase_ == EventDataOneofCase.Gamblebox) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Gamblebox);
      }
      if (eventDataCase_ == EventDataOneofCase.Charyell) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(Charyell);
      }
      if (eventDataCase_ == EventDataOneofCase.LvupRet) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LvupRet);
      }
      if (eventDataCase_ == EventDataOneofCase.Playerstate) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Playerstate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventDataCase_ == EventDataOneofCase.Attack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attack);
      }
      if (eventDataCase_ == EventDataOneofCase.BeHit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeHit);
      }
      if (eventDataCase_ == EventDataOneofCase.Getboxitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Getboxitem);
      }
      if (eventDataCase_ == EventDataOneofCase.Deplane) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deplane);
      }
      if (eventDataCase_ == EventDataOneofCase.Parachute) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parachute);
      }
      if (eventDataCase_ == EventDataOneofCase.Teleport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Teleport);
      }
      if (eventDataCase_ == EventDataOneofCase.Spemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spemove);
      }
      if (eventDataCase_ == EventDataOneofCase.Hitdown) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hitdown);
      }
      if (eventDataCase_ == EventDataOneofCase.Grenade) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Grenade);
      }
      if (eventDataCase_ == EventDataOneofCase.Opdoor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opdoor);
      }
      if (eventDataCase_ == EventDataOneofCase.Opvehicle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opvehicle);
      }
      if (eventDataCase_ == EventDataOneofCase.Fallground) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fallground);
      }
      if (eventDataCase_ == EventDataOneofCase.Vehicontact) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicontact);
      }
      if (eventDataCase_ == EventDataOneofCase.Emptyray) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emptyray);
      }
      if (eventDataCase_ == EventDataOneofCase.Rebullet) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rebullet);
      }
      if (eventDataCase_ == EventDataOneofCase.Casting) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Casting);
      }
      if (eventDataCase_ == EventDataOneofCase.Hitback) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hitback);
      }
      if (eventDataCase_ == EventDataOneofCase.Packageitem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Packageitem);
      }
      if (eventDataCase_ == EventDataOneofCase.Packageweight) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Packageweight);
      }
      if (eventDataCase_ == EventDataOneofCase.Killnum) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Killnum);
      }
      if (eventDataCase_ == EventDataOneofCase.Climbeffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Climbeffect);
      }
      if (eventDataCase_ == EventDataOneofCase.Shieldbreakeffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Shieldbreakeffect);
      }
      if (eventDataCase_ == EventDataOneofCase.Skillstate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Skillstate);
      }
      if (eventDataCase_ == EventDataOneofCase.Monsterattack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Monsterattack);
      }
      if (eventDataCase_ == EventDataOneofCase.Warningeffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Warningeffect);
      }
      if (eventDataCase_ == EventDataOneofCase.Waitweaponready) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Waitweaponready);
      }
      if (eventDataCase_ == EventDataOneofCase.Quickcoldskill) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quickcoldskill);
      }
      if (eventDataCase_ == EventDataOneofCase.Catchingentity) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Catchingentity);
      }
      if (eventDataCase_ == EventDataOneofCase.Grounditem) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Grounditem);
      }
      if (eventDataCase_ == EventDataOneofCase.Skillcold) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Skillcold);
      }
      if (eventDataCase_ == EventDataOneofCase.Interface) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Interface);
      }
      if (eventDataCase_ == EventDataOneofCase.Skillmove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Skillmove);
      }
      if (eventDataCase_ == EventDataOneofCase.Gamblebox) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gamblebox);
      }
      if (eventDataCase_ == EventDataOneofCase.Charyell) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Charyell);
      }
      if (eventDataCase_ == EventDataOneofCase.LvupRet) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LvupRet);
      }
      if (eventDataCase_ == EventDataOneofCase.Playerstate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Playerstate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Event other) {
      if (other == null) {
        return;
      }
      switch (other.EventDataCase) {
        case EventDataOneofCase.Attack:
          Attack = other.Attack;
          break;
        case EventDataOneofCase.BeHit:
          BeHit = other.BeHit;
          break;
        case EventDataOneofCase.Getboxitem:
          Getboxitem = other.Getboxitem;
          break;
        case EventDataOneofCase.Deplane:
          Deplane = other.Deplane;
          break;
        case EventDataOneofCase.Parachute:
          Parachute = other.Parachute;
          break;
        case EventDataOneofCase.Teleport:
          Teleport = other.Teleport;
          break;
        case EventDataOneofCase.Spemove:
          Spemove = other.Spemove;
          break;
        case EventDataOneofCase.Hitdown:
          Hitdown = other.Hitdown;
          break;
        case EventDataOneofCase.Grenade:
          Grenade = other.Grenade;
          break;
        case EventDataOneofCase.Opdoor:
          Opdoor = other.Opdoor;
          break;
        case EventDataOneofCase.Opvehicle:
          Opvehicle = other.Opvehicle;
          break;
        case EventDataOneofCase.Fallground:
          Fallground = other.Fallground;
          break;
        case EventDataOneofCase.Vehicontact:
          Vehicontact = other.Vehicontact;
          break;
        case EventDataOneofCase.Emptyray:
          Emptyray = other.Emptyray;
          break;
        case EventDataOneofCase.Rebullet:
          Rebullet = other.Rebullet;
          break;
        case EventDataOneofCase.Casting:
          Casting = other.Casting;
          break;
        case EventDataOneofCase.Hitback:
          Hitback = other.Hitback;
          break;
        case EventDataOneofCase.Packageitem:
          Packageitem = other.Packageitem;
          break;
        case EventDataOneofCase.Packageweight:
          Packageweight = other.Packageweight;
          break;
        case EventDataOneofCase.Killnum:
          Killnum = other.Killnum;
          break;
        case EventDataOneofCase.Climbeffect:
          Climbeffect = other.Climbeffect;
          break;
        case EventDataOneofCase.Shieldbreakeffect:
          Shieldbreakeffect = other.Shieldbreakeffect;
          break;
        case EventDataOneofCase.Skillstate:
          Skillstate = other.Skillstate;
          break;
        case EventDataOneofCase.Monsterattack:
          Monsterattack = other.Monsterattack;
          break;
        case EventDataOneofCase.Warningeffect:
          Warningeffect = other.Warningeffect;
          break;
        case EventDataOneofCase.Waitweaponready:
          Waitweaponready = other.Waitweaponready;
          break;
        case EventDataOneofCase.Quickcoldskill:
          Quickcoldskill = other.Quickcoldskill;
          break;
        case EventDataOneofCase.Catchingentity:
          Catchingentity = other.Catchingentity;
          break;
        case EventDataOneofCase.Grounditem:
          Grounditem = other.Grounditem;
          break;
        case EventDataOneofCase.Skillcold:
          Skillcold = other.Skillcold;
          break;
        case EventDataOneofCase.Interface:
          Interface = other.Interface;
          break;
        case EventDataOneofCase.Skillmove:
          Skillmove = other.Skillmove;
          break;
        case EventDataOneofCase.Gamblebox:
          Gamblebox = other.Gamblebox;
          break;
        case EventDataOneofCase.Charyell:
          Charyell = other.Charyell;
          break;
        case EventDataOneofCase.LvupRet:
          LvupRet = other.LvupRet;
          break;
        case EventDataOneofCase.Playerstate:
          Playerstate = other.Playerstate;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.B2C_Event.Types.B2C_Attack subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Attack>();
            if (eventDataCase_ == EventDataOneofCase.Attack) {
              subBuilder.MergeFrom(Attack);
            }
            input.ReadMessage(subBuilder);
            Attack = subBuilder;
            break;
          }
          case 18: {
            global::Pb.B2C_Event.Types.B2C_BeHit subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_BeHit>();
            if (eventDataCase_ == EventDataOneofCase.BeHit) {
              subBuilder.MergeFrom(BeHit);
            }
            input.ReadMessage(subBuilder);
            BeHit = subBuilder;
            break;
          }
          case 26: {
            global::Pb.B2C_Event.Types.B2C_GetBoxItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_GetBoxItem>();
            if (eventDataCase_ == EventDataOneofCase.Getboxitem) {
              subBuilder.MergeFrom(Getboxitem);
            }
            input.ReadMessage(subBuilder);
            Getboxitem = subBuilder;
            break;
          }
          case 34: {
            global::Pb.B2C_Event.Types.B2C_LeavePlane subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_LeavePlane>();
            if (eventDataCase_ == EventDataOneofCase.Deplane) {
              subBuilder.MergeFrom(Deplane);
            }
            input.ReadMessage(subBuilder);
            Deplane = subBuilder;
            break;
          }
          case 42: {
            global::Pb.B2C_Event.Types.B2C_Parachute subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Parachute>();
            if (eventDataCase_ == EventDataOneofCase.Parachute) {
              subBuilder.MergeFrom(Parachute);
            }
            input.ReadMessage(subBuilder);
            Parachute = subBuilder;
            break;
          }
          case 50: {
            global::Pb.B2C_Event.Types.S2C_Teleport subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.S2C_Teleport>();
            if (eventDataCase_ == EventDataOneofCase.Teleport) {
              subBuilder.MergeFrom(Teleport);
            }
            input.ReadMessage(subBuilder);
            Teleport = subBuilder;
            break;
          }
          case 58: {
            global::Pb.B2C_Event.Types.S2C_SpeMove subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.S2C_SpeMove>();
            if (eventDataCase_ == EventDataOneofCase.Spemove) {
              subBuilder.MergeFrom(Spemove);
            }
            input.ReadMessage(subBuilder);
            Spemove = subBuilder;
            break;
          }
          case 66: {
            global::Pb.B2C_Event.Types.B2C_HitDown subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_HitDown>();
            if (eventDataCase_ == EventDataOneofCase.Hitdown) {
              subBuilder.MergeFrom(Hitdown);
            }
            input.ReadMessage(subBuilder);
            Hitdown = subBuilder;
            break;
          }
          case 74: {
            global::Pb.B2C_Event.Types.B2C_Grenade subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Grenade>();
            if (eventDataCase_ == EventDataOneofCase.Grenade) {
              subBuilder.MergeFrom(Grenade);
            }
            input.ReadMessage(subBuilder);
            Grenade = subBuilder;
            break;
          }
          case 90: {
            global::Pb.B2C_Event.Types.B2C_OperateDoor subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_OperateDoor>();
            if (eventDataCase_ == EventDataOneofCase.Opdoor) {
              subBuilder.MergeFrom(Opdoor);
            }
            input.ReadMessage(subBuilder);
            Opdoor = subBuilder;
            break;
          }
          case 98: {
            global::Pb.B2C_Event.Types.B2C_OperateVehicle subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_OperateVehicle>();
            if (eventDataCase_ == EventDataOneofCase.Opvehicle) {
              subBuilder.MergeFrom(Opvehicle);
            }
            input.ReadMessage(subBuilder);
            Opvehicle = subBuilder;
            break;
          }
          case 106: {
            global::Pb.B2C_Event.Types.B2C_FallGround subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_FallGround>();
            if (eventDataCase_ == EventDataOneofCase.Fallground) {
              subBuilder.MergeFrom(Fallground);
            }
            input.ReadMessage(subBuilder);
            Fallground = subBuilder;
            break;
          }
          case 114: {
            global::Pb.B2C_Event.Types.B2C_VehicleContact subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_VehicleContact>();
            if (eventDataCase_ == EventDataOneofCase.Vehicontact) {
              subBuilder.MergeFrom(Vehicontact);
            }
            input.ReadMessage(subBuilder);
            Vehicontact = subBuilder;
            break;
          }
          case 122: {
            global::Pb.B2C_Event.Types.B2C_EmptyGun subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_EmptyGun>();
            if (eventDataCase_ == EventDataOneofCase.Emptyray) {
              subBuilder.MergeFrom(Emptyray);
            }
            input.ReadMessage(subBuilder);
            Emptyray = subBuilder;
            break;
          }
          case 130: {
            global::Pb.B2C_Event.Types.B2C_ReloadBullet subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_ReloadBullet>();
            if (eventDataCase_ == EventDataOneofCase.Rebullet) {
              subBuilder.MergeFrom(Rebullet);
            }
            input.ReadMessage(subBuilder);
            Rebullet = subBuilder;
            break;
          }
          case 138: {
            global::Pb.B2C_Event.Types.B2C_Casting subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Casting>();
            if (eventDataCase_ == EventDataOneofCase.Casting) {
              subBuilder.MergeFrom(Casting);
            }
            input.ReadMessage(subBuilder);
            Casting = subBuilder;
            break;
          }
          case 146: {
            global::Pb.B2C_Event.Types.B2C_HitBack subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_HitBack>();
            if (eventDataCase_ == EventDataOneofCase.Hitback) {
              subBuilder.MergeFrom(Hitback);
            }
            input.ReadMessage(subBuilder);
            Hitback = subBuilder;
            break;
          }
          case 154: {
            global::Pb.B2C_Event.Types.B2C_PackageItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_PackageItem>();
            if (eventDataCase_ == EventDataOneofCase.Packageitem) {
              subBuilder.MergeFrom(Packageitem);
            }
            input.ReadMessage(subBuilder);
            Packageitem = subBuilder;
            break;
          }
          case 162: {
            global::Pb.B2C_Event.Types.B2C_PackageWeight subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_PackageWeight>();
            if (eventDataCase_ == EventDataOneofCase.Packageweight) {
              subBuilder.MergeFrom(Packageweight);
            }
            input.ReadMessage(subBuilder);
            Packageweight = subBuilder;
            break;
          }
          case 170: {
            global::Pb.B2C_Event.Types.B2C_KillNum subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_KillNum>();
            if (eventDataCase_ == EventDataOneofCase.Killnum) {
              subBuilder.MergeFrom(Killnum);
            }
            input.ReadMessage(subBuilder);
            Killnum = subBuilder;
            break;
          }
          case 178: {
            global::Pb.B2C_Event.Types.B2C_ClimbEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_ClimbEffect>();
            if (eventDataCase_ == EventDataOneofCase.Climbeffect) {
              subBuilder.MergeFrom(Climbeffect);
            }
            input.ReadMessage(subBuilder);
            Climbeffect = subBuilder;
            break;
          }
          case 186: {
            global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_ShieldBreakEffect>();
            if (eventDataCase_ == EventDataOneofCase.Shieldbreakeffect) {
              subBuilder.MergeFrom(Shieldbreakeffect);
            }
            input.ReadMessage(subBuilder);
            Shieldbreakeffect = subBuilder;
            break;
          }
          case 194: {
            global::Pb.B2C_Event.Types.B2C_SkillState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_SkillState>();
            if (eventDataCase_ == EventDataOneofCase.Skillstate) {
              subBuilder.MergeFrom(Skillstate);
            }
            input.ReadMessage(subBuilder);
            Skillstate = subBuilder;
            break;
          }
          case 202: {
            global::Pb.B2C_Event.Types.B2C_MonsterAttack subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_MonsterAttack>();
            if (eventDataCase_ == EventDataOneofCase.Monsterattack) {
              subBuilder.MergeFrom(Monsterattack);
            }
            input.ReadMessage(subBuilder);
            Monsterattack = subBuilder;
            break;
          }
          case 210: {
            global::Pb.B2C_Event.Types.B2C_WarningEffect subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_WarningEffect>();
            if (eventDataCase_ == EventDataOneofCase.Warningeffect) {
              subBuilder.MergeFrom(Warningeffect);
            }
            input.ReadMessage(subBuilder);
            Warningeffect = subBuilder;
            break;
          }
          case 218: {
            global::Pb.B2C_Event.Types.B2C_WaitWeaponReady subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady>();
            if (eventDataCase_ == EventDataOneofCase.Waitweaponready) {
              subBuilder.MergeFrom(Waitweaponready);
            }
            input.ReadMessage(subBuilder);
            Waitweaponready = subBuilder;
            break;
          }
          case 226: {
            global::Pb.B2C_Event.Types.B2C_QuickColdSkill subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_QuickColdSkill>();
            if (eventDataCase_ == EventDataOneofCase.Quickcoldskill) {
              subBuilder.MergeFrom(Quickcoldskill);
            }
            input.ReadMessage(subBuilder);
            Quickcoldskill = subBuilder;
            break;
          }
          case 234: {
            global::Pb.B2C_Event.Types.B2C_CatchingEntity subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_CatchingEntity>();
            if (eventDataCase_ == EventDataOneofCase.Catchingentity) {
              subBuilder.MergeFrom(Catchingentity);
            }
            input.ReadMessage(subBuilder);
            Catchingentity = subBuilder;
            break;
          }
          case 242: {
            global::Pb.B2C_Event.Types.B2C_CreateGroundItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_CreateGroundItem>();
            if (eventDataCase_ == EventDataOneofCase.Grounditem) {
              subBuilder.MergeFrom(Grounditem);
            }
            input.ReadMessage(subBuilder);
            Grounditem = subBuilder;
            break;
          }
          case 250: {
            global::Pb.B2C_Event.Types.B2C_SkillCold subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_SkillCold>();
            if (eventDataCase_ == EventDataOneofCase.Skillcold) {
              subBuilder.MergeFrom(Skillcold);
            }
            input.ReadMessage(subBuilder);
            Skillcold = subBuilder;
            break;
          }
          case 258: {
            global::Pb.B2C_Event.Types.B2C_Interface subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Interface>();
            if (eventDataCase_ == EventDataOneofCase.Interface) {
              subBuilder.MergeFrom(Interface);
            }
            input.ReadMessage(subBuilder);
            Interface = subBuilder;
            break;
          }
          case 266: {
            global::Pb.B2C_Event.Types.B2C_SkillMove subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_SkillMove>();
            if (eventDataCase_ == EventDataOneofCase.Skillmove) {
              subBuilder.MergeFrom(Skillmove);
            }
            input.ReadMessage(subBuilder);
            Skillmove = subBuilder;
            break;
          }
          case 274: {
            global::Pb.B2C_Event.Types.B2C_GambleBox subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_GambleBox>();
            if (eventDataCase_ == EventDataOneofCase.Gamblebox) {
              subBuilder.MergeFrom(Gamblebox);
            }
            input.ReadMessage(subBuilder);
            Gamblebox = subBuilder;
            break;
          }
          case 282: {
            global::Pb.B2C_Event.Types.B2C_CharacterYell subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_CharacterYell>();
            if (eventDataCase_ == EventDataOneofCase.Charyell) {
              subBuilder.MergeFrom(Charyell);
            }
            input.ReadMessage(subBuilder);
            Charyell = subBuilder;
            break;
          }
          case 290: {
            global::Pb.B2C_Event.Types.B2C_LevelUpItemRet subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_LevelUpItemRet>();
            if (eventDataCase_ == EventDataOneofCase.LvupRet) {
              subBuilder.MergeFrom(LvupRet);
            }
            input.ReadMessage(subBuilder);
            LvupRet = subBuilder;
            break;
          }
          case 298: {
            global::Pb.B2C_Event.Types.B2C_PlayerState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_PlayerState>();
            if (eventDataCase_ == EventDataOneofCase.Playerstate) {
              subBuilder.MergeFrom(Playerstate);
            }
            input.ReadMessage(subBuilder);
            Playerstate = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class B2C_Attack : pb::IMessage<B2C_Attack> {
        private static readonly pb::MessageParser<B2C_Attack> _parser = new pb::MessageParser<B2C_Attack>(() => pb.ProtobufManager.New<B2C_Attack>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Attack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Attack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Skillid = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(attdir_);
          attdir_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(footoffset_);
          footoffset_ = null;
          Flashhidder = 0;
          Target = 0;
          Duration = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(attpos_);
          attpos_ = null;
          Radius = 0;
          Length = 0;
          Effectid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Attack(B2C_Attack other) : this() {
          skillid_ = other.skillid_;
          Attdir = other.attdir_ != null ? other.Attdir.Clone() : null;
          Footoffset = other.footoffset_ != null ? other.Footoffset.Clone() : null;
          flashhidder_ = other.flashhidder_;
          target_ = other.target_;
          duration_ = other.duration_;
          Attpos = other.attpos_ != null ? other.Attpos.Clone() : null;
          radius_ = other.radius_;
          length_ = other.length_;
          effectid_ = other.effectid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Attack Clone() {
          return new B2C_Attack(this);
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "attdir" field.</summary>
        public const int AttdirFieldNumber = 2;
        private global::Pb.Vector3PB attdir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Attdir {
          get { return attdir_; }
          set {
            attdir_ = value;
          }
        }

        /// <summary>Field number for the "footoffset" field.</summary>
        public const int FootoffsetFieldNumber = 3;
        private global::Pb.Vector3PB footoffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Footoffset {
          get { return footoffset_; }
          set {
            footoffset_ = value;
          }
        }

        /// <summary>Field number for the "flashhidder" field.</summary>
        public const int FlashhidderFieldNumber = 4;
        private float flashhidder_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Flashhidder {
          get { return flashhidder_; }
          set {
            flashhidder_ = value;
          }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 5;
        private ulong target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Target {
          get { return target_; }
          set {
            target_ = value;
          }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 6;
        private long duration_;
        /// <summary>
        /// 持续毫秒时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Duration {
          get { return duration_; }
          set {
            duration_ = value;
          }
        }

        /// <summary>Field number for the "attpos" field.</summary>
        public const int AttposFieldNumber = 7;
        private global::Pb.Vector3PB attpos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Attpos {
          get { return attpos_; }
          set {
            attpos_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 8;
        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 9;
        private float length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Length {
          get { return length_; }
          set {
            length_ = value;
          }
        }

        /// <summary>Field number for the "effectid" field.</summary>
        public const int EffectidFieldNumber = 10;
        private uint effectid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Effectid {
          get { return effectid_; }
          set {
            effectid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Attack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Attack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Skillid != other.Skillid) return false;
          if (!object.Equals(Attdir, other.Attdir)) return false;
          if (!object.Equals(Footoffset, other.Footoffset)) return false;
          if (Flashhidder != other.Flashhidder) return false;
          if (Target != other.Target) return false;
          if (Duration != other.Duration) return false;
          if (!object.Equals(Attpos, other.Attpos)) return false;
          if (Radius != other.Radius) return false;
          if (Length != other.Length) return false;
          if (Effectid != other.Effectid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (attdir_ != null) hash ^= Attdir.GetHashCode();
          if (footoffset_ != null) hash ^= Footoffset.GetHashCode();
          if (Flashhidder != 0F) hash ^= Flashhidder.GetHashCode();
          if (Target != 0UL) hash ^= Target.GetHashCode();
          if (Duration != 0L) hash ^= Duration.GetHashCode();
          if (attpos_ != null) hash ^= Attpos.GetHashCode();
          if (Radius != 0F) hash ^= Radius.GetHashCode();
          if (Length != 0F) hash ^= Length.GetHashCode();
          if (Effectid != 0) hash ^= Effectid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
          if (attdir_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Attdir);
          }
          if (footoffset_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Footoffset);
          }
          if (Flashhidder != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Flashhidder);
          }
          if (Target != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Target);
          }
          if (Duration != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(Duration);
          }
          if (attpos_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Attpos);
          }
          if (Radius != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(Radius);
          }
          if (Length != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(Length);
          }
          if (Effectid != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Effectid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (attdir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attdir);
          }
          if (footoffset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Footoffset);
          }
          if (Flashhidder != 0F) {
            size += 1 + 4;
          }
          if (Target != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Target);
          }
          if (Duration != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
          }
          if (attpos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attpos);
          }
          if (Radius != 0F) {
            size += 1 + 4;
          }
          if (Length != 0F) {
            size += 1 + 4;
          }
          if (Effectid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Attack other) {
          if (other == null) {
            return;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.attdir_ != null) {
            if (attdir_ == null) {
              attdir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Attdir.MergeFrom(other.Attdir);
          }
          if (other.footoffset_ != null) {
            if (footoffset_ == null) {
              footoffset_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Footoffset.MergeFrom(other.Footoffset);
          }
          if (other.Flashhidder != 0F) {
            Flashhidder = other.Flashhidder;
          }
          if (other.Target != 0UL) {
            Target = other.Target;
          }
          if (other.Duration != 0L) {
            Duration = other.Duration;
          }
          if (other.attpos_ != null) {
            if (attpos_ == null) {
              attpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Attpos.MergeFrom(other.Attpos);
          }
          if (other.Radius != 0F) {
            Radius = other.Radius;
          }
          if (other.Length != 0F) {
            Length = other.Length;
          }
          if (other.Effectid != 0) {
            Effectid = other.Effectid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 18: {
                if (attdir_ == null) {
                  attdir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(attdir_);
                break;
              }
              case 26: {
                if (footoffset_ == null) {
                  footoffset_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(footoffset_);
                break;
              }
              case 37: {
                Flashhidder = input.ReadFloat();
                break;
              }
              case 40: {
                Target = input.ReadUInt64();
                break;
              }
              case 48: {
                Duration = input.ReadInt64();
                break;
              }
              case 58: {
                if (attpos_ == null) {
                  attpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(attpos_);
                break;
              }
              case 69: {
                Radius = input.ReadFloat();
                break;
              }
              case 77: {
                Length = input.ReadFloat();
                break;
              }
              case 80: {
                Effectid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_EmptyGun : pb::IMessage<B2C_EmptyGun> {
        private static readonly pb::MessageParser<B2C_EmptyGun> _parser = new pb::MessageParser<B2C_EmptyGun>(() => pb.ProtobufManager.New<B2C_EmptyGun>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_EmptyGun> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_EmptyGun() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Skillid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_EmptyGun(B2C_EmptyGun other) : this() {
          skillid_ = other.skillid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_EmptyGun Clone() {
          return new B2C_EmptyGun(this);
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_EmptyGun);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_EmptyGun other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Skillid != other.Skillid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_EmptyGun other) {
          if (other == null) {
            return;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Grenade : pb::IMessage<B2C_Grenade> {
        private static readonly pb::MessageParser<B2C_Grenade> _parser = new pb::MessageParser<B2C_Grenade>(() => pb.ProtobufManager.New<B2C_Grenade>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Grenade> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Grenade() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Attx = 0;
          Atty = 0;
          Attz = 0;
          Dirx = 0;
          Diry = 0;
          Dirz = 0;
          Skillid = 0;
          Owner = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Grenade(B2C_Grenade other) : this() {
          attx_ = other.attx_;
          atty_ = other.atty_;
          attz_ = other.attz_;
          dirx_ = other.dirx_;
          diry_ = other.diry_;
          dirz_ = other.dirz_;
          skillid_ = other.skillid_;
          owner_ = other.owner_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Grenade Clone() {
          return new B2C_Grenade(this);
        }

        /// <summary>Field number for the "attx" field.</summary>
        public const int AttxFieldNumber = 1;
        private float attx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Attx {
          get { return attx_; }
          set {
            attx_ = value;
          }
        }

        /// <summary>Field number for the "atty" field.</summary>
        public const int AttyFieldNumber = 2;
        private float atty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Atty {
          get { return atty_; }
          set {
            atty_ = value;
          }
        }

        /// <summary>Field number for the "attz" field.</summary>
        public const int AttzFieldNumber = 3;
        private float attz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Attz {
          get { return attz_; }
          set {
            attz_ = value;
          }
        }

        /// <summary>Field number for the "dirx" field.</summary>
        public const int DirxFieldNumber = 4;
        private float dirx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Dirx {
          get { return dirx_; }
          set {
            dirx_ = value;
          }
        }

        /// <summary>Field number for the "diry" field.</summary>
        public const int DiryFieldNumber = 5;
        private float diry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Diry {
          get { return diry_; }
          set {
            diry_ = value;
          }
        }

        /// <summary>Field number for the "dirz" field.</summary>
        public const int DirzFieldNumber = 6;
        private float dirz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Dirz {
          get { return dirz_; }
          set {
            dirz_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 7;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 8;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Grenade);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Grenade other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Attx != other.Attx) return false;
          if (Atty != other.Atty) return false;
          if (Attz != other.Attz) return false;
          if (Dirx != other.Dirx) return false;
          if (Diry != other.Diry) return false;
          if (Dirz != other.Dirz) return false;
          if (Skillid != other.Skillid) return false;
          if (Owner != other.Owner) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Attx != 0F) hash ^= Attx.GetHashCode();
          if (Atty != 0F) hash ^= Atty.GetHashCode();
          if (Attz != 0F) hash ^= Attz.GetHashCode();
          if (Dirx != 0F) hash ^= Dirx.GetHashCode();
          if (Diry != 0F) hash ^= Diry.GetHashCode();
          if (Dirz != 0F) hash ^= Dirz.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Attx != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Attx);
          }
          if (Atty != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Atty);
          }
          if (Attz != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Attz);
          }
          if (Dirx != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Dirx);
          }
          if (Diry != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Diry);
          }
          if (Dirz != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(Dirz);
          }
          if (Skillid != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Skillid);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(Owner);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Attx != 0F) {
            size += 1 + 4;
          }
          if (Atty != 0F) {
            size += 1 + 4;
          }
          if (Attz != 0F) {
            size += 1 + 4;
          }
          if (Dirx != 0F) {
            size += 1 + 4;
          }
          if (Diry != 0F) {
            size += 1 + 4;
          }
          if (Dirz != 0F) {
            size += 1 + 4;
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Grenade other) {
          if (other == null) {
            return;
          }
          if (other.Attx != 0F) {
            Attx = other.Attx;
          }
          if (other.Atty != 0F) {
            Atty = other.Atty;
          }
          if (other.Attz != 0F) {
            Attz = other.Attz;
          }
          if (other.Dirx != 0F) {
            Dirx = other.Dirx;
          }
          if (other.Diry != 0F) {
            Diry = other.Diry;
          }
          if (other.Dirz != 0F) {
            Dirz = other.Dirz;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                Attx = input.ReadFloat();
                break;
              }
              case 21: {
                Atty = input.ReadFloat();
                break;
              }
              case 29: {
                Attz = input.ReadFloat();
                break;
              }
              case 37: {
                Dirx = input.ReadFloat();
                break;
              }
              case 45: {
                Diry = input.ReadFloat();
                break;
              }
              case 53: {
                Dirz = input.ReadFloat();
                break;
              }
              case 56: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 64: {
                Owner = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_BeHit : pb::IMessage<B2C_BeHit> {
        private static readonly pb::MessageParser<B2C_BeHit> _parser = new pb::MessageParser<B2C_BeHit>(() => pb.ProtobufManager.New<B2C_BeHit>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BeHit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BeHit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Uuid = 0;
          Skillid = 0;
          Critical = false;
          Damage = 0;
          Shield = false;
          Vulnerable = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BeHit(B2C_BeHit other) : this() {
          uuid_ = other.uuid_;
          skillid_ = other.skillid_;
          critical_ = other.critical_;
          damage_ = other.damage_;
          shield_ = other.shield_;
          vulnerable_ = other.vulnerable_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BeHit Clone() {
          return new B2C_BeHit(this);
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 1;
        private ulong uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Uuid {
          get { return uuid_; }
          set {
            uuid_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 2;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "critical" field.</summary>
        public const int CriticalFieldNumber = 3;
        private bool critical_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Critical {
          get { return critical_; }
          set {
            critical_ = value;
          }
        }

        /// <summary>Field number for the "damage" field.</summary>
        public const int DamageFieldNumber = 4;
        private long damage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Damage {
          get { return damage_; }
          set {
            damage_ = value;
          }
        }

        /// <summary>Field number for the "shield" field.</summary>
        public const int ShieldFieldNumber = 5;
        private bool shield_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Shield {
          get { return shield_; }
          set {
            shield_ = value;
          }
        }

        /// <summary>Field number for the "vulnerable" field.</summary>
        public const int VulnerableFieldNumber = 6;
        private bool vulnerable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Vulnerable {
          get { return vulnerable_; }
          set {
            vulnerable_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BeHit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BeHit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uuid != other.Uuid) return false;
          if (Skillid != other.Skillid) return false;
          if (Critical != other.Critical) return false;
          if (Damage != other.Damage) return false;
          if (Shield != other.Shield) return false;
          if (Vulnerable != other.Vulnerable) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Critical != false) hash ^= Critical.GetHashCode();
          if (Damage != 0L) hash ^= Damage.GetHashCode();
          if (Shield != false) hash ^= Shield.GetHashCode();
          if (Vulnerable != false) hash ^= Vulnerable.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Uuid);
          }
          if (Skillid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Skillid);
          }
          if (Critical != false) {
            output.WriteRawTag(24);
            output.WriteBool(Critical);
          }
          if (Damage != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Damage);
          }
          if (Shield != false) {
            output.WriteRawTag(40);
            output.WriteBool(Shield);
          }
          if (Vulnerable != false) {
            output.WriteRawTag(48);
            output.WriteBool(Vulnerable);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Critical != false) {
            size += 1 + 1;
          }
          if (Damage != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Damage);
          }
          if (Shield != false) {
            size += 1 + 1;
          }
          if (Vulnerable != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BeHit other) {
          if (other == null) {
            return;
          }
          if (other.Uuid != 0UL) {
            Uuid = other.Uuid;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Critical != false) {
            Critical = other.Critical;
          }
          if (other.Damage != 0L) {
            Damage = other.Damage;
          }
          if (other.Shield != false) {
            Shield = other.Shield;
          }
          if (other.Vulnerable != false) {
            Vulnerable = other.Vulnerable;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 24: {
                Critical = input.ReadBool();
                break;
              }
              case 32: {
                Damage = input.ReadInt64();
                break;
              }
              case 40: {
                Shield = input.ReadBool();
                break;
              }
              case 48: {
                Vulnerable = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_GetBoxItem : pb::IMessage<B2C_GetBoxItem> {
        private static readonly pb::MessageParser<B2C_GetBoxItem> _parser = new pb::MessageParser<B2C_GetBoxItem>(() => pb.ProtobufManager.New<B2C_GetBoxItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_GetBoxItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GetBoxItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Uuid = 0;
          for (int i = 0; i < boxitemdata_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ItemData>(boxitemdata_[i]);
          }
          boxitemdata_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GetBoxItem(B2C_GetBoxItem other) : this() {
          uuid_ = other.uuid_;
          boxitemdata_ = other.boxitemdata_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GetBoxItem Clone() {
          return new B2C_GetBoxItem(this);
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 1;
        private ulong uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Uuid {
          get { return uuid_; }
          set {
            uuid_ = value;
          }
        }

        /// <summary>Field number for the "boxitemdata" field.</summary>
        public const int BoxitemdataFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_boxitemdata_codec
            = pb::FieldCodec.ForMessage(18, global::Pb.ItemData.Parser);
        private readonly pbc::RepeatedField<global::Pb.ItemData> boxitemdata_ = new pbc::RepeatedField<global::Pb.ItemData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ItemData> Boxitemdata {
          get { return boxitemdata_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_GetBoxItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_GetBoxItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uuid != other.Uuid) return false;
          if(!boxitemdata_.Equals(other.boxitemdata_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
          hash ^= boxitemdata_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Uuid);
          }
          boxitemdata_.WriteTo(output, _repeated_boxitemdata_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
          }
          size += boxitemdata_.CalculateSize(_repeated_boxitemdata_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_GetBoxItem other) {
          if (other == null) {
            return;
          }
          if (other.Uuid != 0UL) {
            Uuid = other.Uuid;
          }
          boxitemdata_.Add(other.boxitemdata_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uuid = input.ReadUInt64();
                break;
              }
              case 18: {
                boxitemdata_.AddEntriesFrom(input, _repeated_boxitemdata_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_LeavePlane : pb::IMessage<B2C_LeavePlane> {
        private static readonly pb::MessageParser<B2C_LeavePlane> _parser = new pb::MessageParser<B2C_LeavePlane>(() => pb.ProtobufManager.New<B2C_LeavePlane>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_LeavePlane> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_LeavePlane() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Planeid = 0;
          X = 0;
          Y = 0;
          Z = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_LeavePlane(B2C_LeavePlane other) : this() {
          planeid_ = other.planeid_;
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_LeavePlane Clone() {
          return new B2C_LeavePlane(this);
        }

        /// <summary>Field number for the "planeid" field.</summary>
        public const int PlaneidFieldNumber = 1;
        private ulong planeid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Planeid {
          get { return planeid_; }
          set {
            planeid_ = value;
          }
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 2;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 3;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 4;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_LeavePlane);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_LeavePlane other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Planeid != other.Planeid) return false;
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Planeid != 0UL) hash ^= Planeid.GetHashCode();
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Planeid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Planeid);
          }
          if (X != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Z);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Planeid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Planeid);
          }
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_LeavePlane other) {
          if (other == null) {
            return;
          }
          if (other.Planeid != 0UL) {
            Planeid = other.Planeid;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Planeid = input.ReadUInt64();
                break;
              }
              case 21: {
                X = input.ReadFloat();
                break;
              }
              case 29: {
                Y = input.ReadFloat();
                break;
              }
              case 37: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Parachute : pb::IMessage<B2C_Parachute> {
        private static readonly pb::MessageParser<B2C_Parachute> _parser = new pb::MessageParser<B2C_Parachute>(() => pb.ProtobufManager.New<B2C_Parachute>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Parachute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Parachute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Parachute(B2C_Parachute other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Parachute Clone() {
          return new B2C_Parachute(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Parachute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Parachute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Parachute other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class S2C_Teleport : pb::IMessage<S2C_Teleport> {
        private static readonly pb::MessageParser<S2C_Teleport> _parser = new pb::MessageParser<S2C_Teleport>(() => pb.ProtobufManager.New<S2C_Teleport>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<S2C_Teleport> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public S2C_Teleport() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public S2C_Teleport(S2C_Teleport other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public S2C_Teleport Clone() {
          return new S2C_Teleport(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as S2C_Teleport);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(S2C_Teleport other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(S2C_Teleport other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class S2C_SpeMove : pb::IMessage<S2C_SpeMove> {
        private static readonly pb::MessageParser<S2C_SpeMove> _parser = new pb::MessageParser<S2C_SpeMove>(() => pb.ProtobufManager.New<S2C_SpeMove>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<S2C_SpeMove> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public S2C_SpeMove() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public S2C_SpeMove(S2C_SpeMove other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public S2C_SpeMove Clone() {
          return new S2C_SpeMove(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as S2C_SpeMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(S2C_SpeMove other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(S2C_SpeMove other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class B2C_HitDown : pb::IMessage<B2C_HitDown> {
        private static readonly pb::MessageParser<B2C_HitDown> _parser = new pb::MessageParser<B2C_HitDown>(() => pb.ProtobufManager.New<B2C_HitDown>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_HitDown> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HitDown() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Targetname = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HitDown(B2C_HitDown other) : this() {
          targetname_ = other.targetname_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HitDown Clone() {
          return new B2C_HitDown(this);
        }

        /// <summary>Field number for the "targetname" field.</summary>
        public const int TargetnameFieldNumber = 1;
        private string targetname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Targetname {
          get { return targetname_; }
          set {
            targetname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_HitDown);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_HitDown other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Targetname != other.Targetname) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Targetname.Length != 0) hash ^= Targetname.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Targetname.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Targetname);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Targetname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Targetname);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_HitDown other) {
          if (other == null) {
            return;
          }
          if (other.Targetname.Length != 0) {
            Targetname = other.Targetname;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Targetname = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_OperateDoor : pb::IMessage<B2C_OperateDoor> {
        private static readonly pb::MessageParser<B2C_OperateDoor> _parser = new pb::MessageParser<B2C_OperateDoor>(() => pb.ProtobufManager.New<B2C_OperateDoor>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_OperateDoor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OperateDoor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Doorid = 0;
          Type = 0;
          Opplyid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OperateDoor(B2C_OperateDoor other) : this() {
          doorid_ = other.doorid_;
          type_ = other.type_;
          opplyid_ = other.opplyid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OperateDoor Clone() {
          return new B2C_OperateDoor(this);
        }

        /// <summary>Field number for the "doorid" field.</summary>
        public const int DooridFieldNumber = 1;
        private uint doorid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Doorid {
          get { return doorid_; }
          set {
            doorid_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Pb.OpDoorType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.OpDoorType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "opplyid" field.</summary>
        public const int OpplyidFieldNumber = 3;
        private ulong opplyid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Opplyid {
          get { return opplyid_; }
          set {
            opplyid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_OperateDoor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_OperateDoor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Doorid != other.Doorid) return false;
          if (Type != other.Type) return false;
          if (Opplyid != other.Opplyid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Doorid != 0) hash ^= Doorid.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Opplyid != 0UL) hash ^= Opplyid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Doorid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Doorid);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (Opplyid != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Opplyid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Doorid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Doorid);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Opplyid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Opplyid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_OperateDoor other) {
          if (other == null) {
            return;
          }
          if (other.Doorid != 0) {
            Doorid = other.Doorid;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Opplyid != 0UL) {
            Opplyid = other.Opplyid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Doorid = input.ReadUInt32();
                break;
              }
              case 16: {
                type_ = (global::Pb.OpDoorType) input.ReadEnum();
                break;
              }
              case 24: {
                Opplyid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_OperateVehicle : pb::IMessage<B2C_OperateVehicle> {
        private static readonly pb::MessageParser<B2C_OperateVehicle> _parser = new pb::MessageParser<B2C_OperateVehicle>(() => pb.ProtobufManager.New<B2C_OperateVehicle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_OperateVehicle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OperateVehicle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          Open = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OperateVehicle(B2C_OperateVehicle other) : this() {
          entityid_ = other.entityid_;
          open_ = other.open_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OperateVehicle Clone() {
          return new B2C_OperateVehicle(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 2;
        private bool open_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_OperateVehicle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_OperateVehicle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (Open != other.Open) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Open != false) hash ^= Open.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (Open != false) {
            output.WriteRawTag(16);
            output.WriteBool(Open);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Open != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_OperateVehicle other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Open != false) {
            Open = other.Open;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 16: {
                Open = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_FallGround : pb::IMessage<B2C_FallGround> {
        private static readonly pb::MessageParser<B2C_FallGround> _parser = new pb::MessageParser<B2C_FallGround>(() => pb.ProtobufManager.New<B2C_FallGround>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_FallGround> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_FallGround() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_FallGround(B2C_FallGround other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_FallGround Clone() {
          return new B2C_FallGround(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_FallGround);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_FallGround other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_FallGround other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class B2C_VehicleContact : pb::IMessage<B2C_VehicleContact> {
        private static readonly pb::MessageParser<B2C_VehicleContact> _parser = new pb::MessageParser<B2C_VehicleContact>(() => pb.ProtobufManager.New<B2C_VehicleContact>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_VehicleContact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VehicleContact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Targtype = 0;
          Targuuid = 0;
          Speed = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VehicleContact(B2C_VehicleContact other) : this() {
          targtype_ = other.targtype_;
          targuuid_ = other.targuuid_;
          speed_ = other.speed_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VehicleContact Clone() {
          return new B2C_VehicleContact(this);
        }

        /// <summary>Field number for the "targtype" field.</summary>
        public const int TargtypeFieldNumber = 1;
        private global::Pb.EntityType targtype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.EntityType Targtype {
          get { return targtype_; }
          set {
            targtype_ = value;
          }
        }

        /// <summary>Field number for the "targuuid" field.</summary>
        public const int TarguuidFieldNumber = 2;
        private ulong targuuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Targuuid {
          get { return targuuid_; }
          set {
            targuuid_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 3;
        private float speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_VehicleContact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_VehicleContact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Targtype != other.Targtype) return false;
          if (Targuuid != other.Targuuid) return false;
          if (Speed != other.Speed) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Targtype != 0) hash ^= Targtype.GetHashCode();
          if (Targuuid != 0UL) hash ^= Targuuid.GetHashCode();
          if (Speed != 0F) hash ^= Speed.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Targtype != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Targtype);
          }
          if (Targuuid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Targuuid);
          }
          if (Speed != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Speed);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Targtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Targtype);
          }
          if (Targuuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuuid);
          }
          if (Speed != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_VehicleContact other) {
          if (other == null) {
            return;
          }
          if (other.Targtype != 0) {
            Targtype = other.Targtype;
          }
          if (other.Targuuid != 0UL) {
            Targuuid = other.Targuuid;
          }
          if (other.Speed != 0F) {
            Speed = other.Speed;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                targtype_ = (global::Pb.EntityType) input.ReadEnum();
                break;
              }
              case 16: {
                Targuuid = input.ReadUInt64();
                break;
              }
              case 29: {
                Speed = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_ReloadBullet : pb::IMessage<B2C_ReloadBullet> {
        private static readonly pb::MessageParser<B2C_ReloadBullet> _parser = new pb::MessageParser<B2C_ReloadBullet>(() => pb.ProtobufManager.New<B2C_ReloadBullet>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ReloadBullet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ReloadBullet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Weaponid = 0;
          Begin = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ReloadBullet(B2C_ReloadBullet other) : this() {
          weaponid_ = other.weaponid_;
          begin_ = other.begin_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ReloadBullet Clone() {
          return new B2C_ReloadBullet(this);
        }

        /// <summary>Field number for the "weaponid" field.</summary>
        public const int WeaponidFieldNumber = 1;
        private uint weaponid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Weaponid {
          get { return weaponid_; }
          set {
            weaponid_ = value;
          }
        }

        /// <summary>Field number for the "begin" field.</summary>
        public const int BeginFieldNumber = 2;
        private bool begin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Begin {
          get { return begin_; }
          set {
            begin_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ReloadBullet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ReloadBullet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Weaponid != other.Weaponid) return false;
          if (Begin != other.Begin) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Weaponid != 0) hash ^= Weaponid.GetHashCode();
          if (Begin != false) hash ^= Begin.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Weaponid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Weaponid);
          }
          if (Begin != false) {
            output.WriteRawTag(16);
            output.WriteBool(Begin);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Weaponid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weaponid);
          }
          if (Begin != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ReloadBullet other) {
          if (other == null) {
            return;
          }
          if (other.Weaponid != 0) {
            Weaponid = other.Weaponid;
          }
          if (other.Begin != false) {
            Begin = other.Begin;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Weaponid = input.ReadUInt32();
                break;
              }
              case 16: {
                Begin = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Casting : pb::IMessage<B2C_Casting> {
        private static readonly pb::MessageParser<B2C_Casting> _parser = new pb::MessageParser<B2C_Casting>(() => pb.ProtobufManager.New<B2C_Casting>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Casting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Casting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Type = 0;
          Start = false;
          Breakuid = 0;
          Break = false;
          Itemid = 0;
          Castingtime = 0;
          Stringkey = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Casting(B2C_Casting other) : this() {
          type_ = other.type_;
          start_ = other.start_;
          breakuid_ = other.breakuid_;
          break_ = other.break_;
          itemid_ = other.itemid_;
          castingtime_ = other.castingtime_;
          stringkey_ = other.stringkey_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Casting Clone() {
          return new B2C_Casting(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private uint type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 2;
        private bool start_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Start {
          get { return start_; }
          set {
            start_ = value;
          }
        }

        /// <summary>Field number for the "breakuid" field.</summary>
        public const int BreakuidFieldNumber = 3;
        private ulong breakuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Breakuid {
          get { return breakuid_; }
          set {
            breakuid_ = value;
          }
        }

        /// <summary>Field number for the "break" field.</summary>
        public const int BreakFieldNumber = 4;
        private bool break_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Break {
          get { return break_; }
          set {
            break_ = value;
          }
        }

        /// <summary>Field number for the "itemid" field.</summary>
        public const int ItemidFieldNumber = 5;
        private uint itemid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemid {
          get { return itemid_; }
          set {
            itemid_ = value;
          }
        }

        /// <summary>Field number for the "castingtime" field.</summary>
        public const int CastingtimeFieldNumber = 6;
        private long castingtime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Castingtime {
          get { return castingtime_; }
          set {
            castingtime_ = value;
          }
        }

        /// <summary>Field number for the "stringkey" field.</summary>
        public const int StringkeyFieldNumber = 7;
        private string stringkey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Stringkey {
          get { return stringkey_; }
          set {
            stringkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Casting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Casting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Start != other.Start) return false;
          if (Breakuid != other.Breakuid) return false;
          if (Break != other.Break) return false;
          if (Itemid != other.Itemid) return false;
          if (Castingtime != other.Castingtime) return false;
          if (Stringkey != other.Stringkey) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Start != false) hash ^= Start.GetHashCode();
          if (Breakuid != 0UL) hash ^= Breakuid.GetHashCode();
          if (Break != false) hash ^= Break.GetHashCode();
          if (Itemid != 0) hash ^= Itemid.GetHashCode();
          if (Castingtime != 0L) hash ^= Castingtime.GetHashCode();
          if (Stringkey.Length != 0) hash ^= Stringkey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Type);
          }
          if (Start != false) {
            output.WriteRawTag(16);
            output.WriteBool(Start);
          }
          if (Breakuid != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Breakuid);
          }
          if (Break != false) {
            output.WriteRawTag(32);
            output.WriteBool(Break);
          }
          if (Itemid != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Itemid);
          }
          if (Castingtime != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(Castingtime);
          }
          if (Stringkey.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Stringkey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (Start != false) {
            size += 1 + 1;
          }
          if (Breakuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Breakuid);
          }
          if (Break != false) {
            size += 1 + 1;
          }
          if (Itemid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
          }
          if (Castingtime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Castingtime);
          }
          if (Stringkey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Stringkey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Casting other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Start != false) {
            Start = other.Start;
          }
          if (other.Breakuid != 0UL) {
            Breakuid = other.Breakuid;
          }
          if (other.Break != false) {
            Break = other.Break;
          }
          if (other.Itemid != 0) {
            Itemid = other.Itemid;
          }
          if (other.Castingtime != 0L) {
            Castingtime = other.Castingtime;
          }
          if (other.Stringkey.Length != 0) {
            Stringkey = other.Stringkey;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Type = input.ReadUInt32();
                break;
              }
              case 16: {
                Start = input.ReadBool();
                break;
              }
              case 24: {
                Breakuid = input.ReadUInt64();
                break;
              }
              case 32: {
                Break = input.ReadBool();
                break;
              }
              case 40: {
                Itemid = input.ReadUInt32();
                break;
              }
              case 48: {
                Castingtime = input.ReadInt64();
                break;
              }
              case 58: {
                Stringkey = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_HitBack : pb::IMessage<B2C_HitBack> {
        private static readonly pb::MessageParser<B2C_HitBack> _parser = new pb::MessageParser<B2C_HitBack>(() => pb.ProtobufManager.New<B2C_HitBack>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_HitBack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HitBack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(dir_);
          dir_ = null;
          V1 = 0;
          T1 = 0;
          K = 0;
          T2 = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HitBack(B2C_HitBack other) : this() {
          Dir = other.dir_ != null ? other.Dir.Clone() : null;
          v1_ = other.v1_;
          t1_ = other.t1_;
          k_ = other.k_;
          t2_ = other.t2_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HitBack Clone() {
          return new B2C_HitBack(this);
        }

        /// <summary>Field number for the "dir" field.</summary>
        public const int DirFieldNumber = 1;
        private global::Pb.Vector3PB dir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Dir {
          get { return dir_; }
          set {
            dir_ = value;
          }
        }

        /// <summary>Field number for the "v1" field.</summary>
        public const int V1FieldNumber = 2;
        private float v1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float V1 {
          get { return v1_; }
          set {
            v1_ = value;
          }
        }

        /// <summary>Field number for the "t1" field.</summary>
        public const int T1FieldNumber = 3;
        private int t1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int T1 {
          get { return t1_; }
          set {
            t1_ = value;
          }
        }

        /// <summary>Field number for the "k" field.</summary>
        public const int KFieldNumber = 4;
        private float k_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float K {
          get { return k_; }
          set {
            k_ = value;
          }
        }

        /// <summary>Field number for the "t2" field.</summary>
        public const int T2FieldNumber = 5;
        private int t2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int T2 {
          get { return t2_; }
          set {
            t2_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_HitBack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_HitBack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Dir, other.Dir)) return false;
          if (V1 != other.V1) return false;
          if (T1 != other.T1) return false;
          if (K != other.K) return false;
          if (T2 != other.T2) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dir_ != null) hash ^= Dir.GetHashCode();
          if (V1 != 0F) hash ^= V1.GetHashCode();
          if (T1 != 0) hash ^= T1.GetHashCode();
          if (K != 0F) hash ^= K.GetHashCode();
          if (T2 != 0) hash ^= T2.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dir_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Dir);
          }
          if (V1 != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(V1);
          }
          if (T1 != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(T1);
          }
          if (K != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(K);
          }
          if (T2 != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(T2);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
          }
          if (V1 != 0F) {
            size += 1 + 4;
          }
          if (T1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(T1);
          }
          if (K != 0F) {
            size += 1 + 4;
          }
          if (T2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(T2);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_HitBack other) {
          if (other == null) {
            return;
          }
          if (other.dir_ != null) {
            if (dir_ == null) {
              dir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Dir.MergeFrom(other.Dir);
          }
          if (other.V1 != 0F) {
            V1 = other.V1;
          }
          if (other.T1 != 0) {
            T1 = other.T1;
          }
          if (other.K != 0F) {
            K = other.K;
          }
          if (other.T2 != 0) {
            T2 = other.T2;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (dir_ == null) {
                  dir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(dir_);
                break;
              }
              case 21: {
                V1 = input.ReadFloat();
                break;
              }
              case 24: {
                T1 = input.ReadInt32();
                break;
              }
              case 37: {
                K = input.ReadFloat();
                break;
              }
              case 40: {
                T2 = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PackageItem : pb::IMessage<B2C_PackageItem> {
        private static readonly pb::MessageParser<B2C_PackageItem> _parser = new pb::MessageParser<B2C_PackageItem>(() => pb.ProtobufManager.New<B2C_PackageItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PackageItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PackageItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < data_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData>(data_[i]);
          }
          data_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PackageItem(B2C_PackageItem other) : this() {
          data_ = other.data_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PackageItem Clone() {
          return new B2C_PackageItem(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData> _repeated_data_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData> data_ = new pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_PackageItem.Types.UpdateData> Data {
          get { return data_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PackageItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PackageItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!data_.Equals(other.data_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= data_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          data_.WriteTo(output, _repeated_data_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += data_.CalculateSize(_repeated_data_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PackageItem other) {
          if (other == null) {
            return;
          }
          data_.Add(other.data_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                data_.AddEntriesFrom(input, _repeated_data_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_PackageItem message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class UpdateData : pb::IMessage<UpdateData> {
            private static readonly pb::MessageParser<UpdateData> _parser = new pb::MessageParser<UpdateData>(() => pb.ProtobufManager.New<UpdateData>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<UpdateData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_PackageItem.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UpdateData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              pb.ProtobufManager.Reclaim<global::Pb.ItemData>(item_);
              item_ = null;
              Operate = 0;
              Pos = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UpdateData(UpdateData other) : this() {
              Item = other.item_ != null ? other.Item.Clone() : null;
              operate_ = other.operate_;
              pos_ = other.pos_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UpdateData Clone() {
              return new UpdateData(this);
            }

            /// <summary>Field number for the "item" field.</summary>
            public const int ItemFieldNumber = 1;
            private global::Pb.ItemData item_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.ItemData Item {
              get { return item_; }
              set {
                item_ = value;
              }
            }

            /// <summary>Field number for the "operate" field.</summary>
            public const int OperateFieldNumber = 2;
            private global::Pb.PackageOperate operate_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.PackageOperate Operate {
              get { return operate_; }
              set {
                operate_ = value;
              }
            }

            /// <summary>Field number for the "pos" field.</summary>
            public const int PosFieldNumber = 3;
            private global::Pb.PackagePosType pos_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.PackagePosType Pos {
              get { return pos_; }
              set {
                pos_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as UpdateData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(UpdateData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Item, other.Item)) return false;
              if (Operate != other.Operate) return false;
              if (Pos != other.Pos) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (item_ != null) hash ^= Item.GetHashCode();
              if (Operate != 0) hash ^= Operate.GetHashCode();
              if (Pos != 0) hash ^= Pos.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (item_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Item);
              }
              if (Operate != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Operate);
              }
              if (Pos != 0) {
                output.WriteRawTag(24);
                output.WriteEnum((int) Pos);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (item_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
              }
              if (Operate != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
              }
              if (Pos != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pos);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(UpdateData other) {
              if (other == null) {
                return;
              }
              if (other.item_ != null) {
                if (item_ == null) {
                  item_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                }
                Item.MergeFrom(other.Item);
              }
              if (other.Operate != 0) {
                Operate = other.Operate;
              }
              if (other.Pos != 0) {
                Pos = other.Pos;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (item_ == null) {
                      item_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                    }
                    input.ReadMessage(item_);
                    break;
                  }
                  case 16: {
                    operate_ = (global::Pb.PackageOperate) input.ReadEnum();
                    break;
                  }
                  case 24: {
                    pos_ = (global::Pb.PackagePosType) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_PackageWeight : pb::IMessage<B2C_PackageWeight> {
        private static readonly pb::MessageParser<B2C_PackageWeight> _parser = new pb::MessageParser<B2C_PackageWeight>(() => pb.ProtobufManager.New<B2C_PackageWeight>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PackageWeight> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PackageWeight() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Maxweight = 0;
          Weight = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PackageWeight(B2C_PackageWeight other) : this() {
          maxweight_ = other.maxweight_;
          weight_ = other.weight_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PackageWeight Clone() {
          return new B2C_PackageWeight(this);
        }

        /// <summary>Field number for the "maxweight" field.</summary>
        public const int MaxweightFieldNumber = 1;
        private int maxweight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxweight {
          get { return maxweight_; }
          set {
            maxweight_ = value;
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 2;
        private int weight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PackageWeight);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PackageWeight other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Maxweight != other.Maxweight) return false;
          if (Weight != other.Weight) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Maxweight != 0) hash ^= Maxweight.GetHashCode();
          if (Weight != 0) hash ^= Weight.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Maxweight != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Maxweight);
          }
          if (Weight != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Weight);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Maxweight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxweight);
          }
          if (Weight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PackageWeight other) {
          if (other == null) {
            return;
          }
          if (other.Maxweight != 0) {
            Maxweight = other.Maxweight;
          }
          if (other.Weight != 0) {
            Weight = other.Weight;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Maxweight = input.ReadInt32();
                break;
              }
              case 16: {
                Weight = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_KillNum : pb::IMessage<B2C_KillNum> {
        private static readonly pb::MessageParser<B2C_KillNum> _parser = new pb::MessageParser<B2C_KillNum>(() => pb.ProtobufManager.New<B2C_KillNum>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_KillNum> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillNum() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillNum(B2C_KillNum other) : this() {
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillNum Clone() {
          return new B2C_KillNum(this);
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 1;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_KillNum);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_KillNum other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Num != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_KillNum other) {
          if (other == null) {
            return;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_ClimbEffect : pb::IMessage<B2C_ClimbEffect> {
        private static readonly pb::MessageParser<B2C_ClimbEffect> _parser = new pb::MessageParser<B2C_ClimbEffect>(() => pb.ProtobufManager.New<B2C_ClimbEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ClimbEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ClimbEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(climbpos_);
          climbpos_ = null;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(climbdir_);
          climbdir_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ClimbEffect(B2C_ClimbEffect other) : this() {
          Climbpos = other.climbpos_ != null ? other.Climbpos.Clone() : null;
          Climbdir = other.climbdir_ != null ? other.Climbdir.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ClimbEffect Clone() {
          return new B2C_ClimbEffect(this);
        }

        /// <summary>Field number for the "climbpos" field.</summary>
        public const int ClimbposFieldNumber = 1;
        private global::Pb.Vector3PB climbpos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Climbpos {
          get { return climbpos_; }
          set {
            climbpos_ = value;
          }
        }

        /// <summary>Field number for the "climbdir" field.</summary>
        public const int ClimbdirFieldNumber = 2;
        private global::Pb.Vector3PB climbdir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Climbdir {
          get { return climbdir_; }
          set {
            climbdir_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ClimbEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ClimbEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Climbpos, other.Climbpos)) return false;
          if (!object.Equals(Climbdir, other.Climbdir)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (climbpos_ != null) hash ^= Climbpos.GetHashCode();
          if (climbdir_ != null) hash ^= Climbdir.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (climbpos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Climbpos);
          }
          if (climbdir_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Climbdir);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (climbpos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Climbpos);
          }
          if (climbdir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Climbdir);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ClimbEffect other) {
          if (other == null) {
            return;
          }
          if (other.climbpos_ != null) {
            if (climbpos_ == null) {
              climbpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Climbpos.MergeFrom(other.Climbpos);
          }
          if (other.climbdir_ != null) {
            if (climbdir_ == null) {
              climbdir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Climbdir.MergeFrom(other.Climbdir);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (climbpos_ == null) {
                  climbpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(climbpos_);
                break;
              }
              case 18: {
                if (climbdir_ == null) {
                  climbdir_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(climbdir_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_ShieldBreakEffect : pb::IMessage<B2C_ShieldBreakEffect> {
        private static readonly pb::MessageParser<B2C_ShieldBreakEffect> _parser = new pb::MessageParser<B2C_ShieldBreakEffect>(() => pb.ProtobufManager.New<B2C_ShieldBreakEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ShieldBreakEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShieldBreakEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Id = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShieldBreakEffect(B2C_ShieldBreakEffect other) : this() {
          id_ = other.id_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShieldBreakEffect Clone() {
          return new B2C_ShieldBreakEffect(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ShieldBreakEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ShieldBreakEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ShieldBreakEffect other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SkillState : pb::IMessage<B2C_SkillState> {
        private static readonly pb::MessageParser<B2C_SkillState> _parser = new pb::MessageParser<B2C_SkillState>(() => pb.ProtobufManager.New<B2C_SkillState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SkillState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.SkillStateData>(skillstatedata_);
          skillstatedata_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillState(B2C_SkillState other) : this() {
          Skillstatedata = other.skillstatedata_ != null ? other.Skillstatedata.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillState Clone() {
          return new B2C_SkillState(this);
        }

        /// <summary>Field number for the "skillstatedata" field.</summary>
        public const int SkillstatedataFieldNumber = 1;
        private global::Pb.SkillStateData skillstatedata_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.SkillStateData Skillstatedata {
          get { return skillstatedata_; }
          set {
            skillstatedata_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SkillState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SkillState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Skillstatedata, other.Skillstatedata)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (skillstatedata_ != null) hash ^= Skillstatedata.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (skillstatedata_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Skillstatedata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (skillstatedata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skillstatedata);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SkillState other) {
          if (other == null) {
            return;
          }
          if (other.skillstatedata_ != null) {
            if (skillstatedata_ == null) {
              skillstatedata_ = pb.ProtobufManager.New<global::Pb.SkillStateData>();
            }
            Skillstatedata.MergeFrom(other.Skillstatedata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (skillstatedata_ == null) {
                  skillstatedata_ = pb.ProtobufManager.New<global::Pb.SkillStateData>();
                }
                input.ReadMessage(skillstatedata_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MonsterAttack : pb::IMessage<B2C_MonsterAttack> {
        private static readonly pb::MessageParser<B2C_MonsterAttack> _parser = new pb::MessageParser<B2C_MonsterAttack>(() => pb.ProtobufManager.New<B2C_MonsterAttack>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MonsterAttack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterAttack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Targetid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterAttack(B2C_MonsterAttack other) : this() {
          targetid_ = other.targetid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterAttack Clone() {
          return new B2C_MonsterAttack(this);
        }

        /// <summary>Field number for the "targetid" field.</summary>
        public const int TargetidFieldNumber = 1;
        private ulong targetid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Targetid {
          get { return targetid_; }
          set {
            targetid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MonsterAttack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MonsterAttack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Targetid != other.Targetid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Targetid != 0UL) hash ^= Targetid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Targetid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Targetid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Targetid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MonsterAttack other) {
          if (other == null) {
            return;
          }
          if (other.Targetid != 0UL) {
            Targetid = other.Targetid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Targetid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_WarningEffect : pb::IMessage<B2C_WarningEffect> {
        private static readonly pb::MessageParser<B2C_WarningEffect> _parser = new pb::MessageParser<B2C_WarningEffect>(() => pb.ProtobufManager.New<B2C_WarningEffect>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_WarningEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WarningEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
          Z = 0;
          Skillid = 0;
          Lifetime = 0;
          Radius = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WarningEffect(B2C_WarningEffect other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          skillid_ = other.skillid_;
          lifetime_ = other.lifetime_;
          radius_ = other.radius_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WarningEffect Clone() {
          return new B2C_WarningEffect(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 4;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "lifetime" field.</summary>
        public const int LifetimeFieldNumber = 5;
        private int lifetime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lifetime {
          get { return lifetime_; }
          set {
            lifetime_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 6;
        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_WarningEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_WarningEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (Z != other.Z) return false;
          if (Skillid != other.Skillid) return false;
          if (Lifetime != other.Lifetime) return false;
          if (Radius != other.Radius) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          if (Z != 0F) hash ^= Z.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Lifetime != 0) hash ^= Lifetime.GetHashCode();
          if (Radius != 0F) hash ^= Radius.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (Skillid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Skillid);
          }
          if (Lifetime != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Lifetime);
          }
          if (Radius != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(Radius);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Lifetime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lifetime);
          }
          if (Radius != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_WarningEffect other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Lifetime != 0) {
            Lifetime = other.Lifetime;
          }
          if (other.Radius != 0F) {
            Radius = other.Radius;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
              case 32: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 40: {
                Lifetime = input.ReadInt32();
                break;
              }
              case 53: {
                Radius = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_WaitWeaponReady : pb::IMessage<B2C_WaitWeaponReady> {
        private static readonly pb::MessageParser<B2C_WaitWeaponReady> _parser = new pb::MessageParser<B2C_WaitWeaponReady>(() => pb.ProtobufManager.New<B2C_WaitWeaponReady>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_WaitWeaponReady> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WaitWeaponReady() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < waitweapon_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime>(waitweapon_[i]);
          }
          waitweapon_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WaitWeaponReady(B2C_WaitWeaponReady other) : this() {
          waitweapon_ = other.waitweapon_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WaitWeaponReady Clone() {
          return new B2C_WaitWeaponReady(this);
        }

        /// <summary>Field number for the "waitweapon" field.</summary>
        public const int WaitweaponFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime> _repeated_waitweapon_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime> waitweapon_ = new pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Types.WeaponWaitTime> Waitweapon {
          get { return waitweapon_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_WaitWeaponReady);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_WaitWeaponReady other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!waitweapon_.Equals(other.waitweapon_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= waitweapon_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          waitweapon_.WriteTo(output, _repeated_waitweapon_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += waitweapon_.CalculateSize(_repeated_waitweapon_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_WaitWeaponReady other) {
          if (other == null) {
            return;
          }
          waitweapon_.Add(other.waitweapon_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                waitweapon_.AddEntriesFrom(input, _repeated_waitweapon_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_WaitWeaponReady message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class WeaponWaitTime : pb::IMessage<WeaponWaitTime> {
            private static readonly pb::MessageParser<WeaponWaitTime> _parser = new pb::MessageParser<WeaponWaitTime>(() => pb.ProtobufManager.New<WeaponWaitTime>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WeaponWaitTime> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_WaitWeaponReady.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WeaponWaitTime() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Itemuid = 0;
              Ready = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WeaponWaitTime(WeaponWaitTime other) : this() {
              itemuid_ = other.itemuid_;
              ready_ = other.ready_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WeaponWaitTime Clone() {
              return new WeaponWaitTime(this);
            }

            /// <summary>Field number for the "itemuid" field.</summary>
            public const int ItemuidFieldNumber = 1;
            private ulong itemuid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Itemuid {
              get { return itemuid_; }
              set {
                itemuid_ = value;
              }
            }

            /// <summary>Field number for the "ready" field.</summary>
            public const int ReadyFieldNumber = 2;
            private bool ready_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Ready {
              get { return ready_; }
              set {
                ready_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WeaponWaitTime);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WeaponWaitTime other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Itemuid != other.Itemuid) return false;
              if (Ready != other.Ready) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
              if (Ready != false) hash ^= Ready.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Itemuid != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(Itemuid);
              }
              if (Ready != false) {
                output.WriteRawTag(16);
                output.WriteBool(Ready);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Itemuid != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
              }
              if (Ready != false) {
                size += 1 + 1;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WeaponWaitTime other) {
              if (other == null) {
                return;
              }
              if (other.Itemuid != 0UL) {
                Itemuid = other.Itemuid;
              }
              if (other.Ready != false) {
                Ready = other.Ready;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Itemuid = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    Ready = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_QuickColdSkill : pb::IMessage<B2C_QuickColdSkill> {
        private static readonly pb::MessageParser<B2C_QuickColdSkill> _parser = new pb::MessageParser<B2C_QuickColdSkill>(() => pb.ProtobufManager.New<B2C_QuickColdSkill>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_QuickColdSkill> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_QuickColdSkill() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < skillquickcold_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold>(skillquickcold_[i]);
          }
          skillquickcold_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_QuickColdSkill(B2C_QuickColdSkill other) : this() {
          skillquickcold_ = other.skillquickcold_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_QuickColdSkill Clone() {
          return new B2C_QuickColdSkill(this);
        }

        /// <summary>Field number for the "skillquickcold" field.</summary>
        public const int SkillquickcoldFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold> _repeated_skillquickcold_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold> skillquickcold_ = new pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Types.SkillQuickCold> Skillquickcold {
          get { return skillquickcold_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_QuickColdSkill);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_QuickColdSkill other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!skillquickcold_.Equals(other.skillquickcold_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= skillquickcold_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          skillquickcold_.WriteTo(output, _repeated_skillquickcold_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += skillquickcold_.CalculateSize(_repeated_skillquickcold_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_QuickColdSkill other) {
          if (other == null) {
            return;
          }
          skillquickcold_.Add(other.skillquickcold_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                skillquickcold_.AddEntriesFrom(input, _repeated_skillquickcold_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_QuickColdSkill message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class SkillQuickCold : pb::IMessage<SkillQuickCold> {
            private static readonly pb::MessageParser<SkillQuickCold> _parser = new pb::MessageParser<SkillQuickCold>(() => pb.ProtobufManager.New<SkillQuickCold>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SkillQuickCold> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_QuickColdSkill.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SkillQuickCold() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Skillid = 0;
              Cold = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SkillQuickCold(SkillQuickCold other) : this() {
              skillid_ = other.skillid_;
              cold_ = other.cold_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SkillQuickCold Clone() {
              return new SkillQuickCold(this);
            }

            /// <summary>Field number for the "skillid" field.</summary>
            public const int SkillidFieldNumber = 1;
            private uint skillid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Skillid {
              get { return skillid_; }
              set {
                skillid_ = value;
              }
            }

            /// <summary>Field number for the "cold" field.</summary>
            public const int ColdFieldNumber = 2;
            private long cold_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Cold {
              get { return cold_; }
              set {
                cold_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SkillQuickCold);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SkillQuickCold other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Skillid != other.Skillid) return false;
              if (Cold != other.Cold) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Skillid != 0) hash ^= Skillid.GetHashCode();
              if (Cold != 0L) hash ^= Cold.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Skillid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Skillid);
              }
              if (Cold != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Cold);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Skillid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
              }
              if (Cold != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cold);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SkillQuickCold other) {
              if (other == null) {
                return;
              }
              if (other.Skillid != 0) {
                Skillid = other.Skillid;
              }
              if (other.Cold != 0L) {
                Cold = other.Cold;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Skillid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Cold = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_CatchingEntity : pb::IMessage<B2C_CatchingEntity> {
        private static readonly pb::MessageParser<B2C_CatchingEntity> _parser = new pb::MessageParser<B2C_CatchingEntity>(() => pb.ProtobufManager.New<B2C_CatchingEntity>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_CatchingEntity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CatchingEntity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Create = false;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
          Entityid = 0;
          Featureid = 0;
          Target = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CatchingEntity(B2C_CatchingEntity other) : this() {
          create_ = other.create_;
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
          entityid_ = other.entityid_;
          featureid_ = other.featureid_;
          target_ = other.target_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CatchingEntity Clone() {
          return new B2C_CatchingEntity(this);
        }

        /// <summary>Field number for the "create" field.</summary>
        public const int CreateFieldNumber = 1;
        private bool create_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Create {
          get { return create_; }
          set {
            create_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 2;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 3;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "featureid" field.</summary>
        public const int FeatureidFieldNumber = 4;
        private uint featureid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Featureid {
          get { return featureid_; }
          set {
            featureid_ = value;
          }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 5;
        private ulong target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Target {
          get { return target_; }
          set {
            target_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_CatchingEntity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_CatchingEntity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Create != other.Create) return false;
          if (!object.Equals(Pos, other.Pos)) return false;
          if (Entityid != other.Entityid) return false;
          if (Featureid != other.Featureid) return false;
          if (Target != other.Target) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Create != false) hash ^= Create.GetHashCode();
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Featureid != 0) hash ^= Featureid.GetHashCode();
          if (Target != 0UL) hash ^= Target.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Create != false) {
            output.WriteRawTag(8);
            output.WriteBool(Create);
          }
          if (pos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Pos);
          }
          if (Entityid != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Entityid);
          }
          if (Featureid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Featureid);
          }
          if (Target != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Target);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Create != false) {
            size += 1 + 1;
          }
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Featureid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Featureid);
          }
          if (Target != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Target);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_CatchingEntity other) {
          if (other == null) {
            return;
          }
          if (other.Create != false) {
            Create = other.Create;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Featureid != 0) {
            Featureid = other.Featureid;
          }
          if (other.Target != 0UL) {
            Target = other.Target;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Create = input.ReadBool();
                break;
              }
              case 18: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 24: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 32: {
                Featureid = input.ReadUInt32();
                break;
              }
              case 40: {
                Target = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_CreateGroundItem : pb::IMessage<B2C_CreateGroundItem> {
        private static readonly pb::MessageParser<B2C_CreateGroundItem> _parser = new pb::MessageParser<B2C_CreateGroundItem>(() => pb.ProtobufManager.New<B2C_CreateGroundItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_CreateGroundItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CreateGroundItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemid = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
          Owner = 0;
          Teampick = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CreateGroundItem(B2C_CreateGroundItem other) : this() {
          itemid_ = other.itemid_;
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
          owner_ = other.owner_;
          teampick_ = other.teampick_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CreateGroundItem Clone() {
          return new B2C_CreateGroundItem(this);
        }

        /// <summary>Field number for the "itemid" field.</summary>
        public const int ItemidFieldNumber = 1;
        private uint itemid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemid {
          get { return itemid_; }
          set {
            itemid_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 2;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 3;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "teampick" field.</summary>
        public const int TeampickFieldNumber = 4;
        private bool teampick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Teampick {
          get { return teampick_; }
          set {
            teampick_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_CreateGroundItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_CreateGroundItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemid != other.Itemid) return false;
          if (!object.Equals(Pos, other.Pos)) return false;
          if (Owner != other.Owner) return false;
          if (Teampick != other.Teampick) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemid != 0) hash ^= Itemid.GetHashCode();
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          if (Teampick != false) hash ^= Teampick.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemid);
          }
          if (pos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Pos);
          }
          if (Owner != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Owner);
          }
          if (Teampick != false) {
            output.WriteRawTag(32);
            output.WriteBool(Teampick);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
          }
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          if (Teampick != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_CreateGroundItem other) {
          if (other == null) {
            return;
          }
          if (other.Itemid != 0) {
            Itemid = other.Itemid;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
          if (other.Teampick != false) {
            Teampick = other.Teampick;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemid = input.ReadUInt32();
                break;
              }
              case 18: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 24: {
                Owner = input.ReadUInt64();
                break;
              }
              case 32: {
                Teampick = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SkillCold : pb::IMessage<B2C_SkillCold> {
        private static readonly pb::MessageParser<B2C_SkillCold> _parser = new pb::MessageParser<B2C_SkillCold>(() => pb.ProtobufManager.New<B2C_SkillCold>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SkillCold> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillCold() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < skills_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill>(skills_[i]);
          }
          skills_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillCold(B2C_SkillCold other) : this() {
          skills_ = other.skills_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillCold Clone() {
          return new B2C_SkillCold(this);
        }

        /// <summary>Field number for the "skills" field.</summary>
        public const int SkillsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill> _repeated_skills_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill> skills_ = new pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_SkillCold.Types.OneSkill> Skills {
          get { return skills_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SkillCold);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SkillCold other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!skills_.Equals(other.skills_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= skills_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          skills_.WriteTo(output, _repeated_skills_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += skills_.CalculateSize(_repeated_skills_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SkillCold other) {
          if (other == null) {
            return;
          }
          skills_.Add(other.skills_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                skills_.AddEntriesFrom(input, _repeated_skills_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_SkillCold message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class OneSkill : pb::IMessage<OneSkill> {
            private static readonly pb::MessageParser<OneSkill> _parser = new pb::MessageParser<OneSkill>(() => pb.ProtobufManager.New<OneSkill>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<OneSkill> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_SkillCold.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneSkill() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Skillid = 0;
              Pilenum = 0;
              Del = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneSkill(OneSkill other) : this() {
              skillid_ = other.skillid_;
              pilenum_ = other.pilenum_;
              del_ = other.del_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneSkill Clone() {
              return new OneSkill(this);
            }

            /// <summary>Field number for the "skillid" field.</summary>
            public const int SkillidFieldNumber = 1;
            private uint skillid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Skillid {
              get { return skillid_; }
              set {
                skillid_ = value;
              }
            }

            /// <summary>Field number for the "pilenum" field.</summary>
            public const int PilenumFieldNumber = 2;
            private int pilenum_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Pilenum {
              get { return pilenum_; }
              set {
                pilenum_ = value;
              }
            }

            /// <summary>Field number for the "del" field.</summary>
            public const int DelFieldNumber = 3;
            private bool del_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Del {
              get { return del_; }
              set {
                del_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as OneSkill);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(OneSkill other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Skillid != other.Skillid) return false;
              if (Pilenum != other.Pilenum) return false;
              if (Del != other.Del) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Skillid != 0) hash ^= Skillid.GetHashCode();
              if (Pilenum != 0) hash ^= Pilenum.GetHashCode();
              if (Del != false) hash ^= Del.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Skillid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Skillid);
              }
              if (Pilenum != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Pilenum);
              }
              if (Del != false) {
                output.WriteRawTag(24);
                output.WriteBool(Del);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Skillid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
              }
              if (Pilenum != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pilenum);
              }
              if (Del != false) {
                size += 1 + 1;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(OneSkill other) {
              if (other == null) {
                return;
              }
              if (other.Skillid != 0) {
                Skillid = other.Skillid;
              }
              if (other.Pilenum != 0) {
                Pilenum = other.Pilenum;
              }
              if (other.Del != false) {
                Del = other.Del;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Skillid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Pilenum = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Del = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_Interface : pb::IMessage<B2C_Interface> {
        private static readonly pb::MessageParser<B2C_Interface> _parser = new pb::MessageParser<B2C_Interface>(() => pb.ProtobufManager.New<B2C_Interface>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Interface> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Interface() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Interfaceid = 0;
          Errno = 0;
          switch (InterfaceDataCase) {
            case InterfaceDataOneofCase.Normalshop:
              pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop>(Normalshop);
              Normalshop = null;
              break;
            case InterfaceDataOneofCase.Blackshop:
              pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop>(Blackshop);
              Blackshop = null;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Interface(B2C_Interface other) : this() {
          interfaceid_ = other.interfaceid_;
          errno_ = other.errno_;
          switch (other.InterfaceDataCase) {
            case InterfaceDataOneofCase.Normalshop:
              Normalshop = other.Normalshop.Clone();
              break;
            case InterfaceDataOneofCase.Blackshop:
              Blackshop = other.Blackshop.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Interface Clone() {
          return new B2C_Interface(this);
        }

        /// <summary>Field number for the "interfaceid" field.</summary>
        public const int InterfaceidFieldNumber = 1;
        private uint interfaceid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Interfaceid {
          get { return interfaceid_; }
          set {
            interfaceid_ = value;
          }
        }

        /// <summary>Field number for the "errno" field.</summary>
        public const int ErrnoFieldNumber = 2;
        private int errno_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Errno {
          get { return errno_; }
          set {
            errno_ = value;
          }
        }

        /// <summary>Field number for the "normalshop" field.</summary>
        public const int NormalshopFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop Normalshop {
          get { return interfaceDataCase_ == InterfaceDataOneofCase.Normalshop ? (global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop) interfaceData_ : null; }
          set {
            interfaceData_ = value;
            interfaceDataCase_ = value == null ? InterfaceDataOneofCase.None : InterfaceDataOneofCase.Normalshop;
          }
        }

        /// <summary>Field number for the "blackshop" field.</summary>
        public const int BlackshopFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop Blackshop {
          get { return interfaceDataCase_ == InterfaceDataOneofCase.Blackshop ? (global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop) interfaceData_ : null; }
          set {
            interfaceData_ = value;
            interfaceDataCase_ = value == null ? InterfaceDataOneofCase.None : InterfaceDataOneofCase.Blackshop;
          }
        }

        private object interfaceData_;
        /// <summary>Enum of possible cases for the "InterfaceData" oneof.</summary>
        public enum InterfaceDataOneofCase {
          None = 0,
          Normalshop = 3,
          Blackshop = 4,
        }
        private InterfaceDataOneofCase interfaceDataCase_ = InterfaceDataOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InterfaceDataOneofCase InterfaceDataCase {
          get { return interfaceDataCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearInterfaceData() {
          interfaceDataCase_ = InterfaceDataOneofCase.None;
          interfaceData_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Interface);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Interface other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Interfaceid != other.Interfaceid) return false;
          if (Errno != other.Errno) return false;
          if (!object.Equals(Normalshop, other.Normalshop)) return false;
          if (!object.Equals(Blackshop, other.Blackshop)) return false;
          if (InterfaceDataCase != other.InterfaceDataCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Interfaceid != 0) hash ^= Interfaceid.GetHashCode();
          if (Errno != 0) hash ^= Errno.GetHashCode();
          if (interfaceDataCase_ == InterfaceDataOneofCase.Normalshop) hash ^= Normalshop.GetHashCode();
          if (interfaceDataCase_ == InterfaceDataOneofCase.Blackshop) hash ^= Blackshop.GetHashCode();
          hash ^= (int) interfaceDataCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Interfaceid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Interfaceid);
          }
          if (Errno != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Errno);
          }
          if (interfaceDataCase_ == InterfaceDataOneofCase.Normalshop) {
            output.WriteRawTag(26);
            output.WriteMessage(Normalshop);
          }
          if (interfaceDataCase_ == InterfaceDataOneofCase.Blackshop) {
            output.WriteRawTag(34);
            output.WriteMessage(Blackshop);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Interfaceid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interfaceid);
          }
          if (Errno != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
          }
          if (interfaceDataCase_ == InterfaceDataOneofCase.Normalshop) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normalshop);
          }
          if (interfaceDataCase_ == InterfaceDataOneofCase.Blackshop) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blackshop);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Interface other) {
          if (other == null) {
            return;
          }
          if (other.Interfaceid != 0) {
            Interfaceid = other.Interfaceid;
          }
          if (other.Errno != 0) {
            Errno = other.Errno;
          }
          switch (other.InterfaceDataCase) {
            case InterfaceDataOneofCase.Normalshop:
              Normalshop = other.Normalshop;
              break;
            case InterfaceDataOneofCase.Blackshop:
              Blackshop = other.Blackshop;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Interfaceid = input.ReadUInt32();
                break;
              }
              case 16: {
                Errno = input.ReadInt32();
                break;
              }
              case 26: {
                global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Interface.Types.NormalShop>();
                if (interfaceDataCase_ == InterfaceDataOneofCase.Normalshop) {
                  subBuilder.MergeFrom(Normalshop);
                }
                input.ReadMessage(subBuilder);
                Normalshop = subBuilder;
                break;
              }
              case 34: {
                global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Event.Types.B2C_Interface.Types.BlackShop>();
                if (interfaceDataCase_ == InterfaceDataOneofCase.Blackshop) {
                  subBuilder.MergeFrom(Blackshop);
                }
                input.ReadMessage(subBuilder);
                Blackshop = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_Interface message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class NormalShop : pb::IMessage<NormalShop> {
            private static readonly pb::MessageParser<NormalShop> _parser = new pb::MessageParser<NormalShop>(() => pb.ProtobufManager.New<NormalShop>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<NormalShop> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_Interface.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NormalShop() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              for (int i = 0; i < normalshop_.Count; ++i)
              {
                pb.ProtobufManager.Reclaim<global::Pb.ShopItem>(normalshop_[i]);
              }
              normalshop_.Clear();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NormalShop(NormalShop other) : this() {
              normalshop_ = other.normalshop_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NormalShop Clone() {
              return new NormalShop(this);
            }

            /// <summary>Field number for the "normalshop" field.</summary>
            public const int NormalshopFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Pb.ShopItem> _repeated_normalshop_codec
                = pb::FieldCodec.ForMessage(10, global::Pb.ShopItem.Parser);
            private readonly pbc::RepeatedField<global::Pb.ShopItem> normalshop_ = new pbc::RepeatedField<global::Pb.ShopItem>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Pb.ShopItem> Normalshop {
              get { return normalshop_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as NormalShop);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(NormalShop other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!normalshop_.Equals(other.normalshop_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= normalshop_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              normalshop_.WriteTo(output, _repeated_normalshop_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += normalshop_.CalculateSize(_repeated_normalshop_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(NormalShop other) {
              if (other == null) {
                return;
              }
              normalshop_.Add(other.normalshop_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    normalshop_.AddEntriesFrom(input, _repeated_normalshop_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class BlackShop : pb::IMessage<BlackShop> {
            private static readonly pb::MessageParser<BlackShop> _parser = new pb::MessageParser<BlackShop>(() => pb.ProtobufManager.New<BlackShop>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BlackShop> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_Interface.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BlackShop() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              for (int i = 0; i < blackshop_.Count; ++i)
              {
                pb.ProtobufManager.Reclaim<global::Pb.ShopItem>(blackshop_[i]);
              }
              blackshop_.Clear();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BlackShop(BlackShop other) : this() {
              blackshop_ = other.blackshop_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BlackShop Clone() {
              return new BlackShop(this);
            }

            /// <summary>Field number for the "blackshop" field.</summary>
            public const int BlackshopFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Pb.ShopItem> _repeated_blackshop_codec
                = pb::FieldCodec.ForMessage(18, global::Pb.ShopItem.Parser);
            private readonly pbc::RepeatedField<global::Pb.ShopItem> blackshop_ = new pbc::RepeatedField<global::Pb.ShopItem>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Pb.ShopItem> Blackshop {
              get { return blackshop_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BlackShop);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BlackShop other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!blackshop_.Equals(other.blackshop_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= blackshop_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              blackshop_.WriteTo(output, _repeated_blackshop_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += blackshop_.CalculateSize(_repeated_blackshop_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BlackShop other) {
              if (other == null) {
                return;
              }
              blackshop_.Add(other.blackshop_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 18: {
                    blackshop_.AddEntriesFrom(input, _repeated_blackshop_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_SkillMove : pb::IMessage<B2C_SkillMove> {
        private static readonly pb::MessageParser<B2C_SkillMove> _parser = new pb::MessageParser<B2C_SkillMove>(() => pb.ProtobufManager.New<B2C_SkillMove>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SkillMove> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillMove() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Skillid = 0;
          Stop = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillMove(B2C_SkillMove other) : this() {
          skillid_ = other.skillid_;
          stop_ = other.stop_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SkillMove Clone() {
          return new B2C_SkillMove(this);
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "stop" field.</summary>
        public const int StopFieldNumber = 2;
        private bool stop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Stop {
          get { return stop_; }
          set {
            stop_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SkillMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SkillMove other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Skillid != other.Skillid) return false;
          if (Stop != other.Stop) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Stop != false) hash ^= Stop.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
          if (Stop != false) {
            output.WriteRawTag(16);
            output.WriteBool(Stop);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Stop != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SkillMove other) {
          if (other == null) {
            return;
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Stop != false) {
            Stop = other.Stop;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 16: {
                Stop = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_GambleBox : pb::IMessage<B2C_GambleBox> {
        private static readonly pb::MessageParser<B2C_GambleBox> _parser = new pb::MessageParser<B2C_GambleBox>(() => pb.ProtobufManager.New<B2C_GambleBox>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_GambleBox> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GambleBox() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < items_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem>(items_[i]);
          }
          items_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GambleBox(B2C_GambleBox other) : this() {
          items_ = other.items_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GambleBox Clone() {
          return new B2C_GambleBox(this);
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem> items_ = new pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_Event.Types.B2C_GambleBox.Types.GambleItem> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_GambleBox);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_GambleBox other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!items_.Equals(other.items_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= items_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_GambleBox other) {
          if (other == null) {
            return;
          }
          items_.Add(other.items_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_GambleBox message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class GambleItem : pb::IMessage<GambleItem> {
            private static readonly pb::MessageParser<GambleItem> _parser = new pb::MessageParser<GambleItem>(() => pb.ProtobufManager.New<GambleItem>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<GambleItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_Event.Types.B2C_GambleBox.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GambleItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              pb.ProtobufManager.Reclaim<global::Pb.ItemData>(item_);
              item_ = null;
              Add = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GambleItem(GambleItem other) : this() {
              Item = other.item_ != null ? other.Item.Clone() : null;
              add_ = other.add_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GambleItem Clone() {
              return new GambleItem(this);
            }

            /// <summary>Field number for the "item" field.</summary>
            public const int ItemFieldNumber = 1;
            private global::Pb.ItemData item_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.ItemData Item {
              get { return item_; }
              set {
                item_ = value;
              }
            }

            /// <summary>Field number for the "add" field.</summary>
            public const int AddFieldNumber = 2;
            private bool add_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Add {
              get { return add_; }
              set {
                add_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as GambleItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(GambleItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Item, other.Item)) return false;
              if (Add != other.Add) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (item_ != null) hash ^= Item.GetHashCode();
              if (Add != false) hash ^= Add.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (item_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Item);
              }
              if (Add != false) {
                output.WriteRawTag(16);
                output.WriteBool(Add);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (item_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
              }
              if (Add != false) {
                size += 1 + 1;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(GambleItem other) {
              if (other == null) {
                return;
              }
              if (other.item_ != null) {
                if (item_ == null) {
                  item_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                }
                Item.MergeFrom(other.Item);
              }
              if (other.Add != false) {
                Add = other.Add;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (item_ == null) {
                      item_ = pb.ProtobufManager.New<global::Pb.ItemData>();
                    }
                    input.ReadMessage(item_);
                    break;
                  }
                  case 16: {
                    Add = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_CharacterYell : pb::IMessage<B2C_CharacterYell> {
        private static readonly pb::MessageParser<B2C_CharacterYell> _parser = new pb::MessageParser<B2C_CharacterYell>(() => pb.ProtobufManager.New<B2C_CharacterYell>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_CharacterYell> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterYell() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Targetuid = 0;
          Content = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterYell(B2C_CharacterYell other) : this() {
          targetuid_ = other.targetuid_;
          content_ = other.content_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterYell Clone() {
          return new B2C_CharacterYell(this);
        }

        /// <summary>Field number for the "targetuid" field.</summary>
        public const int TargetuidFieldNumber = 1;
        private ulong targetuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Targetuid {
          get { return targetuid_; }
          set {
            targetuid_ = value;
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 2;
        private uint content_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Content {
          get { return content_; }
          set {
            content_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_CharacterYell);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_CharacterYell other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Targetuid != other.Targetuid) return false;
          if (Content != other.Content) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Targetuid != 0UL) hash ^= Targetuid.GetHashCode();
          if (Content != 0) hash ^= Content.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Targetuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Targetuid);
          }
          if (Content != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Content);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Targetuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetuid);
          }
          if (Content != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Content);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_CharacterYell other) {
          if (other == null) {
            return;
          }
          if (other.Targetuid != 0UL) {
            Targetuid = other.Targetuid;
          }
          if (other.Content != 0) {
            Content = other.Content;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Targetuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Content = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_LevelUpItemRet : pb::IMessage<B2C_LevelUpItemRet> {
        private static readonly pb::MessageParser<B2C_LevelUpItemRet> _parser = new pb::MessageParser<B2C_LevelUpItemRet>(() => pb.ProtobufManager.New<B2C_LevelUpItemRet>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_LevelUpItemRet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_LevelUpItemRet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Itemuid = 0;
          Error = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_LevelUpItemRet(B2C_LevelUpItemRet other) : this() {
          itemuid_ = other.itemuid_;
          error_ = other.error_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_LevelUpItemRet Clone() {
          return new B2C_LevelUpItemRet(this);
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 1;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 2;
        private uint error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Error {
          get { return error_; }
          set {
            error_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_LevelUpItemRet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_LevelUpItemRet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemuid != other.Itemuid) return false;
          if (Error != other.Error) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Error != 0) hash ^= Error.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemuid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Itemuid);
          }
          if (Error != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Error);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Error != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Error);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_LevelUpItemRet other) {
          if (other == null) {
            return;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Error != 0) {
            Error = other.Error;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 16: {
                Error = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PlayerState : pb::IMessage<B2C_PlayerState> {
        private static readonly pb::MessageParser<B2C_PlayerState> _parser = new pb::MessageParser<B2C_PlayerState>(() => pb.ProtobufManager.New<B2C_PlayerState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PlayerState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Event.Descriptor.NestedTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlayerState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Stateid = 0;
          Lifetime = 0;
          Totaltime = 0;
          Del = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlayerState(B2C_PlayerState other) : this() {
          stateid_ = other.stateid_;
          lifetime_ = other.lifetime_;
          totaltime_ = other.totaltime_;
          del_ = other.del_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PlayerState Clone() {
          return new B2C_PlayerState(this);
        }

        /// <summary>Field number for the "stateid" field.</summary>
        public const int StateidFieldNumber = 1;
        private uint stateid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Stateid {
          get { return stateid_; }
          set {
            stateid_ = value;
          }
        }

        /// <summary>Field number for the "lifetime" field.</summary>
        public const int LifetimeFieldNumber = 2;
        private long lifetime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Lifetime {
          get { return lifetime_; }
          set {
            lifetime_ = value;
          }
        }

        /// <summary>Field number for the "totaltime" field.</summary>
        public const int TotaltimeFieldNumber = 3;
        private long totaltime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Totaltime {
          get { return totaltime_; }
          set {
            totaltime_ = value;
          }
        }

        /// <summary>Field number for the "del" field.</summary>
        public const int DelFieldNumber = 4;
        private bool del_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Del {
          get { return del_; }
          set {
            del_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PlayerState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PlayerState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Stateid != other.Stateid) return false;
          if (Lifetime != other.Lifetime) return false;
          if (Totaltime != other.Totaltime) return false;
          if (Del != other.Del) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Stateid != 0) hash ^= Stateid.GetHashCode();
          if (Lifetime != 0L) hash ^= Lifetime.GetHashCode();
          if (Totaltime != 0L) hash ^= Totaltime.GetHashCode();
          if (Del != false) hash ^= Del.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Stateid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Stateid);
          }
          if (Lifetime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Lifetime);
          }
          if (Totaltime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Totaltime);
          }
          if (Del != false) {
            output.WriteRawTag(32);
            output.WriteBool(Del);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Stateid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stateid);
          }
          if (Lifetime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lifetime);
          }
          if (Totaltime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Totaltime);
          }
          if (Del != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PlayerState other) {
          if (other == null) {
            return;
          }
          if (other.Stateid != 0) {
            Stateid = other.Stateid;
          }
          if (other.Lifetime != 0L) {
            Lifetime = other.Lifetime;
          }
          if (other.Totaltime != 0L) {
            Totaltime = other.Totaltime;
          }
          if (other.Del != false) {
            Del = other.Del;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Stateid = input.ReadUInt32();
                break;
              }
              case 16: {
                Lifetime = input.ReadInt64();
                break;
              }
              case 24: {
                Totaltime = input.ReadInt64();
                break;
              }
              case 32: {
                Del = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SkillStateData : pb::IMessage<SkillStateData> {
    private static readonly pb::MessageParser<SkillStateData> _parser = new pb::MessageParser<SkillStateData>(() => pb.ProtobufManager.New<SkillStateData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillStateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillStateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Skillid = 0;
      Skillstate = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillStateData(SkillStateData other) : this() {
      skillid_ = other.skillid_;
      skillstate_ = other.skillstate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillStateData Clone() {
      return new SkillStateData(this);
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skillstate" field.</summary>
    public const int SkillstateFieldNumber = 2;
    private uint skillstate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillstate {
      get { return skillstate_; }
      set {
        skillstate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillStateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillStateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skillid != other.Skillid) return false;
      if (Skillstate != other.Skillstate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skillstate != 0) hash ^= Skillstate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
      if (Skillstate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillstate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skillstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillstate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillStateData other) {
      if (other == null) {
        return;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skillstate != 0) {
        Skillstate = other.Skillstate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 16: {
            Skillstate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemData : pb::IMessage<ItemData> {
    private static readonly pb::MessageParser<ItemData> _parser = new pb::MessageParser<ItemData>(() => pb.ProtobufManager.New<ItemData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      Itemid = 0;
      Num = 0;
      Endurance = 0;
      Skilldamage = 0;
      Distance = 0;
      Oneclipnum = 0;
      Reloadtime = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData(ItemData other) : this() {
      uuid_ = other.uuid_;
      itemid_ = other.itemid_;
      num_ = other.num_;
      endurance_ = other.endurance_;
      skilldamage_ = other.skilldamage_;
      distance_ = other.distance_;
      oneclipnum_ = other.oneclipnum_;
      reloadtime_ = other.reloadtime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData Clone() {
      return new ItemData(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 2;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "endurance" field.</summary>
    public const int EnduranceFieldNumber = 4;
    private int endurance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Endurance {
      get { return endurance_; }
      set {
        endurance_ = value;
      }
    }

    /// <summary>Field number for the "skilldamage" field.</summary>
    public const int SkilldamageFieldNumber = 5;
    private int skilldamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skilldamage {
      get { return skilldamage_; }
      set {
        skilldamage_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 6;
    private int distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "oneclipnum" field.</summary>
    public const int OneclipnumFieldNumber = 7;
    private int oneclipnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oneclipnum {
      get { return oneclipnum_; }
      set {
        oneclipnum_ = value;
      }
    }

    /// <summary>Field number for the "reloadtime" field.</summary>
    public const int ReloadtimeFieldNumber = 8;
    private int reloadtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reloadtime {
      get { return reloadtime_; }
      set {
        reloadtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Itemid != other.Itemid) return false;
      if (Num != other.Num) return false;
      if (Endurance != other.Endurance) return false;
      if (Skilldamage != other.Skilldamage) return false;
      if (Distance != other.Distance) return false;
      if (Oneclipnum != other.Oneclipnum) return false;
      if (Reloadtime != other.Reloadtime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Endurance != 0) hash ^= Endurance.GetHashCode();
      if (Skilldamage != 0) hash ^= Skilldamage.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (Oneclipnum != 0) hash ^= Oneclipnum.GetHashCode();
      if (Reloadtime != 0) hash ^= Reloadtime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Itemid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Itemid);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (Endurance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Endurance);
      }
      if (Skilldamage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Skilldamage);
      }
      if (Distance != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Distance);
      }
      if (Oneclipnum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Oneclipnum);
      }
      if (Reloadtime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Reloadtime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Endurance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Endurance);
      }
      if (Skilldamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skilldamage);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (Oneclipnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oneclipnum);
      }
      if (Reloadtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reloadtime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemData other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Endurance != 0) {
        Endurance = other.Endurance;
      }
      if (other.Skilldamage != 0) {
        Skilldamage = other.Skilldamage;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      if (other.Oneclipnum != 0) {
        Oneclipnum = other.Oneclipnum;
      }
      if (other.Reloadtime != 0) {
        Reloadtime = other.Reloadtime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 32: {
            Endurance = input.ReadInt32();
            break;
          }
          case 40: {
            Skilldamage = input.ReadInt32();
            break;
          }
          case 48: {
            Distance = input.ReadInt32();
            break;
          }
          case 56: {
            Oneclipnum = input.ReadInt32();
            break;
          }
          case 64: {
            Reloadtime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopElemData : pb::IMessage<ShopElemData> {
    private static readonly pb::MessageParser<ShopElemData> _parser = new pb::MessageParser<ShopElemData>(() => pb.ProtobufManager.New<ShopElemData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopElemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopElemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Itemid = 0;
      Num = 0;
      Itemprice = 0;
      Besaled = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopElemData(ShopElemData other) : this() {
      itemid_ = other.itemid_;
      num_ = other.num_;
      itemprice_ = other.itemprice_;
      besaled_ = other.besaled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopElemData Clone() {
      return new ShopElemData(this);
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "itemprice" field.</summary>
    public const int ItempriceFieldNumber = 3;
    private uint itemprice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemprice {
      get { return itemprice_; }
      set {
        itemprice_ = value;
      }
    }

    /// <summary>Field number for the "besaled" field.</summary>
    public const int BesaledFieldNumber = 4;
    private bool besaled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Besaled {
      get { return besaled_; }
      set {
        besaled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopElemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopElemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itemid != other.Itemid) return false;
      if (Num != other.Num) return false;
      if (Itemprice != other.Itemprice) return false;
      if (Besaled != other.Besaled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Itemprice != 0) hash ^= Itemprice.GetHashCode();
      if (Besaled != false) hash ^= Besaled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Itemprice != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Itemprice);
      }
      if (Besaled != false) {
        output.WriteRawTag(32);
        output.WriteBool(Besaled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Itemprice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemprice);
      }
      if (Besaled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopElemData other) {
      if (other == null) {
        return;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Itemprice != 0) {
        Itemprice = other.Itemprice;
      }
      if (other.Besaled != false) {
        Besaled = other.Besaled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Itemprice = input.ReadUInt32();
            break;
          }
          case 32: {
            Besaled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopItem : pb::IMessage<ShopItem> {
    private static readonly pb::MessageParser<ShopItem> _parser = new pb::MessageParser<ShopItem>(() => pb.ProtobufManager.New<ShopItem>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.ItemData>(iteminfo_);
      iteminfo_ = null;
      pb.ProtobufManager.Reclaim<global::Pb.ShopElemData>(shopinfo_);
      shopinfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItem(ShopItem other) : this() {
      Iteminfo = other.iteminfo_ != null ? other.Iteminfo.Clone() : null;
      Shopinfo = other.shopinfo_ != null ? other.Shopinfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItem Clone() {
      return new ShopItem(this);
    }

    /// <summary>Field number for the "iteminfo" field.</summary>
    public const int IteminfoFieldNumber = 1;
    private global::Pb.ItemData iteminfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ItemData Iteminfo {
      get { return iteminfo_; }
      set {
        iteminfo_ = value;
      }
    }

    /// <summary>Field number for the "shopinfo" field.</summary>
    public const int ShopinfoFieldNumber = 2;
    private global::Pb.ShopElemData shopinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ShopElemData Shopinfo {
      get { return shopinfo_; }
      set {
        shopinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Iteminfo, other.Iteminfo)) return false;
      if (!object.Equals(Shopinfo, other.Shopinfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iteminfo_ != null) hash ^= Iteminfo.GetHashCode();
      if (shopinfo_ != null) hash ^= Shopinfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iteminfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Iteminfo);
      }
      if (shopinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Shopinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iteminfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Iteminfo);
      }
      if (shopinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shopinfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopItem other) {
      if (other == null) {
        return;
      }
      if (other.iteminfo_ != null) {
        if (iteminfo_ == null) {
          iteminfo_ = pb.ProtobufManager.New<global::Pb.ItemData>();
        }
        Iteminfo.MergeFrom(other.Iteminfo);
      }
      if (other.shopinfo_ != null) {
        if (shopinfo_ == null) {
          shopinfo_ = pb.ProtobufManager.New<global::Pb.ShopElemData>();
        }
        Shopinfo.MergeFrom(other.Shopinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (iteminfo_ == null) {
              iteminfo_ = pb.ProtobufManager.New<global::Pb.ItemData>();
            }
            input.ReadMessage(iteminfo_);
            break;
          }
          case 18: {
            if (shopinfo_ == null) {
              shopinfo_ = pb.ProtobufManager.New<global::Pb.ShopElemData>();
            }
            input.ReadMessage(shopinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinShopElems : pb::IMessage<BinShopElems> {
    private static readonly pb::MessageParser<BinShopElems> _parser = new pb::MessageParser<BinShopElems>(() => pb.ProtobufManager.New<BinShopElems>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinShopElems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinShopElems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < elems_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.ShopElemData>(elems_[i]);
      }
      elems_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinShopElems(BinShopElems other) : this() {
      elems_ = other.elems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinShopElems Clone() {
      return new BinShopElems(this);
    }

    /// <summary>Field number for the "elems" field.</summary>
    public const int ElemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.ShopElemData> _repeated_elems_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.ShopElemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ShopElemData> elems_ = new pbc::RepeatedField<global::Pb.ShopElemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ShopElemData> Elems {
      get { return elems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinShopElems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinShopElems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elems_.Equals(other.elems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elems_.WriteTo(output, _repeated_elems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elems_.CalculateSize(_repeated_elems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinShopElems other) {
      if (other == null) {
        return;
      }
      elems_.Add(other.elems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            elems_.AddEntriesFrom(input, _repeated_elems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleScoreInfo : pb::IMessage<RoleScoreInfo> {
    private static readonly pb::MessageParser<RoleScoreInfo> _parser = new pb::MessageParser<RoleScoreInfo>(() => pb.ProtobufManager.New<RoleScoreInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleScoreInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleScoreInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Role = 0;
      Score = 0;
      Scoretimestamp = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleScoreInfo(RoleScoreInfo other) : this() {
      role_ = other.role_;
      score_ = other.score_;
      scoretimestamp_ = other.scoretimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleScoreInfo Clone() {
      return new RoleScoreInfo(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private ulong role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "scoretimestamp" field.</summary>
    public const int ScoretimestampFieldNumber = 3;
    private uint scoretimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scoretimestamp {
      get { return scoretimestamp_; }
      set {
        scoretimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleScoreInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleScoreInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Score != other.Score) return false;
      if (Scoretimestamp != other.Scoretimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != 0UL) hash ^= Role.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Scoretimestamp != 0) hash ^= Scoretimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Role);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (Scoretimestamp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Scoretimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Role);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Scoretimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scoretimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleScoreInfo other) {
      if (other == null) {
        return;
      }
      if (other.Role != 0UL) {
        Role = other.Role;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Scoretimestamp != 0) {
        Scoretimestamp = other.Scoretimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Role = input.ReadUInt64();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 24: {
            Scoretimestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_EntityDirty : pb::IMessage<B2C_EntityDirty> {
    private static readonly pb::MessageParser<B2C_EntityDirty> _parser = new pb::MessageParser<B2C_EntityDirty>(() => pb.ProtobufManager.New<B2C_EntityDirty>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_EntityDirty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EntityDirty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      Entitytype = 0;
      for (int i = 0; i < state_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_State>(state_[i]);
      }
      state_.Clear();
      for (int i = 0; i < event_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_Event>(event_[i]);
      }
      event_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EntityDirty(B2C_EntityDirty other) : this() {
      uuid_ = other.uuid_;
      entitytype_ = other.entitytype_;
      state_ = other.state_.Clone();
      event_ = other.event_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EntityDirty Clone() {
      return new B2C_EntityDirty(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "entitytype" field.</summary>
    public const int EntitytypeFieldNumber = 2;
    private global::Pb.EntityType entitytype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.EntityType Entitytype {
      get { return entitytype_; }
      set {
        entitytype_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.B2C_State> _repeated_state_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.B2C_State.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_State> state_ = new pbc::RepeatedField<global::Pb.B2C_State>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_State> State {
      get { return state_; }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pb.B2C_Event> _repeated_event_codec
        = pb::FieldCodec.ForMessage(34, global::Pb.B2C_Event.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_Event> event_ = new pbc::RepeatedField<global::Pb.B2C_Event>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_Event> Event {
      get { return event_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_EntityDirty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_EntityDirty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Entitytype != other.Entitytype) return false;
      if(!state_.Equals(other.state_)) return false;
      if(!event_.Equals(other.event_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Entitytype != 0) hash ^= Entitytype.GetHashCode();
      hash ^= state_.GetHashCode();
      hash ^= event_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Entitytype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Entitytype);
      }
      state_.WriteTo(output, _repeated_state_codec);
      event_.WriteTo(output, _repeated_event_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Entitytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Entitytype);
      }
      size += state_.CalculateSize(_repeated_state_codec);
      size += event_.CalculateSize(_repeated_event_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_EntityDirty other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Entitytype != 0) {
        Entitytype = other.Entitytype;
      }
      state_.Add(other.state_);
      event_.Add(other.event_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            entitytype_ = (global::Pb.EntityType) input.ReadEnum();
            break;
          }
          case 26: {
            state_.AddEntriesFrom(input, _repeated_state_codec);
            break;
          }
          case 34: {
            event_.AddEntriesFrom(input, _repeated_event_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_WorldData : pb::IMessage<B2C_WorldData> {
    private static readonly pb::MessageParser<B2C_WorldData> _parser = new pb::MessageParser<B2C_WorldData>(() => pb.ProtobufManager.New<B2C_WorldData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_WorldData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (StateDataCase) {
        case StateDataOneofCase.Electricfield:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_ElectricField>(Electricfield);
          Electricfield = null;
          break;
        case StateDataOneofCase.Alivenum:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_AliveNum>(Alivenum);
          Alivenum = null;
          break;
        case StateDataOneofCase.Dropboxs:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData>(Dropboxs);
          Dropboxs = null;
          break;
        case StateDataOneofCase.Blastdata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_BlastingData>(Blastdata);
          Blastdata = null;
          break;
        case StateDataOneofCase.Bombitem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_BombItem>(Bombitem);
          Bombitem = null;
          break;
        case StateDataOneofCase.Multigame:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_MultiGame>(Multigame);
          Multigame = null;
          break;
        case StateDataOneofCase.TeamScore:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_TeamScore>(TeamScore);
          TeamScore = null;
          break;
        case StateDataOneofCase.HuntData:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_HuntData>(HuntData);
          HuntData = null;
          break;
        case StateDataOneofCase.OccupyData:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_OccupyData>(OccupyData);
          OccupyData = null;
          break;
        case StateDataOneofCase.SceneTriggerActive:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive>(SceneTriggerActive);
          SceneTriggerActive = null;
          break;
        case StateDataOneofCase.Signaltower:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData>(Signaltower);
          Signaltower = null;
          break;
        case StateDataOneofCase.TelportTower:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_TelportTower>(TelportTower);
          TelportTower = null;
          break;
        case StateDataOneofCase.WorldTime:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_WorldTime>(WorldTime);
          WorldTime = null;
          break;
        case StateDataOneofCase.Monsterrefresh:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos>(Monsterrefresh);
          Monsterrefresh = null;
          break;
        case StateDataOneofCase.Obstacles:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle>(Obstacles);
          Obstacles = null;
          break;
        case StateDataOneofCase.Controldata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_ControlMode>(Controldata);
          Controldata = null;
          break;
        case StateDataOneofCase.Hookdata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_HookData>(Hookdata);
          Hookdata = null;
          break;
        case StateDataOneofCase.Pvpnpcdata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData>(Pvpnpcdata);
          Pvpnpcdata = null;
          break;
        case StateDataOneofCase.Darwinscore:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_DarwinScore>(Darwinscore);
          Darwinscore = null;
          break;
        case StateDataOneofCase.Darwinfirst:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_DarwinFirst>(Darwinfirst);
          Darwinfirst = null;
          break;
        case StateDataOneofCase.Forcedata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_CharacterForce>(Forcedata);
          Forcedata = null;
          break;
        case StateDataOneofCase.Processmode:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_ProcessMode>(Processmode);
          Processmode = null;
          break;
        case StateDataOneofCase.Globalmonster:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_GlobalMonster>(Globalmonster);
          Globalmonster = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldData(B2C_WorldData other) : this() {
      switch (other.StateDataCase) {
        case StateDataOneofCase.Electricfield:
          Electricfield = other.Electricfield.Clone();
          break;
        case StateDataOneofCase.Alivenum:
          Alivenum = other.Alivenum.Clone();
          break;
        case StateDataOneofCase.Dropboxs:
          Dropboxs = other.Dropboxs.Clone();
          break;
        case StateDataOneofCase.Blastdata:
          Blastdata = other.Blastdata.Clone();
          break;
        case StateDataOneofCase.Bombitem:
          Bombitem = other.Bombitem.Clone();
          break;
        case StateDataOneofCase.Multigame:
          Multigame = other.Multigame.Clone();
          break;
        case StateDataOneofCase.TeamScore:
          TeamScore = other.TeamScore.Clone();
          break;
        case StateDataOneofCase.HuntData:
          HuntData = other.HuntData.Clone();
          break;
        case StateDataOneofCase.OccupyData:
          OccupyData = other.OccupyData.Clone();
          break;
        case StateDataOneofCase.SceneTriggerActive:
          SceneTriggerActive = other.SceneTriggerActive.Clone();
          break;
        case StateDataOneofCase.Signaltower:
          Signaltower = other.Signaltower.Clone();
          break;
        case StateDataOneofCase.TelportTower:
          TelportTower = other.TelportTower.Clone();
          break;
        case StateDataOneofCase.WorldTime:
          WorldTime = other.WorldTime.Clone();
          break;
        case StateDataOneofCase.Monsterrefresh:
          Monsterrefresh = other.Monsterrefresh.Clone();
          break;
        case StateDataOneofCase.Obstacles:
          Obstacles = other.Obstacles.Clone();
          break;
        case StateDataOneofCase.Controldata:
          Controldata = other.Controldata.Clone();
          break;
        case StateDataOneofCase.Hookdata:
          Hookdata = other.Hookdata.Clone();
          break;
        case StateDataOneofCase.Pvpnpcdata:
          Pvpnpcdata = other.Pvpnpcdata.Clone();
          break;
        case StateDataOneofCase.Darwinscore:
          Darwinscore = other.Darwinscore.Clone();
          break;
        case StateDataOneofCase.Darwinfirst:
          Darwinfirst = other.Darwinfirst.Clone();
          break;
        case StateDataOneofCase.Forcedata:
          Forcedata = other.Forcedata.Clone();
          break;
        case StateDataOneofCase.Processmode:
          Processmode = other.Processmode.Clone();
          break;
        case StateDataOneofCase.Globalmonster:
          Globalmonster = other.Globalmonster.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldData Clone() {
      return new B2C_WorldData(this);
    }

    /// <summary>Field number for the "electricfield" field.</summary>
    public const int ElectricfieldFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_ElectricField Electricfield {
      get { return stateDataCase_ == StateDataOneofCase.Electricfield ? (global::Pb.B2C_WorldData.Types.B2C_ElectricField) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Electricfield;
      }
    }

    /// <summary>Field number for the "alivenum" field.</summary>
    public const int AlivenumFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_AliveNum Alivenum {
      get { return stateDataCase_ == StateDataOneofCase.Alivenum ? (global::Pb.B2C_WorldData.Types.B2C_AliveNum) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Alivenum;
      }
    }

    /// <summary>Field number for the "dropboxs" field.</summary>
    public const int DropboxsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData Dropboxs {
      get { return stateDataCase_ == StateDataOneofCase.Dropboxs ? (global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Dropboxs;
      }
    }

    /// <summary>Field number for the "blastdata" field.</summary>
    public const int BlastdataFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_BlastingData Blastdata {
      get { return stateDataCase_ == StateDataOneofCase.Blastdata ? (global::Pb.B2C_WorldData.Types.B2C_BlastingData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Blastdata;
      }
    }

    /// <summary>Field number for the "bombitem" field.</summary>
    public const int BombitemFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_BombItem Bombitem {
      get { return stateDataCase_ == StateDataOneofCase.Bombitem ? (global::Pb.B2C_WorldData.Types.B2C_BombItem) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Bombitem;
      }
    }

    /// <summary>Field number for the "multigame" field.</summary>
    public const int MultigameFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_MultiGame Multigame {
      get { return stateDataCase_ == StateDataOneofCase.Multigame ? (global::Pb.B2C_WorldData.Types.B2C_MultiGame) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Multigame;
      }
    }

    /// <summary>Field number for the "teamScore" field.</summary>
    public const int TeamScoreFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_TeamScore TeamScore {
      get { return stateDataCase_ == StateDataOneofCase.TeamScore ? (global::Pb.B2C_WorldData.Types.B2C_TeamScore) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.TeamScore;
      }
    }

    /// <summary>Field number for the "huntData" field.</summary>
    public const int HuntDataFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_HuntData HuntData {
      get { return stateDataCase_ == StateDataOneofCase.HuntData ? (global::Pb.B2C_WorldData.Types.B2C_HuntData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.HuntData;
      }
    }

    /// <summary>Field number for the "occupyData" field.</summary>
    public const int OccupyDataFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_OccupyData OccupyData {
      get { return stateDataCase_ == StateDataOneofCase.OccupyData ? (global::Pb.B2C_WorldData.Types.B2C_OccupyData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.OccupyData;
      }
    }

    /// <summary>Field number for the "sceneTriggerActive" field.</summary>
    public const int SceneTriggerActiveFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive SceneTriggerActive {
      get { return stateDataCase_ == StateDataOneofCase.SceneTriggerActive ? (global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.SceneTriggerActive;
      }
    }

    /// <summary>Field number for the "signaltower" field.</summary>
    public const int SignaltowerFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_SignalTowerData Signaltower {
      get { return stateDataCase_ == StateDataOneofCase.Signaltower ? (global::Pb.B2C_WorldData.Types.B2C_SignalTowerData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Signaltower;
      }
    }

    /// <summary>Field number for the "telportTower" field.</summary>
    public const int TelportTowerFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_TelportTower TelportTower {
      get { return stateDataCase_ == StateDataOneofCase.TelportTower ? (global::Pb.B2C_WorldData.Types.B2C_TelportTower) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.TelportTower;
      }
    }

    /// <summary>Field number for the "worldTime" field.</summary>
    public const int WorldTimeFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_WorldTime WorldTime {
      get { return stateDataCase_ == StateDataOneofCase.WorldTime ? (global::Pb.B2C_WorldData.Types.B2C_WorldTime) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.WorldTime;
      }
    }

    /// <summary>Field number for the "monsterrefresh" field.</summary>
    public const int MonsterrefreshFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos Monsterrefresh {
      get { return stateDataCase_ == StateDataOneofCase.Monsterrefresh ? (global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Monsterrefresh;
      }
    }

    /// <summary>Field number for the "obstacles" field.</summary>
    public const int ObstaclesFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_MoveObstacle Obstacles {
      get { return stateDataCase_ == StateDataOneofCase.Obstacles ? (global::Pb.B2C_WorldData.Types.B2C_MoveObstacle) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Obstacles;
      }
    }

    /// <summary>Field number for the "controldata" field.</summary>
    public const int ControldataFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_ControlMode Controldata {
      get { return stateDataCase_ == StateDataOneofCase.Controldata ? (global::Pb.B2C_WorldData.Types.B2C_ControlMode) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Controldata;
      }
    }

    /// <summary>Field number for the "hookdata" field.</summary>
    public const int HookdataFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_HookData Hookdata {
      get { return stateDataCase_ == StateDataOneofCase.Hookdata ? (global::Pb.B2C_WorldData.Types.B2C_HookData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Hookdata;
      }
    }

    /// <summary>Field number for the "pvpnpcdata" field.</summary>
    public const int PvpnpcdataFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_PvPNpcData Pvpnpcdata {
      get { return stateDataCase_ == StateDataOneofCase.Pvpnpcdata ? (global::Pb.B2C_WorldData.Types.B2C_PvPNpcData) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Pvpnpcdata;
      }
    }

    /// <summary>Field number for the "darwinscore" field.</summary>
    public const int DarwinscoreFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_DarwinScore Darwinscore {
      get { return stateDataCase_ == StateDataOneofCase.Darwinscore ? (global::Pb.B2C_WorldData.Types.B2C_DarwinScore) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Darwinscore;
      }
    }

    /// <summary>Field number for the "darwinfirst" field.</summary>
    public const int DarwinfirstFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_DarwinFirst Darwinfirst {
      get { return stateDataCase_ == StateDataOneofCase.Darwinfirst ? (global::Pb.B2C_WorldData.Types.B2C_DarwinFirst) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Darwinfirst;
      }
    }

    /// <summary>Field number for the "forcedata" field.</summary>
    public const int ForcedataFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_CharacterForce Forcedata {
      get { return stateDataCase_ == StateDataOneofCase.Forcedata ? (global::Pb.B2C_WorldData.Types.B2C_CharacterForce) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Forcedata;
      }
    }

    /// <summary>Field number for the "processmode" field.</summary>
    public const int ProcessmodeFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_ProcessMode Processmode {
      get { return stateDataCase_ == StateDataOneofCase.Processmode ? (global::Pb.B2C_WorldData.Types.B2C_ProcessMode) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Processmode;
      }
    }

    /// <summary>Field number for the "globalmonster" field.</summary>
    public const int GlobalmonsterFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldData.Types.B2C_GlobalMonster Globalmonster {
      get { return stateDataCase_ == StateDataOneofCase.Globalmonster ? (global::Pb.B2C_WorldData.Types.B2C_GlobalMonster) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Globalmonster;
      }
    }

    private object stateData_;
    /// <summary>Enum of possible cases for the "StateData" oneof.</summary>
    public enum StateDataOneofCase {
      None = 0,
      Electricfield = 1,
      Alivenum = 2,
      Dropboxs = 3,
      Blastdata = 4,
      Bombitem = 5,
      Multigame = 6,
      TeamScore = 7,
      HuntData = 8,
      OccupyData = 9,
      SceneTriggerActive = 10,
      Signaltower = 11,
      TelportTower = 12,
      WorldTime = 13,
      Monsterrefresh = 14,
      Obstacles = 15,
      Controldata = 16,
      Hookdata = 17,
      Pvpnpcdata = 18,
      Darwinscore = 19,
      Darwinfirst = 20,
      Forcedata = 21,
      Processmode = 22,
      Globalmonster = 23,
    }
    private StateDataOneofCase stateDataCase_ = StateDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateDataOneofCase StateDataCase {
      get { return stateDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateData() {
      stateDataCase_ = StateDataOneofCase.None;
      stateData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_WorldData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_WorldData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Electricfield, other.Electricfield)) return false;
      if (!object.Equals(Alivenum, other.Alivenum)) return false;
      if (!object.Equals(Dropboxs, other.Dropboxs)) return false;
      if (!object.Equals(Blastdata, other.Blastdata)) return false;
      if (!object.Equals(Bombitem, other.Bombitem)) return false;
      if (!object.Equals(Multigame, other.Multigame)) return false;
      if (!object.Equals(TeamScore, other.TeamScore)) return false;
      if (!object.Equals(HuntData, other.HuntData)) return false;
      if (!object.Equals(OccupyData, other.OccupyData)) return false;
      if (!object.Equals(SceneTriggerActive, other.SceneTriggerActive)) return false;
      if (!object.Equals(Signaltower, other.Signaltower)) return false;
      if (!object.Equals(TelportTower, other.TelportTower)) return false;
      if (!object.Equals(WorldTime, other.WorldTime)) return false;
      if (!object.Equals(Monsterrefresh, other.Monsterrefresh)) return false;
      if (!object.Equals(Obstacles, other.Obstacles)) return false;
      if (!object.Equals(Controldata, other.Controldata)) return false;
      if (!object.Equals(Hookdata, other.Hookdata)) return false;
      if (!object.Equals(Pvpnpcdata, other.Pvpnpcdata)) return false;
      if (!object.Equals(Darwinscore, other.Darwinscore)) return false;
      if (!object.Equals(Darwinfirst, other.Darwinfirst)) return false;
      if (!object.Equals(Forcedata, other.Forcedata)) return false;
      if (!object.Equals(Processmode, other.Processmode)) return false;
      if (!object.Equals(Globalmonster, other.Globalmonster)) return false;
      if (StateDataCase != other.StateDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stateDataCase_ == StateDataOneofCase.Electricfield) hash ^= Electricfield.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Alivenum) hash ^= Alivenum.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Dropboxs) hash ^= Dropboxs.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Blastdata) hash ^= Blastdata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Bombitem) hash ^= Bombitem.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Multigame) hash ^= Multigame.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.TeamScore) hash ^= TeamScore.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.HuntData) hash ^= HuntData.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.OccupyData) hash ^= OccupyData.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.SceneTriggerActive) hash ^= SceneTriggerActive.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Signaltower) hash ^= Signaltower.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.TelportTower) hash ^= TelportTower.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.WorldTime) hash ^= WorldTime.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Monsterrefresh) hash ^= Monsterrefresh.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Obstacles) hash ^= Obstacles.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Controldata) hash ^= Controldata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Hookdata) hash ^= Hookdata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Pvpnpcdata) hash ^= Pvpnpcdata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Darwinscore) hash ^= Darwinscore.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Darwinfirst) hash ^= Darwinfirst.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Forcedata) hash ^= Forcedata.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Processmode) hash ^= Processmode.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Globalmonster) hash ^= Globalmonster.GetHashCode();
      hash ^= (int) stateDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stateDataCase_ == StateDataOneofCase.Electricfield) {
        output.WriteRawTag(10);
        output.WriteMessage(Electricfield);
      }
      if (stateDataCase_ == StateDataOneofCase.Alivenum) {
        output.WriteRawTag(18);
        output.WriteMessage(Alivenum);
      }
      if (stateDataCase_ == StateDataOneofCase.Dropboxs) {
        output.WriteRawTag(26);
        output.WriteMessage(Dropboxs);
      }
      if (stateDataCase_ == StateDataOneofCase.Blastdata) {
        output.WriteRawTag(34);
        output.WriteMessage(Blastdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Bombitem) {
        output.WriteRawTag(42);
        output.WriteMessage(Bombitem);
      }
      if (stateDataCase_ == StateDataOneofCase.Multigame) {
        output.WriteRawTag(50);
        output.WriteMessage(Multigame);
      }
      if (stateDataCase_ == StateDataOneofCase.TeamScore) {
        output.WriteRawTag(58);
        output.WriteMessage(TeamScore);
      }
      if (stateDataCase_ == StateDataOneofCase.HuntData) {
        output.WriteRawTag(66);
        output.WriteMessage(HuntData);
      }
      if (stateDataCase_ == StateDataOneofCase.OccupyData) {
        output.WriteRawTag(74);
        output.WriteMessage(OccupyData);
      }
      if (stateDataCase_ == StateDataOneofCase.SceneTriggerActive) {
        output.WriteRawTag(82);
        output.WriteMessage(SceneTriggerActive);
      }
      if (stateDataCase_ == StateDataOneofCase.Signaltower) {
        output.WriteRawTag(90);
        output.WriteMessage(Signaltower);
      }
      if (stateDataCase_ == StateDataOneofCase.TelportTower) {
        output.WriteRawTag(98);
        output.WriteMessage(TelportTower);
      }
      if (stateDataCase_ == StateDataOneofCase.WorldTime) {
        output.WriteRawTag(106);
        output.WriteMessage(WorldTime);
      }
      if (stateDataCase_ == StateDataOneofCase.Monsterrefresh) {
        output.WriteRawTag(114);
        output.WriteMessage(Monsterrefresh);
      }
      if (stateDataCase_ == StateDataOneofCase.Obstacles) {
        output.WriteRawTag(122);
        output.WriteMessage(Obstacles);
      }
      if (stateDataCase_ == StateDataOneofCase.Controldata) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Controldata);
      }
      if (stateDataCase_ == StateDataOneofCase.Hookdata) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Hookdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Pvpnpcdata) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Pvpnpcdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Darwinscore) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Darwinscore);
      }
      if (stateDataCase_ == StateDataOneofCase.Darwinfirst) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Darwinfirst);
      }
      if (stateDataCase_ == StateDataOneofCase.Forcedata) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Forcedata);
      }
      if (stateDataCase_ == StateDataOneofCase.Processmode) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Processmode);
      }
      if (stateDataCase_ == StateDataOneofCase.Globalmonster) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Globalmonster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stateDataCase_ == StateDataOneofCase.Electricfield) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Electricfield);
      }
      if (stateDataCase_ == StateDataOneofCase.Alivenum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alivenum);
      }
      if (stateDataCase_ == StateDataOneofCase.Dropboxs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dropboxs);
      }
      if (stateDataCase_ == StateDataOneofCase.Blastdata) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blastdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Bombitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bombitem);
      }
      if (stateDataCase_ == StateDataOneofCase.Multigame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Multigame);
      }
      if (stateDataCase_ == StateDataOneofCase.TeamScore) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamScore);
      }
      if (stateDataCase_ == StateDataOneofCase.HuntData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HuntData);
      }
      if (stateDataCase_ == StateDataOneofCase.OccupyData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OccupyData);
      }
      if (stateDataCase_ == StateDataOneofCase.SceneTriggerActive) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneTriggerActive);
      }
      if (stateDataCase_ == StateDataOneofCase.Signaltower) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signaltower);
      }
      if (stateDataCase_ == StateDataOneofCase.TelportTower) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TelportTower);
      }
      if (stateDataCase_ == StateDataOneofCase.WorldTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldTime);
      }
      if (stateDataCase_ == StateDataOneofCase.Monsterrefresh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monsterrefresh);
      }
      if (stateDataCase_ == StateDataOneofCase.Obstacles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Obstacles);
      }
      if (stateDataCase_ == StateDataOneofCase.Controldata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Controldata);
      }
      if (stateDataCase_ == StateDataOneofCase.Hookdata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hookdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Pvpnpcdata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pvpnpcdata);
      }
      if (stateDataCase_ == StateDataOneofCase.Darwinscore) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Darwinscore);
      }
      if (stateDataCase_ == StateDataOneofCase.Darwinfirst) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Darwinfirst);
      }
      if (stateDataCase_ == StateDataOneofCase.Forcedata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Forcedata);
      }
      if (stateDataCase_ == StateDataOneofCase.Processmode) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Processmode);
      }
      if (stateDataCase_ == StateDataOneofCase.Globalmonster) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Globalmonster);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_WorldData other) {
      if (other == null) {
        return;
      }
      switch (other.StateDataCase) {
        case StateDataOneofCase.Electricfield:
          Electricfield = other.Electricfield;
          break;
        case StateDataOneofCase.Alivenum:
          Alivenum = other.Alivenum;
          break;
        case StateDataOneofCase.Dropboxs:
          Dropboxs = other.Dropboxs;
          break;
        case StateDataOneofCase.Blastdata:
          Blastdata = other.Blastdata;
          break;
        case StateDataOneofCase.Bombitem:
          Bombitem = other.Bombitem;
          break;
        case StateDataOneofCase.Multigame:
          Multigame = other.Multigame;
          break;
        case StateDataOneofCase.TeamScore:
          TeamScore = other.TeamScore;
          break;
        case StateDataOneofCase.HuntData:
          HuntData = other.HuntData;
          break;
        case StateDataOneofCase.OccupyData:
          OccupyData = other.OccupyData;
          break;
        case StateDataOneofCase.SceneTriggerActive:
          SceneTriggerActive = other.SceneTriggerActive;
          break;
        case StateDataOneofCase.Signaltower:
          Signaltower = other.Signaltower;
          break;
        case StateDataOneofCase.TelportTower:
          TelportTower = other.TelportTower;
          break;
        case StateDataOneofCase.WorldTime:
          WorldTime = other.WorldTime;
          break;
        case StateDataOneofCase.Monsterrefresh:
          Monsterrefresh = other.Monsterrefresh;
          break;
        case StateDataOneofCase.Obstacles:
          Obstacles = other.Obstacles;
          break;
        case StateDataOneofCase.Controldata:
          Controldata = other.Controldata;
          break;
        case StateDataOneofCase.Hookdata:
          Hookdata = other.Hookdata;
          break;
        case StateDataOneofCase.Pvpnpcdata:
          Pvpnpcdata = other.Pvpnpcdata;
          break;
        case StateDataOneofCase.Darwinscore:
          Darwinscore = other.Darwinscore;
          break;
        case StateDataOneofCase.Darwinfirst:
          Darwinfirst = other.Darwinfirst;
          break;
        case StateDataOneofCase.Forcedata:
          Forcedata = other.Forcedata;
          break;
        case StateDataOneofCase.Processmode:
          Processmode = other.Processmode;
          break;
        case StateDataOneofCase.Globalmonster:
          Globalmonster = other.Globalmonster;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.B2C_WorldData.Types.B2C_ElectricField subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_ElectricField>();
            if (stateDataCase_ == StateDataOneofCase.Electricfield) {
              subBuilder.MergeFrom(Electricfield);
            }
            input.ReadMessage(subBuilder);
            Electricfield = subBuilder;
            break;
          }
          case 18: {
            global::Pb.B2C_WorldData.Types.B2C_AliveNum subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_AliveNum>();
            if (stateDataCase_ == StateDataOneofCase.Alivenum) {
              subBuilder.MergeFrom(Alivenum);
            }
            input.ReadMessage(subBuilder);
            Alivenum = subBuilder;
            break;
          }
          case 26: {
            global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData>();
            if (stateDataCase_ == StateDataOneofCase.Dropboxs) {
              subBuilder.MergeFrom(Dropboxs);
            }
            input.ReadMessage(subBuilder);
            Dropboxs = subBuilder;
            break;
          }
          case 34: {
            global::Pb.B2C_WorldData.Types.B2C_BlastingData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_BlastingData>();
            if (stateDataCase_ == StateDataOneofCase.Blastdata) {
              subBuilder.MergeFrom(Blastdata);
            }
            input.ReadMessage(subBuilder);
            Blastdata = subBuilder;
            break;
          }
          case 42: {
            global::Pb.B2C_WorldData.Types.B2C_BombItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_BombItem>();
            if (stateDataCase_ == StateDataOneofCase.Bombitem) {
              subBuilder.MergeFrom(Bombitem);
            }
            input.ReadMessage(subBuilder);
            Bombitem = subBuilder;
            break;
          }
          case 50: {
            global::Pb.B2C_WorldData.Types.B2C_MultiGame subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_MultiGame>();
            if (stateDataCase_ == StateDataOneofCase.Multigame) {
              subBuilder.MergeFrom(Multigame);
            }
            input.ReadMessage(subBuilder);
            Multigame = subBuilder;
            break;
          }
          case 58: {
            global::Pb.B2C_WorldData.Types.B2C_TeamScore subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_TeamScore>();
            if (stateDataCase_ == StateDataOneofCase.TeamScore) {
              subBuilder.MergeFrom(TeamScore);
            }
            input.ReadMessage(subBuilder);
            TeamScore = subBuilder;
            break;
          }
          case 66: {
            global::Pb.B2C_WorldData.Types.B2C_HuntData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_HuntData>();
            if (stateDataCase_ == StateDataOneofCase.HuntData) {
              subBuilder.MergeFrom(HuntData);
            }
            input.ReadMessage(subBuilder);
            HuntData = subBuilder;
            break;
          }
          case 74: {
            global::Pb.B2C_WorldData.Types.B2C_OccupyData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_OccupyData>();
            if (stateDataCase_ == StateDataOneofCase.OccupyData) {
              subBuilder.MergeFrom(OccupyData);
            }
            input.ReadMessage(subBuilder);
            OccupyData = subBuilder;
            break;
          }
          case 82: {
            global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive>();
            if (stateDataCase_ == StateDataOneofCase.SceneTriggerActive) {
              subBuilder.MergeFrom(SceneTriggerActive);
            }
            input.ReadMessage(subBuilder);
            SceneTriggerActive = subBuilder;
            break;
          }
          case 90: {
            global::Pb.B2C_WorldData.Types.B2C_SignalTowerData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData>();
            if (stateDataCase_ == StateDataOneofCase.Signaltower) {
              subBuilder.MergeFrom(Signaltower);
            }
            input.ReadMessage(subBuilder);
            Signaltower = subBuilder;
            break;
          }
          case 98: {
            global::Pb.B2C_WorldData.Types.B2C_TelportTower subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_TelportTower>();
            if (stateDataCase_ == StateDataOneofCase.TelportTower) {
              subBuilder.MergeFrom(TelportTower);
            }
            input.ReadMessage(subBuilder);
            TelportTower = subBuilder;
            break;
          }
          case 106: {
            global::Pb.B2C_WorldData.Types.B2C_WorldTime subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_WorldTime>();
            if (stateDataCase_ == StateDataOneofCase.WorldTime) {
              subBuilder.MergeFrom(WorldTime);
            }
            input.ReadMessage(subBuilder);
            WorldTime = subBuilder;
            break;
          }
          case 114: {
            global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos>();
            if (stateDataCase_ == StateDataOneofCase.Monsterrefresh) {
              subBuilder.MergeFrom(Monsterrefresh);
            }
            input.ReadMessage(subBuilder);
            Monsterrefresh = subBuilder;
            break;
          }
          case 122: {
            global::Pb.B2C_WorldData.Types.B2C_MoveObstacle subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle>();
            if (stateDataCase_ == StateDataOneofCase.Obstacles) {
              subBuilder.MergeFrom(Obstacles);
            }
            input.ReadMessage(subBuilder);
            Obstacles = subBuilder;
            break;
          }
          case 130: {
            global::Pb.B2C_WorldData.Types.B2C_ControlMode subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_ControlMode>();
            if (stateDataCase_ == StateDataOneofCase.Controldata) {
              subBuilder.MergeFrom(Controldata);
            }
            input.ReadMessage(subBuilder);
            Controldata = subBuilder;
            break;
          }
          case 138: {
            global::Pb.B2C_WorldData.Types.B2C_HookData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_HookData>();
            if (stateDataCase_ == StateDataOneofCase.Hookdata) {
              subBuilder.MergeFrom(Hookdata);
            }
            input.ReadMessage(subBuilder);
            Hookdata = subBuilder;
            break;
          }
          case 146: {
            global::Pb.B2C_WorldData.Types.B2C_PvPNpcData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData>();
            if (stateDataCase_ == StateDataOneofCase.Pvpnpcdata) {
              subBuilder.MergeFrom(Pvpnpcdata);
            }
            input.ReadMessage(subBuilder);
            Pvpnpcdata = subBuilder;
            break;
          }
          case 154: {
            global::Pb.B2C_WorldData.Types.B2C_DarwinScore subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_DarwinScore>();
            if (stateDataCase_ == StateDataOneofCase.Darwinscore) {
              subBuilder.MergeFrom(Darwinscore);
            }
            input.ReadMessage(subBuilder);
            Darwinscore = subBuilder;
            break;
          }
          case 162: {
            global::Pb.B2C_WorldData.Types.B2C_DarwinFirst subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_DarwinFirst>();
            if (stateDataCase_ == StateDataOneofCase.Darwinfirst) {
              subBuilder.MergeFrom(Darwinfirst);
            }
            input.ReadMessage(subBuilder);
            Darwinfirst = subBuilder;
            break;
          }
          case 170: {
            global::Pb.B2C_WorldData.Types.B2C_CharacterForce subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_CharacterForce>();
            if (stateDataCase_ == StateDataOneofCase.Forcedata) {
              subBuilder.MergeFrom(Forcedata);
            }
            input.ReadMessage(subBuilder);
            Forcedata = subBuilder;
            break;
          }
          case 178: {
            global::Pb.B2C_WorldData.Types.B2C_ProcessMode subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_ProcessMode>();
            if (stateDataCase_ == StateDataOneofCase.Processmode) {
              subBuilder.MergeFrom(Processmode);
            }
            input.ReadMessage(subBuilder);
            Processmode = subBuilder;
            break;
          }
          case 186: {
            global::Pb.B2C_WorldData.Types.B2C_GlobalMonster subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_GlobalMonster>();
            if (stateDataCase_ == StateDataOneofCase.Globalmonster) {
              subBuilder.MergeFrom(Globalmonster);
            }
            input.ReadMessage(subBuilder);
            Globalmonster = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_WorldData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class B2C_ElectricField : pb::IMessage<B2C_ElectricField> {
        private static readonly pb::MessageParser<B2C_ElectricField> _parser = new pb::MessageParser<B2C_ElectricField>(() => pb.ProtobufManager.New<B2C_ElectricField>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ElectricField> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ElectricField() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Startx = 0;
          Starty = 0;
          Endx = 0;
          Endy = 0;
          Startrange = 0;
          Endrange = 0;
          Currange = 0;
          Totaltime = 0;
          State = 0;
          Delaytime = 0;
          Remaintime = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ElectricField(B2C_ElectricField other) : this() {
          startx_ = other.startx_;
          starty_ = other.starty_;
          endx_ = other.endx_;
          endy_ = other.endy_;
          startrange_ = other.startrange_;
          endrange_ = other.endrange_;
          currange_ = other.currange_;
          totaltime_ = other.totaltime_;
          state_ = other.state_;
          delaytime_ = other.delaytime_;
          remaintime_ = other.remaintime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ElectricField Clone() {
          return new B2C_ElectricField(this);
        }

        /// <summary>Field number for the "startx" field.</summary>
        public const int StartxFieldNumber = 1;
        private float startx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Startx {
          get { return startx_; }
          set {
            startx_ = value;
          }
        }

        /// <summary>Field number for the "starty" field.</summary>
        public const int StartyFieldNumber = 2;
        private float starty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Starty {
          get { return starty_; }
          set {
            starty_ = value;
          }
        }

        /// <summary>Field number for the "endx" field.</summary>
        public const int EndxFieldNumber = 3;
        private float endx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Endx {
          get { return endx_; }
          set {
            endx_ = value;
          }
        }

        /// <summary>Field number for the "endy" field.</summary>
        public const int EndyFieldNumber = 4;
        private float endy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Endy {
          get { return endy_; }
          set {
            endy_ = value;
          }
        }

        /// <summary>Field number for the "startrange" field.</summary>
        public const int StartrangeFieldNumber = 5;
        private uint startrange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Startrange {
          get { return startrange_; }
          set {
            startrange_ = value;
          }
        }

        /// <summary>Field number for the "endrange" field.</summary>
        public const int EndrangeFieldNumber = 6;
        private uint endrange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Endrange {
          get { return endrange_; }
          set {
            endrange_ = value;
          }
        }

        /// <summary>Field number for the "currange" field.</summary>
        public const int CurrangeFieldNumber = 7;
        private float currange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Currange {
          get { return currange_; }
          set {
            currange_ = value;
          }
        }

        /// <summary>Field number for the "totaltime" field.</summary>
        public const int TotaltimeFieldNumber = 8;
        private uint totaltime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Totaltime {
          get { return totaltime_; }
          set {
            totaltime_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 9;
        private global::Pb.FieldState state_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.FieldState State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "delaytime" field.</summary>
        public const int DelaytimeFieldNumber = 10;
        private uint delaytime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Delaytime {
          get { return delaytime_; }
          set {
            delaytime_ = value;
          }
        }

        /// <summary>Field number for the "remaintime" field.</summary>
        public const int RemaintimeFieldNumber = 11;
        private uint remaintime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Remaintime {
          get { return remaintime_; }
          set {
            remaintime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ElectricField);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ElectricField other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Startx != other.Startx) return false;
          if (Starty != other.Starty) return false;
          if (Endx != other.Endx) return false;
          if (Endy != other.Endy) return false;
          if (Startrange != other.Startrange) return false;
          if (Endrange != other.Endrange) return false;
          if (Currange != other.Currange) return false;
          if (Totaltime != other.Totaltime) return false;
          if (State != other.State) return false;
          if (Delaytime != other.Delaytime) return false;
          if (Remaintime != other.Remaintime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Startx != 0F) hash ^= Startx.GetHashCode();
          if (Starty != 0F) hash ^= Starty.GetHashCode();
          if (Endx != 0F) hash ^= Endx.GetHashCode();
          if (Endy != 0F) hash ^= Endy.GetHashCode();
          if (Startrange != 0) hash ^= Startrange.GetHashCode();
          if (Endrange != 0) hash ^= Endrange.GetHashCode();
          if (Currange != 0F) hash ^= Currange.GetHashCode();
          if (Totaltime != 0) hash ^= Totaltime.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          if (Delaytime != 0) hash ^= Delaytime.GetHashCode();
          if (Remaintime != 0) hash ^= Remaintime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Startx != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Startx);
          }
          if (Starty != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Starty);
          }
          if (Endx != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Endx);
          }
          if (Endy != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Endy);
          }
          if (Startrange != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Startrange);
          }
          if (Endrange != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Endrange);
          }
          if (Currange != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(Currange);
          }
          if (Totaltime != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(Totaltime);
          }
          if (State != 0) {
            output.WriteRawTag(72);
            output.WriteEnum((int) State);
          }
          if (Delaytime != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Delaytime);
          }
          if (Remaintime != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(Remaintime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Startx != 0F) {
            size += 1 + 4;
          }
          if (Starty != 0F) {
            size += 1 + 4;
          }
          if (Endx != 0F) {
            size += 1 + 4;
          }
          if (Endy != 0F) {
            size += 1 + 4;
          }
          if (Startrange != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Startrange);
          }
          if (Endrange != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endrange);
          }
          if (Currange != 0F) {
            size += 1 + 4;
          }
          if (Totaltime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Totaltime);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          if (Delaytime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delaytime);
          }
          if (Remaintime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Remaintime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ElectricField other) {
          if (other == null) {
            return;
          }
          if (other.Startx != 0F) {
            Startx = other.Startx;
          }
          if (other.Starty != 0F) {
            Starty = other.Starty;
          }
          if (other.Endx != 0F) {
            Endx = other.Endx;
          }
          if (other.Endy != 0F) {
            Endy = other.Endy;
          }
          if (other.Startrange != 0) {
            Startrange = other.Startrange;
          }
          if (other.Endrange != 0) {
            Endrange = other.Endrange;
          }
          if (other.Currange != 0F) {
            Currange = other.Currange;
          }
          if (other.Totaltime != 0) {
            Totaltime = other.Totaltime;
          }
          if (other.State != 0) {
            State = other.State;
          }
          if (other.Delaytime != 0) {
            Delaytime = other.Delaytime;
          }
          if (other.Remaintime != 0) {
            Remaintime = other.Remaintime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                Startx = input.ReadFloat();
                break;
              }
              case 21: {
                Starty = input.ReadFloat();
                break;
              }
              case 29: {
                Endx = input.ReadFloat();
                break;
              }
              case 37: {
                Endy = input.ReadFloat();
                break;
              }
              case 40: {
                Startrange = input.ReadUInt32();
                break;
              }
              case 48: {
                Endrange = input.ReadUInt32();
                break;
              }
              case 61: {
                Currange = input.ReadFloat();
                break;
              }
              case 64: {
                Totaltime = input.ReadUInt32();
                break;
              }
              case 72: {
                state_ = (global::Pb.FieldState) input.ReadEnum();
                break;
              }
              case 80: {
                Delaytime = input.ReadUInt32();
                break;
              }
              case 88: {
                Remaintime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_AliveNum : pb::IMessage<B2C_AliveNum> {
        private static readonly pb::MessageParser<B2C_AliveNum> _parser = new pb::MessageParser<B2C_AliveNum>(() => pb.ProtobufManager.New<B2C_AliveNum>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_AliveNum> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AliveNum() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Alive = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AliveNum(B2C_AliveNum other) : this() {
          alive_ = other.alive_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AliveNum Clone() {
          return new B2C_AliveNum(this);
        }

        /// <summary>Field number for the "alive" field.</summary>
        public const int AliveFieldNumber = 1;
        private int alive_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Alive {
          get { return alive_; }
          set {
            alive_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_AliveNum);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_AliveNum other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Alive != other.Alive) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Alive != 0) hash ^= Alive.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Alive != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Alive);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Alive != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alive);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_AliveNum other) {
          if (other == null) {
            return;
          }
          if (other.Alive != 0) {
            Alive = other.Alive;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Alive = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_AirDropBoxData : pb::IMessage<B2C_AirDropBoxData> {
        private static readonly pb::MessageParser<B2C_AirDropBoxData> _parser = new pb::MessageParser<B2C_AirDropBoxData>(() => pb.ProtobufManager.New<B2C_AirDropBoxData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_AirDropBoxData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AirDropBoxData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < dropBoxs_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox>(dropBoxs_[i]);
          }
          dropBoxs_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AirDropBoxData(B2C_AirDropBoxData other) : this() {
          dropBoxs_ = other.dropBoxs_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AirDropBoxData Clone() {
          return new B2C_AirDropBoxData(this);
        }

        /// <summary>Field number for the "dropBoxs" field.</summary>
        public const int DropBoxsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox> _repeated_dropBoxs_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox> dropBoxs_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Types.B2C_AirDropBox> DropBoxs {
          get { return dropBoxs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_AirDropBoxData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_AirDropBoxData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!dropBoxs_.Equals(other.dropBoxs_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= dropBoxs_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          dropBoxs_.WriteTo(output, _repeated_dropBoxs_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += dropBoxs_.CalculateSize(_repeated_dropBoxs_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_AirDropBoxData other) {
          if (other == null) {
            return;
          }
          dropBoxs_.Add(other.dropBoxs_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                dropBoxs_.AddEntriesFrom(input, _repeated_dropBoxs_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_AirDropBoxData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class B2C_AirDropBox : pb::IMessage<B2C_AirDropBox> {
            private static readonly pb::MessageParser<B2C_AirDropBox> _parser = new pb::MessageParser<B2C_AirDropBox>(() => pb.ProtobufManager.New<B2C_AirDropBox>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<B2C_AirDropBox> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_AirDropBoxData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public B2C_AirDropBox() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              X = 0;
              Y = 0;
              Z = 0;
              StartTime = 0;
              DropState = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public B2C_AirDropBox(B2C_AirDropBox other) : this() {
              x_ = other.x_;
              y_ = other.y_;
              z_ = other.z_;
              startTime_ = other.startTime_;
              dropState_ = other.dropState_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public B2C_AirDropBox Clone() {
              return new B2C_AirDropBox(this);
            }

            /// <summary>Field number for the "x" field.</summary>
            public const int XFieldNumber = 1;
            private float x_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            /// <summary>Field number for the "y" field.</summary>
            public const int YFieldNumber = 2;
            private float y_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            /// <summary>Field number for the "z" field.</summary>
            public const int ZFieldNumber = 3;
            private float z_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Z {
              get { return z_; }
              set {
                z_ = value;
              }
            }

            /// <summary>Field number for the "startTime" field.</summary>
            public const int StartTimeFieldNumber = 4;
            private uint startTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint StartTime {
              get { return startTime_; }
              set {
                startTime_ = value;
              }
            }

            /// <summary>Field number for the "dropState" field.</summary>
            public const int DropStateFieldNumber = 5;
            private global::Pb.DropBoxState dropState_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.DropBoxState DropState {
              get { return dropState_; }
              set {
                dropState_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as B2C_AirDropBox);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(B2C_AirDropBox other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (X != other.X) return false;
              if (Y != other.Y) return false;
              if (Z != other.Z) return false;
              if (StartTime != other.StartTime) return false;
              if (DropState != other.DropState) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (X != 0F) hash ^= X.GetHashCode();
              if (Y != 0F) hash ^= Y.GetHashCode();
              if (Z != 0F) hash ^= Z.GetHashCode();
              if (StartTime != 0) hash ^= StartTime.GetHashCode();
              if (DropState != 0) hash ^= DropState.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (X != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(X);
              }
              if (Y != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
              }
              if (Z != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Z);
              }
              if (StartTime != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(StartTime);
              }
              if (DropState != 0) {
                output.WriteRawTag(40);
                output.WriteEnum((int) DropState);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (X != 0F) {
                size += 1 + 4;
              }
              if (Y != 0F) {
                size += 1 + 4;
              }
              if (Z != 0F) {
                size += 1 + 4;
              }
              if (StartTime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
              }
              if (DropState != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DropState);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(B2C_AirDropBox other) {
              if (other == null) {
                return;
              }
              if (other.X != 0F) {
                X = other.X;
              }
              if (other.Y != 0F) {
                Y = other.Y;
              }
              if (other.Z != 0F) {
                Z = other.Z;
              }
              if (other.StartTime != 0) {
                StartTime = other.StartTime;
              }
              if (other.DropState != 0) {
                DropState = other.DropState;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 13: {
                    X = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Y = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    Z = input.ReadFloat();
                    break;
                  }
                  case 32: {
                    StartTime = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    dropState_ = (global::Pb.DropBoxState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_BlastingData : pb::IMessage<B2C_BlastingData> {
        private static readonly pb::MessageParser<B2C_BlastingData> _parser = new pb::MessageParser<B2C_BlastingData>(() => pb.ProtobufManager.New<B2C_BlastingData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BlastingData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BlastingData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < blasting_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting>(blasting_[i]);
          }
          blasting_.Clear();
          Gameremaintime = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BlastingData(B2C_BlastingData other) : this() {
          blasting_ = other.blasting_.Clone();
          gameremaintime_ = other.gameremaintime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BlastingData Clone() {
          return new B2C_BlastingData(this);
        }

        /// <summary>Field number for the "blasting" field.</summary>
        public const int BlastingFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting> _repeated_blasting_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting> blasting_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_BlastingData.Types.B2C_Blasting> Blasting {
          get { return blasting_; }
        }

        /// <summary>Field number for the "gameremaintime" field.</summary>
        public const int GameremaintimeFieldNumber = 2;
        private long gameremaintime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Gameremaintime {
          get { return gameremaintime_; }
          set {
            gameremaintime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BlastingData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BlastingData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!blasting_.Equals(other.blasting_)) return false;
          if (Gameremaintime != other.Gameremaintime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= blasting_.GetHashCode();
          if (Gameremaintime != 0L) hash ^= Gameremaintime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          blasting_.WriteTo(output, _repeated_blasting_codec);
          if (Gameremaintime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Gameremaintime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += blasting_.CalculateSize(_repeated_blasting_codec);
          if (Gameremaintime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gameremaintime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BlastingData other) {
          if (other == null) {
            return;
          }
          blasting_.Add(other.blasting_);
          if (other.Gameremaintime != 0L) {
            Gameremaintime = other.Gameremaintime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                blasting_.AddEntriesFrom(input, _repeated_blasting_codec);
                break;
              }
              case 16: {
                Gameremaintime = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_BlastingData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class B2C_Blasting : pb::IMessage<B2C_Blasting> {
            private static readonly pb::MessageParser<B2C_Blasting> _parser = new pb::MessageParser<B2C_Blasting>(() => pb.ProtobufManager.New<B2C_Blasting>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<B2C_Blasting> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_BlastingData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public B2C_Blasting() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Status = 0;
              Entityid = 0;
              Remaintime = 0;
              Id = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public B2C_Blasting(B2C_Blasting other) : this() {
              status_ = other.status_;
              entityid_ = other.entityid_;
              remaintime_ = other.remaintime_;
              id_ = other.id_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public B2C_Blasting Clone() {
              return new B2C_Blasting(this);
            }

            /// <summary>Field number for the "status" field.</summary>
            public const int StatusFieldNumber = 1;
            private global::Pb.BlastStateType status_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.BlastStateType Status {
              get { return status_; }
              set {
                status_ = value;
              }
            }

            /// <summary>Field number for the "entityid" field.</summary>
            public const int EntityidFieldNumber = 2;
            private ulong entityid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Entityid {
              get { return entityid_; }
              set {
                entityid_ = value;
              }
            }

            /// <summary>Field number for the "remaintime" field.</summary>
            public const int RemaintimeFieldNumber = 3;
            private long remaintime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Remaintime {
              get { return remaintime_; }
              set {
                remaintime_ = value;
              }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 4;
            private uint id_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as B2C_Blasting);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(B2C_Blasting other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Status != other.Status) return false;
              if (Entityid != other.Entityid) return false;
              if (Remaintime != other.Remaintime) return false;
              if (Id != other.Id) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Status != 0) hash ^= Status.GetHashCode();
              if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
              if (Remaintime != 0L) hash ^= Remaintime.GetHashCode();
              if (Id != 0) hash ^= Id.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Status != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (Entityid != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(Entityid);
              }
              if (Remaintime != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Remaintime);
              }
              if (Id != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Id);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Status != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
              }
              if (Entityid != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
              }
              if (Remaintime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Remaintime);
              }
              if (Id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(B2C_Blasting other) {
              if (other == null) {
                return;
              }
              if (other.Status != 0) {
                Status = other.Status;
              }
              if (other.Entityid != 0UL) {
                Entityid = other.Entityid;
              }
              if (other.Remaintime != 0L) {
                Remaintime = other.Remaintime;
              }
              if (other.Id != 0) {
                Id = other.Id;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    status_ = (global::Pb.BlastStateType) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Entityid = input.ReadUInt64();
                    break;
                  }
                  case 24: {
                    Remaintime = input.ReadInt64();
                    break;
                  }
                  case 32: {
                    Id = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_BombItem : pb::IMessage<B2C_BombItem> {
        private static readonly pb::MessageParser<B2C_BombItem> _parser = new pb::MessageParser<B2C_BombItem>(() => pb.ProtobufManager.New<B2C_BombItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_BombItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BombItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Owner = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
          Isbox = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BombItem(B2C_BombItem other) : this() {
          owner_ = other.owner_;
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
          isbox_ = other.isbox_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_BombItem Clone() {
          return new B2C_BombItem(this);
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 1;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 2;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "isbox" field.</summary>
        public const int IsboxFieldNumber = 3;
        private bool isbox_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Isbox {
          get { return isbox_; }
          set {
            isbox_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_BombItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_BombItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Owner != other.Owner) return false;
          if (!object.Equals(Pos, other.Pos)) return false;
          if (Isbox != other.Isbox) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (Isbox != false) hash ^= Isbox.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Owner != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Owner);
          }
          if (pos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Pos);
          }
          if (Isbox != false) {
            output.WriteRawTag(24);
            output.WriteBool(Isbox);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (Isbox != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_BombItem other) {
          if (other == null) {
            return;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.Isbox != false) {
            Isbox = other.Isbox;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Owner = input.ReadUInt64();
                break;
              }
              case 18: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 24: {
                Isbox = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MultiGame : pb::IMessage<B2C_MultiGame> {
        private static readonly pb::MessageParser<B2C_MultiGame> _parser = new pb::MessageParser<B2C_MultiGame>(() => pb.ProtobufManager.New<B2C_MultiGame>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MultiGame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MultiGame() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Curgameid = 0;
          for (int i = 0; i < result_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult>(result_[i]);
          }
          result_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MultiGame(B2C_MultiGame other) : this() {
          curgameid_ = other.curgameid_;
          result_ = other.result_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MultiGame Clone() {
          return new B2C_MultiGame(this);
        }

        /// <summary>Field number for the "curgameid" field.</summary>
        public const int CurgameidFieldNumber = 1;
        private uint curgameid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Curgameid {
          get { return curgameid_; }
          set {
            curgameid_ = value;
          }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult> _repeated_result_codec
            = pb::FieldCodec.ForMessage(18, global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult> result_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MultiGame.Types.GameResult> Result {
          get { return result_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MultiGame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MultiGame other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Curgameid != other.Curgameid) return false;
          if(!result_.Equals(other.result_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Curgameid != 0) hash ^= Curgameid.GetHashCode();
          hash ^= result_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Curgameid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Curgameid);
          }
          result_.WriteTo(output, _repeated_result_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Curgameid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Curgameid);
          }
          size += result_.CalculateSize(_repeated_result_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MultiGame other) {
          if (other == null) {
            return;
          }
          if (other.Curgameid != 0) {
            Curgameid = other.Curgameid;
          }
          result_.Add(other.result_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Curgameid = input.ReadUInt32();
                break;
              }
              case 18: {
                result_.AddEntriesFrom(input, _repeated_result_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_MultiGame message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class GameResult : pb::IMessage<GameResult> {
            private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => pb.ProtobufManager.New<GameResult>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_MultiGame.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GameResult() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Teamid = 0;
              Wingame = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GameResult(GameResult other) : this() {
              teamid_ = other.teamid_;
              wingame_ = other.wingame_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GameResult Clone() {
              return new GameResult(this);
            }

            /// <summary>Field number for the "teamid" field.</summary>
            public const int TeamidFieldNumber = 1;
            private uint teamid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Teamid {
              get { return teamid_; }
              set {
                teamid_ = value;
              }
            }

            /// <summary>Field number for the "wingame" field.</summary>
            public const int WingameFieldNumber = 2;
            private uint wingame_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Wingame {
              get { return wingame_; }
              set {
                wingame_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as GameResult);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(GameResult other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Teamid != other.Teamid) return false;
              if (Wingame != other.Wingame) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Teamid != 0) hash ^= Teamid.GetHashCode();
              if (Wingame != 0) hash ^= Wingame.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Teamid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Teamid);
              }
              if (Wingame != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Wingame);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Teamid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
              }
              if (Wingame != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wingame);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(GameResult other) {
              if (other == null) {
                return;
              }
              if (other.Teamid != 0) {
                Teamid = other.Teamid;
              }
              if (other.Wingame != 0) {
                Wingame = other.Wingame;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Teamid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Wingame = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_TeamScore : pb::IMessage<B2C_TeamScore> {
        private static readonly pb::MessageParser<B2C_TeamScore> _parser = new pb::MessageParser<B2C_TeamScore>(() => pb.ProtobufManager.New<B2C_TeamScore>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_TeamScore> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamScore() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < teamScore_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore>(teamScore_[i]);
          }
          teamScore_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamScore(B2C_TeamScore other) : this() {
          teamScore_ = other.teamScore_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamScore Clone() {
          return new B2C_TeamScore(this);
        }

        /// <summary>Field number for the "teamScore" field.</summary>
        public const int TeamScoreFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore> _repeated_teamScore_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore> teamScore_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_TeamScore.Types.TeamScore> TeamScore {
          get { return teamScore_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_TeamScore);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_TeamScore other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!teamScore_.Equals(other.teamScore_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= teamScore_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          teamScore_.WriteTo(output, _repeated_teamScore_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += teamScore_.CalculateSize(_repeated_teamScore_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_TeamScore other) {
          if (other == null) {
            return;
          }
          teamScore_.Add(other.teamScore_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                teamScore_.AddEntriesFrom(input, _repeated_teamScore_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_TeamScore message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TeamScore : pb::IMessage<TeamScore> {
            private static readonly pb::MessageParser<TeamScore> _parser = new pb::MessageParser<TeamScore>(() => pb.ProtobufManager.New<TeamScore>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TeamScore> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_TeamScore.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamScore() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Teamid = 0;
              Score = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamScore(TeamScore other) : this() {
              teamid_ = other.teamid_;
              score_ = other.score_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamScore Clone() {
              return new TeamScore(this);
            }

            /// <summary>Field number for the "teamid" field.</summary>
            public const int TeamidFieldNumber = 1;
            private uint teamid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Teamid {
              get { return teamid_; }
              set {
                teamid_ = value;
              }
            }

            /// <summary>Field number for the "score" field.</summary>
            public const int ScoreFieldNumber = 2;
            private uint score_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Score {
              get { return score_; }
              set {
                score_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TeamScore);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TeamScore other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Teamid != other.Teamid) return false;
              if (Score != other.Score) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Teamid != 0) hash ^= Teamid.GetHashCode();
              if (Score != 0) hash ^= Score.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Teamid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Teamid);
              }
              if (Score != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Score);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Teamid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
              }
              if (Score != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TeamScore other) {
              if (other == null) {
                return;
              }
              if (other.Teamid != 0) {
                Teamid = other.Teamid;
              }
              if (other.Score != 0) {
                Score = other.Score;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Teamid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Score = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_HuntData : pb::IMessage<B2C_HuntData> {
        private static readonly pb::MessageParser<B2C_HuntData> _parser = new pb::MessageParser<B2C_HuntData>(() => pb.ProtobufManager.New<B2C_HuntData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_HuntData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HuntData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < huntRole_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole>(huntRole_[i]);
          }
          huntRole_.Clear();
          huntMon_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HuntData(B2C_HuntData other) : this() {
          huntRole_ = other.huntRole_.Clone();
          huntMon_ = other.huntMon_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HuntData Clone() {
          return new B2C_HuntData(this);
        }

        /// <summary>Field number for the "huntRole" field.</summary>
        public const int HuntRoleFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole> _repeated_huntRole_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole> huntRole_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_HuntData.Types.HuntRole> HuntRole {
          get { return huntRole_; }
        }

        /// <summary>Field number for the "huntMon" field.</summary>
        public const int HuntMonFieldNumber = 2;
        private static readonly pb::FieldCodec<ulong> _repeated_huntMon_codec
            = pb::FieldCodec.ForUInt64(18);
        private readonly pbc::RepeatedField<ulong> huntMon_ = new pbc::RepeatedField<ulong>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> HuntMon {
          get { return huntMon_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_HuntData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_HuntData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!huntRole_.Equals(other.huntRole_)) return false;
          if(!huntMon_.Equals(other.huntMon_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= huntRole_.GetHashCode();
          hash ^= huntMon_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          huntRole_.WriteTo(output, _repeated_huntRole_codec);
          huntMon_.WriteTo(output, _repeated_huntMon_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += huntRole_.CalculateSize(_repeated_huntRole_codec);
          size += huntMon_.CalculateSize(_repeated_huntMon_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_HuntData other) {
          if (other == null) {
            return;
          }
          huntRole_.Add(other.huntRole_);
          huntMon_.Add(other.huntMon_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                huntRole_.AddEntriesFrom(input, _repeated_huntRole_codec);
                break;
              }
              case 18:
              case 16: {
                huntMon_.AddEntriesFrom(input, _repeated_huntMon_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_HuntData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class HuntRole : pb::IMessage<HuntRole> {
            private static readonly pb::MessageParser<HuntRole> _parser = new pb::MessageParser<HuntRole>(() => pb.ProtobufManager.New<HuntRole>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<HuntRole> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_HuntData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HuntRole() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Teamid = 0;
              Dest = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HuntRole(HuntRole other) : this() {
              teamid_ = other.teamid_;
              dest_ = other.dest_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HuntRole Clone() {
              return new HuntRole(this);
            }

            /// <summary>Field number for the "teamid" field.</summary>
            public const int TeamidFieldNumber = 1;
            private uint teamid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Teamid {
              get { return teamid_; }
              set {
                teamid_ = value;
              }
            }

            /// <summary>Field number for the "dest" field.</summary>
            public const int DestFieldNumber = 2;
            private ulong dest_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Dest {
              get { return dest_; }
              set {
                dest_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as HuntRole);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(HuntRole other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Teamid != other.Teamid) return false;
              if (Dest != other.Dest) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Teamid != 0) hash ^= Teamid.GetHashCode();
              if (Dest != 0UL) hash ^= Dest.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Teamid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Teamid);
              }
              if (Dest != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(Dest);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Teamid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
              }
              if (Dest != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Dest);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(HuntRole other) {
              if (other == null) {
                return;
              }
              if (other.Teamid != 0) {
                Teamid = other.Teamid;
              }
              if (other.Dest != 0UL) {
                Dest = other.Dest;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Teamid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Dest = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_OccupyData : pb::IMessage<B2C_OccupyData> {
        private static readonly pb::MessageParser<B2C_OccupyData> _parser = new pb::MessageParser<B2C_OccupyData>(() => pb.ProtobufManager.New<B2C_OccupyData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_OccupyData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OccupyData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          State = 0;
          AttInCircleTime = 0;
          AttOutCircleTime = 0;
          Remaintime = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OccupyData(B2C_OccupyData other) : this() {
          state_ = other.state_;
          attInCircleTime_ = other.attInCircleTime_;
          attOutCircleTime_ = other.attOutCircleTime_;
          remaintime_ = other.remaintime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OccupyData Clone() {
          return new B2C_OccupyData(this);
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 1;
        private global::Pb.OccupyState state_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.OccupyState State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "attInCircleTime" field.</summary>
        public const int AttInCircleTimeFieldNumber = 2;
        private uint attInCircleTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttInCircleTime {
          get { return attInCircleTime_; }
          set {
            attInCircleTime_ = value;
          }
        }

        /// <summary>Field number for the "attOutCircleTime" field.</summary>
        public const int AttOutCircleTimeFieldNumber = 3;
        private uint attOutCircleTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttOutCircleTime {
          get { return attOutCircleTime_; }
          set {
            attOutCircleTime_ = value;
          }
        }

        /// <summary>Field number for the "remaintime" field.</summary>
        public const int RemaintimeFieldNumber = 4;
        private uint remaintime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Remaintime {
          get { return remaintime_; }
          set {
            remaintime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_OccupyData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_OccupyData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (State != other.State) return false;
          if (AttInCircleTime != other.AttInCircleTime) return false;
          if (AttOutCircleTime != other.AttOutCircleTime) return false;
          if (Remaintime != other.Remaintime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (State != 0) hash ^= State.GetHashCode();
          if (AttInCircleTime != 0) hash ^= AttInCircleTime.GetHashCode();
          if (AttOutCircleTime != 0) hash ^= AttOutCircleTime.GetHashCode();
          if (Remaintime != 0) hash ^= Remaintime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (State != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) State);
          }
          if (AttInCircleTime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AttInCircleTime);
          }
          if (AttOutCircleTime != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(AttOutCircleTime);
          }
          if (Remaintime != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Remaintime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          if (AttInCircleTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttInCircleTime);
          }
          if (AttOutCircleTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttOutCircleTime);
          }
          if (Remaintime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Remaintime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_OccupyData other) {
          if (other == null) {
            return;
          }
          if (other.State != 0) {
            State = other.State;
          }
          if (other.AttInCircleTime != 0) {
            AttInCircleTime = other.AttInCircleTime;
          }
          if (other.AttOutCircleTime != 0) {
            AttOutCircleTime = other.AttOutCircleTime;
          }
          if (other.Remaintime != 0) {
            Remaintime = other.Remaintime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                state_ = (global::Pb.OccupyState) input.ReadEnum();
                break;
              }
              case 16: {
                AttInCircleTime = input.ReadUInt32();
                break;
              }
              case 24: {
                AttOutCircleTime = input.ReadUInt32();
                break;
              }
              case 32: {
                Remaintime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SceneTriggerActive : pb::IMessage<B2C_SceneTriggerActive> {
        private static readonly pb::MessageParser<B2C_SceneTriggerActive> _parser = new pb::MessageParser<B2C_SceneTriggerActive>(() => pb.ProtobufManager.New<B2C_SceneTriggerActive>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SceneTriggerActive> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActive() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < triggers_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData>(triggers_[i]);
          }
          triggers_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActive(B2C_SceneTriggerActive other) : this() {
          triggers_ = other.triggers_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActive Clone() {
          return new B2C_SceneTriggerActive(this);
        }

        /// <summary>Field number for the "triggers" field.</summary>
        public const int TriggersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData> _repeated_triggers_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData> triggers_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Types.OneData> Triggers {
          get { return triggers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SceneTriggerActive);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SceneTriggerActive other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!triggers_.Equals(other.triggers_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= triggers_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          triggers_.WriteTo(output, _repeated_triggers_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += triggers_.CalculateSize(_repeated_triggers_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SceneTriggerActive other) {
          if (other == null) {
            return;
          }
          triggers_.Add(other.triggers_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                triggers_.AddEntriesFrom(input, _repeated_triggers_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_SceneTriggerActive message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class OneData : pb::IMessage<OneData> {
            private static readonly pb::MessageParser<OneData> _parser = new pb::MessageParser<OneData>(() => pb.ProtobufManager.New<OneData>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<OneData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_SceneTriggerActive.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Scenetriggerid = 0;
              Triggerid = 0;
              Active = false;
              Visible = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneData(OneData other) : this() {
              scenetriggerid_ = other.scenetriggerid_;
              triggerid_ = other.triggerid_;
              active_ = other.active_;
              visible_ = other.visible_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneData Clone() {
              return new OneData(this);
            }

            /// <summary>Field number for the "scenetriggerid" field.</summary>
            public const int ScenetriggeridFieldNumber = 1;
            private uint scenetriggerid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Scenetriggerid {
              get { return scenetriggerid_; }
              set {
                scenetriggerid_ = value;
              }
            }

            /// <summary>Field number for the "triggerid" field.</summary>
            public const int TriggeridFieldNumber = 2;
            private uint triggerid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Triggerid {
              get { return triggerid_; }
              set {
                triggerid_ = value;
              }
            }

            /// <summary>Field number for the "active" field.</summary>
            public const int ActiveFieldNumber = 3;
            private bool active_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Active {
              get { return active_; }
              set {
                active_ = value;
              }
            }

            /// <summary>Field number for the "visible" field.</summary>
            public const int VisibleFieldNumber = 4;
            private bool visible_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Visible {
              get { return visible_; }
              set {
                visible_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as OneData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(OneData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Scenetriggerid != other.Scenetriggerid) return false;
              if (Triggerid != other.Triggerid) return false;
              if (Active != other.Active) return false;
              if (Visible != other.Visible) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Scenetriggerid != 0) hash ^= Scenetriggerid.GetHashCode();
              if (Triggerid != 0) hash ^= Triggerid.GetHashCode();
              if (Active != false) hash ^= Active.GetHashCode();
              if (Visible != false) hash ^= Visible.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Scenetriggerid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Scenetriggerid);
              }
              if (Triggerid != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Triggerid);
              }
              if (Active != false) {
                output.WriteRawTag(24);
                output.WriteBool(Active);
              }
              if (Visible != false) {
                output.WriteRawTag(32);
                output.WriteBool(Visible);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Scenetriggerid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scenetriggerid);
              }
              if (Triggerid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Triggerid);
              }
              if (Active != false) {
                size += 1 + 1;
              }
              if (Visible != false) {
                size += 1 + 1;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(OneData other) {
              if (other == null) {
                return;
              }
              if (other.Scenetriggerid != 0) {
                Scenetriggerid = other.Scenetriggerid;
              }
              if (other.Triggerid != 0) {
                Triggerid = other.Triggerid;
              }
              if (other.Active != false) {
                Active = other.Active;
              }
              if (other.Visible != false) {
                Visible = other.Visible;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Scenetriggerid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Triggerid = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    Active = input.ReadBool();
                    break;
                  }
                  case 32: {
                    Visible = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_SignalTowerData : pb::IMessage<B2C_SignalTowerData> {
        private static readonly pb::MessageParser<B2C_SignalTowerData> _parser = new pb::MessageParser<B2C_SignalTowerData>(() => pb.ProtobufManager.New<B2C_SignalTowerData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SignalTowerData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SignalTowerData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < onefield_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower>(onefield_[i]);
          }
          onefield_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SignalTowerData(B2C_SignalTowerData other) : this() {
          onefield_ = other.onefield_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SignalTowerData Clone() {
          return new B2C_SignalTowerData(this);
        }

        /// <summary>Field number for the "onefield" field.</summary>
        public const int OnefieldFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower> _repeated_onefield_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower> onefield_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower> Onefield {
          get { return onefield_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SignalTowerData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SignalTowerData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!onefield_.Equals(other.onefield_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= onefield_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          onefield_.WriteTo(output, _repeated_onefield_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += onefield_.CalculateSize(_repeated_onefield_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SignalTowerData other) {
          if (other == null) {
            return;
          }
          onefield_.Add(other.onefield_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                onefield_.AddEntriesFrom(input, _repeated_onefield_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_SignalTowerData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class OneFiledTower : pb::IMessage<OneFiledTower> {
            private static readonly pb::MessageParser<OneFiledTower> _parser = new pb::MessageParser<OneFiledTower>(() => pb.ProtobufManager.New<OneFiledTower>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<OneFiledTower> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneFiledTower() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              for (int i = 0; i < onetower_.Count; ++i)
              {
                pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower>(onetower_[i]);
              }
              onetower_.Clear();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneFiledTower(OneFiledTower other) : this() {
              onetower_ = other.onetower_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OneFiledTower Clone() {
              return new OneFiledTower(this);
            }

            /// <summary>Field number for the "onetower" field.</summary>
            public const int OnetowerFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower> _repeated_onetower_codec
                = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower.Parser);
            private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower> onetower_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Types.OneSignalTower> Onetower {
              get { return onetower_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as OneFiledTower);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(OneFiledTower other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!onetower_.Equals(other.onetower_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= onetower_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              onetower_.WriteTo(output, _repeated_onetower_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += onetower_.CalculateSize(_repeated_onetower_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(OneFiledTower other) {
              if (other == null) {
                return;
              }
              onetower_.Add(other.onetower_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    onetower_.AddEntriesFrom(input, _repeated_onetower_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the OneFiledTower message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class OneSignalTower : pb::IMessage<OneSignalTower> {
                private static readonly pb::MessageParser<OneSignalTower> _parser = new pb::MessageParser<OneSignalTower>(() => pb.ProtobufManager.New<OneSignalTower>());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<OneSignalTower> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Pb.B2C_WorldData.Types.B2C_SignalTowerData.Types.OneFiledTower.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public OneSignalTower() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearData() {
                  Triggerid = 0;
                  Status = 0;
                  OwnerTeam = 0;
                  InCircleTime = 0;
                  Remainactive = 0;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public OneSignalTower(OneSignalTower other) : this() {
                  triggerid_ = other.triggerid_;
                  status_ = other.status_;
                  ownerTeam_ = other.ownerTeam_;
                  inCircleTime_ = other.inCircleTime_;
                  remainactive_ = other.remainactive_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public OneSignalTower Clone() {
                  return new OneSignalTower(this);
                }

                /// <summary>Field number for the "triggerid" field.</summary>
                public const int TriggeridFieldNumber = 1;
                private uint triggerid_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Triggerid {
                  get { return triggerid_; }
                  set {
                    triggerid_ = value;
                  }
                }

                /// <summary>Field number for the "status" field.</summary>
                public const int StatusFieldNumber = 2;
                private global::Pb.SignalTowerState status_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Pb.SignalTowerState Status {
                  get { return status_; }
                  set {
                    status_ = value;
                  }
                }

                /// <summary>Field number for the "ownerTeam" field.</summary>
                public const int OwnerTeamFieldNumber = 3;
                private uint ownerTeam_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint OwnerTeam {
                  get { return ownerTeam_; }
                  set {
                    ownerTeam_ = value;
                  }
                }

                /// <summary>Field number for the "inCircleTime" field.</summary>
                public const int InCircleTimeFieldNumber = 4;
                private uint inCircleTime_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint InCircleTime {
                  get { return inCircleTime_; }
                  set {
                    inCircleTime_ = value;
                  }
                }

                /// <summary>Field number for the "remainactive" field.</summary>
                public const int RemainactiveFieldNumber = 5;
                private uint remainactive_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Remainactive {
                  get { return remainactive_; }
                  set {
                    remainactive_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as OneSignalTower);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(OneSignalTower other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Triggerid != other.Triggerid) return false;
                  if (Status != other.Status) return false;
                  if (OwnerTeam != other.OwnerTeam) return false;
                  if (InCircleTime != other.InCircleTime) return false;
                  if (Remainactive != other.Remainactive) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Triggerid != 0) hash ^= Triggerid.GetHashCode();
                  if (Status != 0) hash ^= Status.GetHashCode();
                  if (OwnerTeam != 0) hash ^= OwnerTeam.GetHashCode();
                  if (InCircleTime != 0) hash ^= InCircleTime.GetHashCode();
                  if (Remainactive != 0) hash ^= Remainactive.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Triggerid != 0) {
                    output.WriteRawTag(8);
                    output.WriteUInt32(Triggerid);
                  }
                  if (Status != 0) {
                    output.WriteRawTag(16);
                    output.WriteEnum((int) Status);
                  }
                  if (OwnerTeam != 0) {
                    output.WriteRawTag(24);
                    output.WriteUInt32(OwnerTeam);
                  }
                  if (InCircleTime != 0) {
                    output.WriteRawTag(32);
                    output.WriteUInt32(InCircleTime);
                  }
                  if (Remainactive != 0) {
                    output.WriteRawTag(40);
                    output.WriteUInt32(Remainactive);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Triggerid != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Triggerid);
                  }
                  if (Status != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
                  }
                  if (OwnerTeam != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerTeam);
                  }
                  if (InCircleTime != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InCircleTime);
                  }
                  if (Remainactive != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Remainactive);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(OneSignalTower other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Triggerid != 0) {
                    Triggerid = other.Triggerid;
                  }
                  if (other.Status != 0) {
                    Status = other.Status;
                  }
                  if (other.OwnerTeam != 0) {
                    OwnerTeam = other.OwnerTeam;
                  }
                  if (other.InCircleTime != 0) {
                    InCircleTime = other.InCircleTime;
                  }
                  if (other.Remainactive != 0) {
                    Remainactive = other.Remainactive;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 8: {
                        Triggerid = input.ReadUInt32();
                        break;
                      }
                      case 16: {
                        status_ = (global::Pb.SignalTowerState) input.ReadEnum();
                        break;
                      }
                      case 24: {
                        OwnerTeam = input.ReadUInt32();
                        break;
                      }
                      case 32: {
                        InCircleTime = input.ReadUInt32();
                        break;
                      }
                      case 40: {
                        Remainactive = input.ReadUInt32();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class B2C_TelportTower : pb::IMessage<B2C_TelportTower> {
        private static readonly pb::MessageParser<B2C_TelportTower> _parser = new pb::MessageParser<B2C_TelportTower>(() => pb.ProtobufManager.New<B2C_TelportTower>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_TelportTower> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TelportTower() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < telTower_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower>(telTower_[i]);
          }
          telTower_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TelportTower(B2C_TelportTower other) : this() {
          telTower_ = other.telTower_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TelportTower Clone() {
          return new B2C_TelportTower(this);
        }

        /// <summary>Field number for the "telTower" field.</summary>
        public const int TelTowerFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower> _repeated_telTower_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower> telTower_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_TelportTower.Types.TelportTower> TelTower {
          get { return telTower_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_TelportTower);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_TelportTower other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!telTower_.Equals(other.telTower_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= telTower_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          telTower_.WriteTo(output, _repeated_telTower_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += telTower_.CalculateSize(_repeated_telTower_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_TelportTower other) {
          if (other == null) {
            return;
          }
          telTower_.Add(other.telTower_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                telTower_.AddEntriesFrom(input, _repeated_telTower_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_TelportTower message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TelportTower : pb::IMessage<TelportTower> {
            private static readonly pb::MessageParser<TelportTower> _parser = new pb::MessageParser<TelportTower>(() => pb.ProtobufManager.New<TelportTower>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TelportTower> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_TelportTower.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TelportTower() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              OwnerTeam = 0;
              pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
              pos_ = null;
              Uuid = 0;
              Decscale = 0;
              InCircleTime = 0;
              TotalTime = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TelportTower(TelportTower other) : this() {
              ownerTeam_ = other.ownerTeam_;
              Pos = other.pos_ != null ? other.Pos.Clone() : null;
              uuid_ = other.uuid_;
              decscale_ = other.decscale_;
              inCircleTime_ = other.inCircleTime_;
              totalTime_ = other.totalTime_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TelportTower Clone() {
              return new TelportTower(this);
            }

            /// <summary>Field number for the "ownerTeam" field.</summary>
            public const int OwnerTeamFieldNumber = 1;
            private uint ownerTeam_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint OwnerTeam {
              get { return ownerTeam_; }
              set {
                ownerTeam_ = value;
              }
            }

            /// <summary>Field number for the "pos" field.</summary>
            public const int PosFieldNumber = 2;
            private global::Pb.Vector3PB pos_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.Vector3PB Pos {
              get { return pos_; }
              set {
                pos_ = value;
              }
            }

            /// <summary>Field number for the "uuid" field.</summary>
            public const int UuidFieldNumber = 3;
            private ulong uuid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Uuid {
              get { return uuid_; }
              set {
                uuid_ = value;
              }
            }

            /// <summary>Field number for the "decscale" field.</summary>
            public const int DecscaleFieldNumber = 4;
            private float decscale_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Decscale {
              get { return decscale_; }
              set {
                decscale_ = value;
              }
            }

            /// <summary>Field number for the "inCircleTime" field.</summary>
            public const int InCircleTimeFieldNumber = 5;
            private uint inCircleTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint InCircleTime {
              get { return inCircleTime_; }
              set {
                inCircleTime_ = value;
              }
            }

            /// <summary>Field number for the "totalTime" field.</summary>
            public const int TotalTimeFieldNumber = 6;
            private uint totalTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint TotalTime {
              get { return totalTime_; }
              set {
                totalTime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TelportTower);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TelportTower other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (OwnerTeam != other.OwnerTeam) return false;
              if (!object.Equals(Pos, other.Pos)) return false;
              if (Uuid != other.Uuid) return false;
              if (Decscale != other.Decscale) return false;
              if (InCircleTime != other.InCircleTime) return false;
              if (TotalTime != other.TotalTime) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (OwnerTeam != 0) hash ^= OwnerTeam.GetHashCode();
              if (pos_ != null) hash ^= Pos.GetHashCode();
              if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
              if (Decscale != 0F) hash ^= Decscale.GetHashCode();
              if (InCircleTime != 0) hash ^= InCircleTime.GetHashCode();
              if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (OwnerTeam != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(OwnerTeam);
              }
              if (pos_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Pos);
              }
              if (Uuid != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(Uuid);
              }
              if (Decscale != 0F) {
                output.WriteRawTag(37);
                output.WriteFloat(Decscale);
              }
              if (InCircleTime != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(InCircleTime);
              }
              if (TotalTime != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(TotalTime);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (OwnerTeam != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerTeam);
              }
              if (pos_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
              }
              if (Uuid != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
              }
              if (Decscale != 0F) {
                size += 1 + 4;
              }
              if (InCircleTime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InCircleTime);
              }
              if (TotalTime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTime);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TelportTower other) {
              if (other == null) {
                return;
              }
              if (other.OwnerTeam != 0) {
                OwnerTeam = other.OwnerTeam;
              }
              if (other.pos_ != null) {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                Pos.MergeFrom(other.Pos);
              }
              if (other.Uuid != 0UL) {
                Uuid = other.Uuid;
              }
              if (other.Decscale != 0F) {
                Decscale = other.Decscale;
              }
              if (other.InCircleTime != 0) {
                InCircleTime = other.InCircleTime;
              }
              if (other.TotalTime != 0) {
                TotalTime = other.TotalTime;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    OwnerTeam = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    if (pos_ == null) {
                      pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                    }
                    input.ReadMessage(pos_);
                    break;
                  }
                  case 24: {
                    Uuid = input.ReadUInt64();
                    break;
                  }
                  case 37: {
                    Decscale = input.ReadFloat();
                    break;
                  }
                  case 40: {
                    InCircleTime = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    TotalTime = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_WorldTime : pb::IMessage<B2C_WorldTime> {
        private static readonly pb::MessageParser<B2C_WorldTime> _parser = new pb::MessageParser<B2C_WorldTime>(() => pb.ProtobufManager.New<B2C_WorldTime>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_WorldTime> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WorldTime() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          WorldTime = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WorldTime(B2C_WorldTime other) : this() {
          worldTime_ = other.worldTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WorldTime Clone() {
          return new B2C_WorldTime(this);
        }

        /// <summary>Field number for the "worldTime" field.</summary>
        public const int WorldTimeFieldNumber = 1;
        private uint worldTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WorldTime {
          get { return worldTime_; }
          set {
            worldTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_WorldTime);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_WorldTime other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WorldTime != other.WorldTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WorldTime != 0) hash ^= WorldTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (WorldTime != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(WorldTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WorldTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorldTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_WorldTime other) {
          if (other == null) {
            return;
          }
          if (other.WorldTime != 0) {
            WorldTime = other.WorldTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                WorldTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MonsterRefreshPos : pb::IMessage<B2C_MonsterRefreshPos> {
        private static readonly pb::MessageParser<B2C_MonsterRefreshPos> _parser = new pb::MessageParser<B2C_MonsterRefreshPos>(() => pb.ProtobufManager.New<B2C_MonsterRefreshPos>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MonsterRefreshPos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterRefreshPos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < monsterrefreshpos_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData>(monsterrefreshpos_[i]);
          }
          monsterrefreshpos_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterRefreshPos(B2C_MonsterRefreshPos other) : this() {
          monsterrefreshpos_ = other.monsterrefreshpos_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterRefreshPos Clone() {
          return new B2C_MonsterRefreshPos(this);
        }

        /// <summary>Field number for the "monsterrefreshpos" field.</summary>
        public const int MonsterrefreshposFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData> _repeated_monsterrefreshpos_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData> monsterrefreshpos_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Types.PosData> Monsterrefreshpos {
          get { return monsterrefreshpos_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MonsterRefreshPos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MonsterRefreshPos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!monsterrefreshpos_.Equals(other.monsterrefreshpos_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= monsterrefreshpos_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          monsterrefreshpos_.WriteTo(output, _repeated_monsterrefreshpos_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += monsterrefreshpos_.CalculateSize(_repeated_monsterrefreshpos_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MonsterRefreshPos other) {
          if (other == null) {
            return;
          }
          monsterrefreshpos_.Add(other.monsterrefreshpos_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                monsterrefreshpos_.AddEntriesFrom(input, _repeated_monsterrefreshpos_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_MonsterRefreshPos message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PosData : pb::IMessage<PosData> {
            private static readonly pb::MessageParser<PosData> _parser = new pb::MessageParser<PosData>(() => pb.ProtobufManager.New<PosData>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PosData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_MonsterRefreshPos.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PosData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
              pos_ = null;
              Posid = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PosData(PosData other) : this() {
              Pos = other.pos_ != null ? other.Pos.Clone() : null;
              posid_ = other.posid_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PosData Clone() {
              return new PosData(this);
            }

            /// <summary>Field number for the "pos" field.</summary>
            public const int PosFieldNumber = 1;
            private global::Pb.Vector3PB pos_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.Vector3PB Pos {
              get { return pos_; }
              set {
                pos_ = value;
              }
            }

            /// <summary>Field number for the "posid" field.</summary>
            public const int PosidFieldNumber = 2;
            private uint posid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Posid {
              get { return posid_; }
              set {
                posid_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PosData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PosData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Pos, other.Pos)) return false;
              if (Posid != other.Posid) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (pos_ != null) hash ^= Pos.GetHashCode();
              if (Posid != 0) hash ^= Posid.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (pos_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Pos);
              }
              if (Posid != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Posid);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (pos_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
              }
              if (Posid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Posid);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PosData other) {
              if (other == null) {
                return;
              }
              if (other.pos_ != null) {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                Pos.MergeFrom(other.Pos);
              }
              if (other.Posid != 0) {
                Posid = other.Posid;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (pos_ == null) {
                      pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                    }
                    input.ReadMessage(pos_);
                    break;
                  }
                  case 16: {
                    Posid = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_MoveObstacle : pb::IMessage<B2C_MoveObstacle> {
        private static readonly pb::MessageParser<B2C_MoveObstacle> _parser = new pb::MessageParser<B2C_MoveObstacle>(() => pb.ProtobufManager.New<B2C_MoveObstacle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MoveObstacle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MoveObstacle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < info_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle>(info_[i]);
          }
          info_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MoveObstacle(B2C_MoveObstacle other) : this() {
          info_ = other.info_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MoveObstacle Clone() {
          return new B2C_MoveObstacle(this);
        }

        /// <summary>Field number for the "info" field.</summary>
        public const int InfoFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle> _repeated_info_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle> info_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Types.MoveObstacle> Info {
          get { return info_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MoveObstacle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MoveObstacle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!info_.Equals(other.info_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= info_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          info_.WriteTo(output, _repeated_info_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += info_.CalculateSize(_repeated_info_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MoveObstacle other) {
          if (other == null) {
            return;
          }
          info_.Add(other.info_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                info_.AddEntriesFrom(input, _repeated_info_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_MoveObstacle message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class MoveObstacle : pb::IMessage<MoveObstacle> {
            private static readonly pb::MessageParser<MoveObstacle> _parser = new pb::MessageParser<MoveObstacle>(() => pb.ProtobufManager.New<MoveObstacle>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MoveObstacle> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_MoveObstacle.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MoveObstacle() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Id = 0;
              Open = false;
              passteam_.Clear();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MoveObstacle(MoveObstacle other) : this() {
              id_ = other.id_;
              open_ = other.open_;
              passteam_ = other.passteam_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MoveObstacle Clone() {
              return new MoveObstacle(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private uint id_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            /// <summary>Field number for the "open" field.</summary>
            public const int OpenFieldNumber = 2;
            private bool open_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Open {
              get { return open_; }
              set {
                open_ = value;
              }
            }

            /// <summary>Field number for the "passteam" field.</summary>
            public const int PassteamFieldNumber = 3;
            private static readonly pb::FieldCodec<uint> _repeated_passteam_codec
                = pb::FieldCodec.ForUInt32(26);
            private readonly pbc::RepeatedField<uint> passteam_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> Passteam {
              get { return passteam_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MoveObstacle);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MoveObstacle other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (Open != other.Open) return false;
              if(!passteam_.Equals(other.passteam_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id != 0) hash ^= Id.GetHashCode();
              if (Open != false) hash ^= Open.GetHashCode();
              hash ^= passteam_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (Open != false) {
                output.WriteRawTag(16);
                output.WriteBool(Open);
              }
              passteam_.WriteTo(output, _repeated_passteam_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (Open != false) {
                size += 1 + 1;
              }
              size += passteam_.CalculateSize(_repeated_passteam_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MoveObstacle other) {
              if (other == null) {
                return;
              }
              if (other.Id != 0) {
                Id = other.Id;
              }
              if (other.Open != false) {
                Open = other.Open;
              }
              passteam_.Add(other.passteam_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Open = input.ReadBool();
                    break;
                  }
                  case 26:
                  case 24: {
                    passteam_.AddEntriesFrom(input, _repeated_passteam_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_ControlMode : pb::IMessage<B2C_ControlMode> {
        private static readonly pb::MessageParser<B2C_ControlMode> _parser = new pb::MessageParser<B2C_ControlMode>(() => pb.ProtobufManager.New<B2C_ControlMode>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ControlMode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ControlMode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < teamprogress_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress>(teamprogress_[i]);
          }
          teamprogress_.Clear();
          Timeout = false;
          Controlprop = 0;
          Ownerteam = 0;
          Status = 0;
          Triggerid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ControlMode(B2C_ControlMode other) : this() {
          teamprogress_ = other.teamprogress_.Clone();
          timeout_ = other.timeout_;
          controlprop_ = other.controlprop_;
          ownerteam_ = other.ownerteam_;
          status_ = other.status_;
          triggerid_ = other.triggerid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ControlMode Clone() {
          return new B2C_ControlMode(this);
        }

        /// <summary>Field number for the "teamprogress" field.</summary>
        public const int TeamprogressFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress> _repeated_teamprogress_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress> teamprogress_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_ControlMode.Types.TeamProgress> Teamprogress {
          get { return teamprogress_; }
        }

        /// <summary>Field number for the "timeout" field.</summary>
        public const int TimeoutFieldNumber = 2;
        private bool timeout_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Timeout {
          get { return timeout_; }
          set {
            timeout_ = value;
          }
        }

        /// <summary>Field number for the "controlprop" field.</summary>
        public const int ControlpropFieldNumber = 3;
        private uint controlprop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Controlprop {
          get { return controlprop_; }
          set {
            controlprop_ = value;
          }
        }

        /// <summary>Field number for the "ownerteam" field.</summary>
        public const int OwnerteamFieldNumber = 4;
        private uint ownerteam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Ownerteam {
          get { return ownerteam_; }
          set {
            ownerteam_ = value;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 5;
        private global::Pb.ControlState status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.ControlState Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "triggerid" field.</summary>
        public const int TriggeridFieldNumber = 6;
        private uint triggerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Triggerid {
          get { return triggerid_; }
          set {
            triggerid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ControlMode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ControlMode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!teamprogress_.Equals(other.teamprogress_)) return false;
          if (Timeout != other.Timeout) return false;
          if (Controlprop != other.Controlprop) return false;
          if (Ownerteam != other.Ownerteam) return false;
          if (Status != other.Status) return false;
          if (Triggerid != other.Triggerid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= teamprogress_.GetHashCode();
          if (Timeout != false) hash ^= Timeout.GetHashCode();
          if (Controlprop != 0) hash ^= Controlprop.GetHashCode();
          if (Ownerteam != 0) hash ^= Ownerteam.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          if (Triggerid != 0) hash ^= Triggerid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          teamprogress_.WriteTo(output, _repeated_teamprogress_codec);
          if (Timeout != false) {
            output.WriteRawTag(16);
            output.WriteBool(Timeout);
          }
          if (Controlprop != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Controlprop);
          }
          if (Ownerteam != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Ownerteam);
          }
          if (Status != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Status);
          }
          if (Triggerid != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Triggerid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += teamprogress_.CalculateSize(_repeated_teamprogress_codec);
          if (Timeout != false) {
            size += 1 + 1;
          }
          if (Controlprop != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Controlprop);
          }
          if (Ownerteam != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ownerteam);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (Triggerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Triggerid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ControlMode other) {
          if (other == null) {
            return;
          }
          teamprogress_.Add(other.teamprogress_);
          if (other.Timeout != false) {
            Timeout = other.Timeout;
          }
          if (other.Controlprop != 0) {
            Controlprop = other.Controlprop;
          }
          if (other.Ownerteam != 0) {
            Ownerteam = other.Ownerteam;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.Triggerid != 0) {
            Triggerid = other.Triggerid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                teamprogress_.AddEntriesFrom(input, _repeated_teamprogress_codec);
                break;
              }
              case 16: {
                Timeout = input.ReadBool();
                break;
              }
              case 24: {
                Controlprop = input.ReadUInt32();
                break;
              }
              case 32: {
                Ownerteam = input.ReadUInt32();
                break;
              }
              case 40: {
                status_ = (global::Pb.ControlState) input.ReadEnum();
                break;
              }
              case 48: {
                Triggerid = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_ControlMode message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TeamProgress : pb::IMessage<TeamProgress> {
            private static readonly pb::MessageParser<TeamProgress> _parser = new pb::MessageParser<TeamProgress>(() => pb.ProtobufManager.New<TeamProgress>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TeamProgress> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_ControlMode.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamProgress() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Teamid = 0;
              Progress = 0;
              Occupytime = 0;
              Totaltime = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamProgress(TeamProgress other) : this() {
              teamid_ = other.teamid_;
              progress_ = other.progress_;
              occupytime_ = other.occupytime_;
              totaltime_ = other.totaltime_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TeamProgress Clone() {
              return new TeamProgress(this);
            }

            /// <summary>Field number for the "teamid" field.</summary>
            public const int TeamidFieldNumber = 1;
            private uint teamid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Teamid {
              get { return teamid_; }
              set {
                teamid_ = value;
              }
            }

            /// <summary>Field number for the "progress" field.</summary>
            public const int ProgressFieldNumber = 2;
            private uint progress_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Progress {
              get { return progress_; }
              set {
                progress_ = value;
              }
            }

            /// <summary>Field number for the "occupytime" field.</summary>
            public const int OccupytimeFieldNumber = 3;
            private uint occupytime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Occupytime {
              get { return occupytime_; }
              set {
                occupytime_ = value;
              }
            }

            /// <summary>Field number for the "totaltime" field.</summary>
            public const int TotaltimeFieldNumber = 4;
            private uint totaltime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Totaltime {
              get { return totaltime_; }
              set {
                totaltime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TeamProgress);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TeamProgress other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Teamid != other.Teamid) return false;
              if (Progress != other.Progress) return false;
              if (Occupytime != other.Occupytime) return false;
              if (Totaltime != other.Totaltime) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Teamid != 0) hash ^= Teamid.GetHashCode();
              if (Progress != 0) hash ^= Progress.GetHashCode();
              if (Occupytime != 0) hash ^= Occupytime.GetHashCode();
              if (Totaltime != 0) hash ^= Totaltime.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Teamid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Teamid);
              }
              if (Progress != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Progress);
              }
              if (Occupytime != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Occupytime);
              }
              if (Totaltime != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Totaltime);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Teamid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
              }
              if (Progress != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
              }
              if (Occupytime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupytime);
              }
              if (Totaltime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Totaltime);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TeamProgress other) {
              if (other == null) {
                return;
              }
              if (other.Teamid != 0) {
                Teamid = other.Teamid;
              }
              if (other.Progress != 0) {
                Progress = other.Progress;
              }
              if (other.Occupytime != 0) {
                Occupytime = other.Occupytime;
              }
              if (other.Totaltime != 0) {
                Totaltime = other.Totaltime;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Teamid = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Progress = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    Occupytime = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    Totaltime = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_HookData : pb::IMessage<B2C_HookData> {
        private static readonly pb::MessageParser<B2C_HookData> _parser = new pb::MessageParser<B2C_HookData>(() => pb.ProtobufManager.New<B2C_HookData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_HookData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HookData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Status = 0;
          Ownerteam = 0;
          Occupytime = 0;
          Cooltime = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HookData(B2C_HookData other) : this() {
          status_ = other.status_;
          ownerteam_ = other.ownerteam_;
          occupytime_ = other.occupytime_;
          cooltime_ = other.cooltime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_HookData Clone() {
          return new B2C_HookData(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Pb.HookState status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.HookState Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "ownerteam" field.</summary>
        public const int OwnerteamFieldNumber = 2;
        private uint ownerteam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Ownerteam {
          get { return ownerteam_; }
          set {
            ownerteam_ = value;
          }
        }

        /// <summary>Field number for the "occupytime" field.</summary>
        public const int OccupytimeFieldNumber = 3;
        private uint occupytime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Occupytime {
          get { return occupytime_; }
          set {
            occupytime_ = value;
          }
        }

        /// <summary>Field number for the "cooltime" field.</summary>
        public const int CooltimeFieldNumber = 4;
        private uint cooltime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Cooltime {
          get { return cooltime_; }
          set {
            cooltime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_HookData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_HookData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          if (Ownerteam != other.Ownerteam) return false;
          if (Occupytime != other.Occupytime) return false;
          if (Cooltime != other.Cooltime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (Ownerteam != 0) hash ^= Ownerteam.GetHashCode();
          if (Occupytime != 0) hash ^= Occupytime.GetHashCode();
          if (Cooltime != 0) hash ^= Cooltime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (Ownerteam != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Ownerteam);
          }
          if (Occupytime != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Occupytime);
          }
          if (Cooltime != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Cooltime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (Ownerteam != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ownerteam);
          }
          if (Occupytime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupytime);
          }
          if (Cooltime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cooltime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_HookData other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.Ownerteam != 0) {
            Ownerteam = other.Ownerteam;
          }
          if (other.Occupytime != 0) {
            Occupytime = other.Occupytime;
          }
          if (other.Cooltime != 0) {
            Cooltime = other.Cooltime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                status_ = (global::Pb.HookState) input.ReadEnum();
                break;
              }
              case 16: {
                Ownerteam = input.ReadUInt32();
                break;
              }
              case 24: {
                Occupytime = input.ReadUInt32();
                break;
              }
              case 32: {
                Cooltime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PvPNpcData : pb::IMessage<B2C_PvPNpcData> {
        private static readonly pb::MessageParser<B2C_PvPNpcData> _parser = new pb::MessageParser<B2C_PvPNpcData>(() => pb.ProtobufManager.New<B2C_PvPNpcData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PvPNpcData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PvPNpcData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < pvpdata_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData>(pvpdata_[i]);
          }
          pvpdata_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PvPNpcData(B2C_PvPNpcData other) : this() {
          pvpdata_ = other.pvpdata_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PvPNpcData Clone() {
          return new B2C_PvPNpcData(this);
        }

        /// <summary>Field number for the "pvpdata" field.</summary>
        public const int PvpdataFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData> _repeated_pvpdata_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData> pvpdata_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Types.PvPNpcData> Pvpdata {
          get { return pvpdata_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PvPNpcData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PvPNpcData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!pvpdata_.Equals(other.pvpdata_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= pvpdata_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          pvpdata_.WriteTo(output, _repeated_pvpdata_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += pvpdata_.CalculateSize(_repeated_pvpdata_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PvPNpcData other) {
          if (other == null) {
            return;
          }
          pvpdata_.Add(other.pvpdata_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                pvpdata_.AddEntriesFrom(input, _repeated_pvpdata_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_PvPNpcData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PvPNpcData : pb::IMessage<PvPNpcData> {
            private static readonly pb::MessageParser<PvPNpcData> _parser = new pb::MessageParser<PvPNpcData>(() => pb.ProtobufManager.New<PvPNpcData>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PvPNpcData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_PvPNpcData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PvPNpcData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              State = 0;
              Downtime = 0;
              Npcid = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PvPNpcData(PvPNpcData other) : this() {
              state_ = other.state_;
              downtime_ = other.downtime_;
              npcid_ = other.npcid_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PvPNpcData Clone() {
              return new PvPNpcData(this);
            }

            /// <summary>Field number for the "state" field.</summary>
            public const int StateFieldNumber = 1;
            private global::Pb.PVPNpcState state_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.PVPNpcState State {
              get { return state_; }
              set {
                state_ = value;
              }
            }

            /// <summary>Field number for the "downtime" field.</summary>
            public const int DowntimeFieldNumber = 2;
            private uint downtime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Downtime {
              get { return downtime_; }
              set {
                downtime_ = value;
              }
            }

            /// <summary>Field number for the "npcid" field.</summary>
            public const int NpcidFieldNumber = 3;
            private uint npcid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Npcid {
              get { return npcid_; }
              set {
                npcid_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PvPNpcData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PvPNpcData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (State != other.State) return false;
              if (Downtime != other.Downtime) return false;
              if (Npcid != other.Npcid) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (State != 0) hash ^= State.GetHashCode();
              if (Downtime != 0) hash ^= Downtime.GetHashCode();
              if (Npcid != 0) hash ^= Npcid.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (State != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) State);
              }
              if (Downtime != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Downtime);
              }
              if (Npcid != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Npcid);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (State != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
              }
              if (Downtime != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Downtime);
              }
              if (Npcid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PvPNpcData other) {
              if (other == null) {
                return;
              }
              if (other.State != 0) {
                State = other.State;
              }
              if (other.Downtime != 0) {
                Downtime = other.Downtime;
              }
              if (other.Npcid != 0) {
                Npcid = other.Npcid;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    state_ = (global::Pb.PVPNpcState) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Downtime = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    Npcid = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_DarwinScore : pb::IMessage<B2C_DarwinScore> {
        private static readonly pb::MessageParser<B2C_DarwinScore> _parser = new pb::MessageParser<B2C_DarwinScore>(() => pb.ProtobufManager.New<B2C_DarwinScore>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_DarwinScore> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinScore() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < scoreinfo_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.RoleScoreInfo>(scoreinfo_[i]);
          }
          scoreinfo_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinScore(B2C_DarwinScore other) : this() {
          scoreinfo_ = other.scoreinfo_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinScore Clone() {
          return new B2C_DarwinScore(this);
        }

        /// <summary>Field number for the "scoreinfo" field.</summary>
        public const int ScoreinfoFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.RoleScoreInfo> _repeated_scoreinfo_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.RoleScoreInfo.Parser);
        private readonly pbc::RepeatedField<global::Pb.RoleScoreInfo> scoreinfo_ = new pbc::RepeatedField<global::Pb.RoleScoreInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.RoleScoreInfo> Scoreinfo {
          get { return scoreinfo_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_DarwinScore);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_DarwinScore other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!scoreinfo_.Equals(other.scoreinfo_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= scoreinfo_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          scoreinfo_.WriteTo(output, _repeated_scoreinfo_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += scoreinfo_.CalculateSize(_repeated_scoreinfo_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_DarwinScore other) {
          if (other == null) {
            return;
          }
          scoreinfo_.Add(other.scoreinfo_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                scoreinfo_.AddEntriesFrom(input, _repeated_scoreinfo_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_DarwinFirst : pb::IMessage<B2C_DarwinFirst> {
        private static readonly pb::MessageParser<B2C_DarwinFirst> _parser = new pb::MessageParser<B2C_DarwinFirst>(() => pb.ProtobufManager.New<B2C_DarwinFirst>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_DarwinFirst> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinFirst() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Role = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinFirst(B2C_DarwinFirst other) : this() {
          role_ = other.role_;
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinFirst Clone() {
          return new B2C_DarwinFirst(this);
        }

        /// <summary>Field number for the "role" field.</summary>
        public const int RoleFieldNumber = 1;
        private ulong role_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Role {
          get { return role_; }
          set {
            role_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 2;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_DarwinFirst);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_DarwinFirst other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Role != other.Role) return false;
          if (!object.Equals(Pos, other.Pos)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Role != 0UL) hash ^= Role.GetHashCode();
          if (pos_ != null) hash ^= Pos.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Role != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Role);
          }
          if (pos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Pos);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Role != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Role);
          }
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_DarwinFirst other) {
          if (other == null) {
            return;
          }
          if (other.Role != 0UL) {
            Role = other.Role;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Role = input.ReadUInt64();
                break;
              }
              case 18: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_CharacterForce : pb::IMessage<B2C_CharacterForce> {
        private static readonly pb::MessageParser<B2C_CharacterForce> _parser = new pb::MessageParser<B2C_CharacterForce>(() => pb.ProtobufManager.New<B2C_CharacterForce>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_CharacterForce> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterForce() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < characterforce_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData>(characterforce_[i]);
          }
          characterforce_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterForce(B2C_CharacterForce other) : this() {
          characterforce_ = other.characterforce_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_CharacterForce Clone() {
          return new B2C_CharacterForce(this);
        }

        /// <summary>Field number for the "characterforce" field.</summary>
        public const int CharacterforceFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData> _repeated_characterforce_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData> characterforce_ = new pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Types.ForceData> Characterforce {
          get { return characterforce_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_CharacterForce);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_CharacterForce other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!characterforce_.Equals(other.characterforce_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= characterforce_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          characterforce_.WriteTo(output, _repeated_characterforce_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += characterforce_.CalculateSize(_repeated_characterforce_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_CharacterForce other) {
          if (other == null) {
            return;
          }
          characterforce_.Add(other.characterforce_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                characterforce_.AddEntriesFrom(input, _repeated_characterforce_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_CharacterForce message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ForceData : pb::IMessage<ForceData> {
            private static readonly pb::MessageParser<ForceData> _parser = new pb::MessageParser<ForceData>(() => pb.ProtobufManager.New<ForceData>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ForceData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_CharacterForce.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ForceData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Entityid = 0;
              Forceid = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ForceData(ForceData other) : this() {
              entityid_ = other.entityid_;
              forceid_ = other.forceid_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ForceData Clone() {
              return new ForceData(this);
            }

            /// <summary>Field number for the "entityid" field.</summary>
            public const int EntityidFieldNumber = 1;
            private ulong entityid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Entityid {
              get { return entityid_; }
              set {
                entityid_ = value;
              }
            }

            /// <summary>Field number for the "forceid" field.</summary>
            public const int ForceidFieldNumber = 2;
            private uint forceid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Forceid {
              get { return forceid_; }
              set {
                forceid_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ForceData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ForceData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Entityid != other.Entityid) return false;
              if (Forceid != other.Forceid) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
              if (Forceid != 0) hash ^= Forceid.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Entityid != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(Entityid);
              }
              if (Forceid != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Forceid);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Entityid != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
              }
              if (Forceid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Forceid);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ForceData other) {
              if (other == null) {
                return;
              }
              if (other.Entityid != 0UL) {
                Entityid = other.Entityid;
              }
              if (other.Forceid != 0) {
                Forceid = other.Forceid;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Entityid = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    Forceid = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_ProcessMode : pb::IMessage<B2C_ProcessMode> {
        private static readonly pb::MessageParser<B2C_ProcessMode> _parser = new pb::MessageParser<B2C_ProcessMode>(() => pb.ProtobufManager.New<B2C_ProcessMode>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ProcessMode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ProcessMode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Processmode = 0;
          Dragon = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ProcessMode(B2C_ProcessMode other) : this() {
          processmode_ = other.processmode_;
          dragon_ = other.dragon_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ProcessMode Clone() {
          return new B2C_ProcessMode(this);
        }

        /// <summary>Field number for the "processmode" field.</summary>
        public const int ProcessmodeFieldNumber = 1;
        private int processmode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Processmode {
          get { return processmode_; }
          set {
            processmode_ = value;
          }
        }

        /// <summary>Field number for the "dragon" field.</summary>
        public const int DragonFieldNumber = 2;
        private ulong dragon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Dragon {
          get { return dragon_; }
          set {
            dragon_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ProcessMode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ProcessMode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Processmode != other.Processmode) return false;
          if (Dragon != other.Dragon) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Processmode != 0) hash ^= Processmode.GetHashCode();
          if (Dragon != 0UL) hash ^= Dragon.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Processmode != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Processmode);
          }
          if (Dragon != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Dragon);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Processmode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Processmode);
          }
          if (Dragon != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Dragon);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ProcessMode other) {
          if (other == null) {
            return;
          }
          if (other.Processmode != 0) {
            Processmode = other.Processmode;
          }
          if (other.Dragon != 0UL) {
            Dragon = other.Dragon;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Processmode = input.ReadInt32();
                break;
              }
              case 16: {
                Dragon = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_GlobalMonster : pb::IMessage<B2C_GlobalMonster> {
        private static readonly pb::MessageParser<B2C_GlobalMonster> _parser = new pb::MessageParser<B2C_GlobalMonster>(() => pb.ProtobufManager.New<B2C_GlobalMonster>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_GlobalMonster> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldData.Descriptor.NestedTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GlobalMonster() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData>(monsterdata_);
          monsterdata_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GlobalMonster(B2C_GlobalMonster other) : this() {
          Monsterdata = other.monsterdata_ != null ? other.Monsterdata.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GlobalMonster Clone() {
          return new B2C_GlobalMonster(this);
        }

        /// <summary>Field number for the "monsterdata" field.</summary>
        public const int MonsterdataFieldNumber = 1;
        private global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData monsterdata_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData Monsterdata {
          get { return monsterdata_; }
          set {
            monsterdata_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_GlobalMonster);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_GlobalMonster other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Monsterdata, other.Monsterdata)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (monsterdata_ != null) hash ^= Monsterdata.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (monsterdata_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Monsterdata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (monsterdata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monsterdata);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_GlobalMonster other) {
          if (other == null) {
            return;
          }
          if (other.monsterdata_ != null) {
            if (monsterdata_ == null) {
              monsterdata_ = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData>();
            }
            Monsterdata.MergeFrom(other.Monsterdata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (monsterdata_ == null) {
                  monsterdata_ = pb.ProtobufManager.New<global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Types.MonsterData>();
                }
                input.ReadMessage(monsterdata_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_GlobalMonster message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class MonsterData : pb::IMessage<MonsterData> {
            private static readonly pb::MessageParser<MonsterData> _parser = new pb::MessageParser<MonsterData>(() => pb.ProtobufManager.New<MonsterData>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MonsterData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_WorldData.Types.B2C_GlobalMonster.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MonsterData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              Monid = 0;
              pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
              pos_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MonsterData(MonsterData other) : this() {
              monid_ = other.monid_;
              Pos = other.pos_ != null ? other.Pos.Clone() : null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MonsterData Clone() {
              return new MonsterData(this);
            }

            /// <summary>Field number for the "monid" field.</summary>
            public const int MonidFieldNumber = 1;
            private uint monid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Monid {
              get { return monid_; }
              set {
                monid_ = value;
              }
            }

            /// <summary>Field number for the "pos" field.</summary>
            public const int PosFieldNumber = 2;
            private global::Pb.Vector3PB pos_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.Vector3PB Pos {
              get { return pos_; }
              set {
                pos_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MonsterData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MonsterData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Monid != other.Monid) return false;
              if (!object.Equals(Pos, other.Pos)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Monid != 0) hash ^= Monid.GetHashCode();
              if (pos_ != null) hash ^= Pos.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Monid != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Monid);
              }
              if (pos_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Pos);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Monid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Monid);
              }
              if (pos_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MonsterData other) {
              if (other == null) {
                return;
              }
              if (other.Monid != 0) {
                Monid = other.Monid;
              }
              if (other.pos_ != null) {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                Pos.MergeFrom(other.Pos);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Monid = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    if (pos_ == null) {
                      pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                    }
                    input.ReadMessage(pos_);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class B2C_WorldEvent : pb::IMessage<B2C_WorldEvent> {
    private static readonly pb::MessageParser<B2C_WorldEvent> _parser = new pb::MessageParser<B2C_WorldEvent>(() => pb.ProtobufManager.New<B2C_WorldEvent>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_WorldEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (EventDataCase) {
        case EventDataOneofCase.Killinfo:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_KillInfo>(Killinfo);
          Killinfo = null;
          break;
        case EventDataOneofCase.Attackvoice:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice>(Attackvoice);
          Attackvoice = null;
          break;
        case EventDataOneofCase.Opblast:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_OpBlast>(Opblast);
          Opblast = null;
          break;
        case EventDataOneofCase.Scenetriggeractive:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive>(Scenetriggeractive);
          Scenetriggeractive = null;
          break;
        case EventDataOneofCase.Signaltower:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_SignalTower>(Signaltower);
          Signaltower = null;
          break;
        case EventDataOneofCase.Scenetriggeractivewarning:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning>(Scenetriggeractivewarning);
          Scenetriggeractivewarning = null;
          break;
        case EventDataOneofCase.Monsterwarning:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning>(Monsterwarning);
          Monsterwarning = null;
          break;
        case EventDataOneofCase.Worldmessage:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage>(Worldmessage);
          Worldmessage = null;
          break;
        case EventDataOneofCase.Darwinscore:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore>(Darwinscore);
          Darwinscore = null;
          break;
        case EventDataOneofCase.Globalmonster:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster>(Globalmonster);
          Globalmonster = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldEvent(B2C_WorldEvent other) : this() {
      switch (other.EventDataCase) {
        case EventDataOneofCase.Killinfo:
          Killinfo = other.Killinfo.Clone();
          break;
        case EventDataOneofCase.Attackvoice:
          Attackvoice = other.Attackvoice.Clone();
          break;
        case EventDataOneofCase.Opblast:
          Opblast = other.Opblast.Clone();
          break;
        case EventDataOneofCase.Scenetriggeractive:
          Scenetriggeractive = other.Scenetriggeractive.Clone();
          break;
        case EventDataOneofCase.Signaltower:
          Signaltower = other.Signaltower.Clone();
          break;
        case EventDataOneofCase.Scenetriggeractivewarning:
          Scenetriggeractivewarning = other.Scenetriggeractivewarning.Clone();
          break;
        case EventDataOneofCase.Monsterwarning:
          Monsterwarning = other.Monsterwarning.Clone();
          break;
        case EventDataOneofCase.Worldmessage:
          Worldmessage = other.Worldmessage.Clone();
          break;
        case EventDataOneofCase.Darwinscore:
          Darwinscore = other.Darwinscore.Clone();
          break;
        case EventDataOneofCase.Globalmonster:
          Globalmonster = other.Globalmonster.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldEvent Clone() {
      return new B2C_WorldEvent(this);
    }

    /// <summary>Field number for the "killinfo" field.</summary>
    public const int KillinfoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_KillInfo Killinfo {
      get { return eventDataCase_ == EventDataOneofCase.Killinfo ? (global::Pb.B2C_WorldEvent.Types.B2C_KillInfo) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Killinfo;
      }
    }

    /// <summary>Field number for the "attackvoice" field.</summary>
    public const int AttackvoiceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice Attackvoice {
      get { return eventDataCase_ == EventDataOneofCase.Attackvoice ? (global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Attackvoice;
      }
    }

    /// <summary>Field number for the "opblast" field.</summary>
    public const int OpblastFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_OpBlast Opblast {
      get { return eventDataCase_ == EventDataOneofCase.Opblast ? (global::Pb.B2C_WorldEvent.Types.B2C_OpBlast) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Opblast;
      }
    }

    /// <summary>Field number for the "scenetriggeractive" field.</summary>
    public const int ScenetriggeractiveFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive Scenetriggeractive {
      get { return eventDataCase_ == EventDataOneofCase.Scenetriggeractive ? (global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Scenetriggeractive;
      }
    }

    /// <summary>Field number for the "signaltower" field.</summary>
    public const int SignaltowerFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_SignalTower Signaltower {
      get { return eventDataCase_ == EventDataOneofCase.Signaltower ? (global::Pb.B2C_WorldEvent.Types.B2C_SignalTower) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Signaltower;
      }
    }

    /// <summary>Field number for the "scenetriggeractivewarning" field.</summary>
    public const int ScenetriggeractivewarningFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning Scenetriggeractivewarning {
      get { return eventDataCase_ == EventDataOneofCase.Scenetriggeractivewarning ? (global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Scenetriggeractivewarning;
      }
    }

    /// <summary>Field number for the "monsterwarning" field.</summary>
    public const int MonsterwarningFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning Monsterwarning {
      get { return eventDataCase_ == EventDataOneofCase.Monsterwarning ? (global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Monsterwarning;
      }
    }

    /// <summary>Field number for the "worldmessage" field.</summary>
    public const int WorldmessageFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage Worldmessage {
      get { return eventDataCase_ == EventDataOneofCase.Worldmessage ? (global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Worldmessage;
      }
    }

    /// <summary>Field number for the "darwinscore" field.</summary>
    public const int DarwinscoreFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore Darwinscore {
      get { return eventDataCase_ == EventDataOneofCase.Darwinscore ? (global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Darwinscore;
      }
    }

    /// <summary>Field number for the "globalmonster" field.</summary>
    public const int GlobalmonsterFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster Globalmonster {
      get { return eventDataCase_ == EventDataOneofCase.Globalmonster ? (global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster) eventData_ : null; }
      set {
        eventData_ = value;
        eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Globalmonster;
      }
    }

    private object eventData_;
    /// <summary>Enum of possible cases for the "EventData" oneof.</summary>
    public enum EventDataOneofCase {
      None = 0,
      Killinfo = 1,
      Attackvoice = 2,
      Opblast = 3,
      Scenetriggeractive = 4,
      Signaltower = 5,
      Scenetriggeractivewarning = 6,
      Monsterwarning = 7,
      Worldmessage = 8,
      Darwinscore = 9,
      Globalmonster = 10,
    }
    private EventDataOneofCase eventDataCase_ = EventDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataOneofCase EventDataCase {
      get { return eventDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventData() {
      eventDataCase_ = EventDataOneofCase.None;
      eventData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_WorldEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_WorldEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Killinfo, other.Killinfo)) return false;
      if (!object.Equals(Attackvoice, other.Attackvoice)) return false;
      if (!object.Equals(Opblast, other.Opblast)) return false;
      if (!object.Equals(Scenetriggeractive, other.Scenetriggeractive)) return false;
      if (!object.Equals(Signaltower, other.Signaltower)) return false;
      if (!object.Equals(Scenetriggeractivewarning, other.Scenetriggeractivewarning)) return false;
      if (!object.Equals(Monsterwarning, other.Monsterwarning)) return false;
      if (!object.Equals(Worldmessage, other.Worldmessage)) return false;
      if (!object.Equals(Darwinscore, other.Darwinscore)) return false;
      if (!object.Equals(Globalmonster, other.Globalmonster)) return false;
      if (EventDataCase != other.EventDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventDataCase_ == EventDataOneofCase.Killinfo) hash ^= Killinfo.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Attackvoice) hash ^= Attackvoice.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Opblast) hash ^= Opblast.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Scenetriggeractive) hash ^= Scenetriggeractive.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Signaltower) hash ^= Signaltower.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Scenetriggeractivewarning) hash ^= Scenetriggeractivewarning.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Monsterwarning) hash ^= Monsterwarning.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Worldmessage) hash ^= Worldmessage.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Darwinscore) hash ^= Darwinscore.GetHashCode();
      if (eventDataCase_ == EventDataOneofCase.Globalmonster) hash ^= Globalmonster.GetHashCode();
      hash ^= (int) eventDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventDataCase_ == EventDataOneofCase.Killinfo) {
        output.WriteRawTag(10);
        output.WriteMessage(Killinfo);
      }
      if (eventDataCase_ == EventDataOneofCase.Attackvoice) {
        output.WriteRawTag(18);
        output.WriteMessage(Attackvoice);
      }
      if (eventDataCase_ == EventDataOneofCase.Opblast) {
        output.WriteRawTag(26);
        output.WriteMessage(Opblast);
      }
      if (eventDataCase_ == EventDataOneofCase.Scenetriggeractive) {
        output.WriteRawTag(34);
        output.WriteMessage(Scenetriggeractive);
      }
      if (eventDataCase_ == EventDataOneofCase.Signaltower) {
        output.WriteRawTag(42);
        output.WriteMessage(Signaltower);
      }
      if (eventDataCase_ == EventDataOneofCase.Scenetriggeractivewarning) {
        output.WriteRawTag(50);
        output.WriteMessage(Scenetriggeractivewarning);
      }
      if (eventDataCase_ == EventDataOneofCase.Monsterwarning) {
        output.WriteRawTag(58);
        output.WriteMessage(Monsterwarning);
      }
      if (eventDataCase_ == EventDataOneofCase.Worldmessage) {
        output.WriteRawTag(66);
        output.WriteMessage(Worldmessage);
      }
      if (eventDataCase_ == EventDataOneofCase.Darwinscore) {
        output.WriteRawTag(74);
        output.WriteMessage(Darwinscore);
      }
      if (eventDataCase_ == EventDataOneofCase.Globalmonster) {
        output.WriteRawTag(82);
        output.WriteMessage(Globalmonster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventDataCase_ == EventDataOneofCase.Killinfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Killinfo);
      }
      if (eventDataCase_ == EventDataOneofCase.Attackvoice) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attackvoice);
      }
      if (eventDataCase_ == EventDataOneofCase.Opblast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opblast);
      }
      if (eventDataCase_ == EventDataOneofCase.Scenetriggeractive) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scenetriggeractive);
      }
      if (eventDataCase_ == EventDataOneofCase.Signaltower) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signaltower);
      }
      if (eventDataCase_ == EventDataOneofCase.Scenetriggeractivewarning) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scenetriggeractivewarning);
      }
      if (eventDataCase_ == EventDataOneofCase.Monsterwarning) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monsterwarning);
      }
      if (eventDataCase_ == EventDataOneofCase.Worldmessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worldmessage);
      }
      if (eventDataCase_ == EventDataOneofCase.Darwinscore) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Darwinscore);
      }
      if (eventDataCase_ == EventDataOneofCase.Globalmonster) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Globalmonster);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_WorldEvent other) {
      if (other == null) {
        return;
      }
      switch (other.EventDataCase) {
        case EventDataOneofCase.Killinfo:
          Killinfo = other.Killinfo;
          break;
        case EventDataOneofCase.Attackvoice:
          Attackvoice = other.Attackvoice;
          break;
        case EventDataOneofCase.Opblast:
          Opblast = other.Opblast;
          break;
        case EventDataOneofCase.Scenetriggeractive:
          Scenetriggeractive = other.Scenetriggeractive;
          break;
        case EventDataOneofCase.Signaltower:
          Signaltower = other.Signaltower;
          break;
        case EventDataOneofCase.Scenetriggeractivewarning:
          Scenetriggeractivewarning = other.Scenetriggeractivewarning;
          break;
        case EventDataOneofCase.Monsterwarning:
          Monsterwarning = other.Monsterwarning;
          break;
        case EventDataOneofCase.Worldmessage:
          Worldmessage = other.Worldmessage;
          break;
        case EventDataOneofCase.Darwinscore:
          Darwinscore = other.Darwinscore;
          break;
        case EventDataOneofCase.Globalmonster:
          Globalmonster = other.Globalmonster;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.B2C_WorldEvent.Types.B2C_KillInfo subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_KillInfo>();
            if (eventDataCase_ == EventDataOneofCase.Killinfo) {
              subBuilder.MergeFrom(Killinfo);
            }
            input.ReadMessage(subBuilder);
            Killinfo = subBuilder;
            break;
          }
          case 18: {
            global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_AttackVoice>();
            if (eventDataCase_ == EventDataOneofCase.Attackvoice) {
              subBuilder.MergeFrom(Attackvoice);
            }
            input.ReadMessage(subBuilder);
            Attackvoice = subBuilder;
            break;
          }
          case 26: {
            global::Pb.B2C_WorldEvent.Types.B2C_OpBlast subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_OpBlast>();
            if (eventDataCase_ == EventDataOneofCase.Opblast) {
              subBuilder.MergeFrom(Opblast);
            }
            input.ReadMessage(subBuilder);
            Opblast = subBuilder;
            break;
          }
          case 34: {
            global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActive>();
            if (eventDataCase_ == EventDataOneofCase.Scenetriggeractive) {
              subBuilder.MergeFrom(Scenetriggeractive);
            }
            input.ReadMessage(subBuilder);
            Scenetriggeractive = subBuilder;
            break;
          }
          case 42: {
            global::Pb.B2C_WorldEvent.Types.B2C_SignalTower subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_SignalTower>();
            if (eventDataCase_ == EventDataOneofCase.Signaltower) {
              subBuilder.MergeFrom(Signaltower);
            }
            input.ReadMessage(subBuilder);
            Signaltower = subBuilder;
            break;
          }
          case 50: {
            global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_SceneTriggerActiveWarning>();
            if (eventDataCase_ == EventDataOneofCase.Scenetriggeractivewarning) {
              subBuilder.MergeFrom(Scenetriggeractivewarning);
            }
            input.ReadMessage(subBuilder);
            Scenetriggeractivewarning = subBuilder;
            break;
          }
          case 58: {
            global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_MonsterWarning>();
            if (eventDataCase_ == EventDataOneofCase.Monsterwarning) {
              subBuilder.MergeFrom(Monsterwarning);
            }
            input.ReadMessage(subBuilder);
            Monsterwarning = subBuilder;
            break;
          }
          case 66: {
            global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_WorldMessage>();
            if (eventDataCase_ == EventDataOneofCase.Worldmessage) {
              subBuilder.MergeFrom(Worldmessage);
            }
            input.ReadMessage(subBuilder);
            Worldmessage = subBuilder;
            break;
          }
          case 74: {
            global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_DarwinScore>();
            if (eventDataCase_ == EventDataOneofCase.Darwinscore) {
              subBuilder.MergeFrom(Darwinscore);
            }
            input.ReadMessage(subBuilder);
            Darwinscore = subBuilder;
            break;
          }
          case 82: {
            global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster subBuilder = pb.ProtobufManager.New<global::Pb.B2C_WorldEvent.Types.B2C_GlobalMonster>();
            if (eventDataCase_ == EventDataOneofCase.Globalmonster) {
              subBuilder.MergeFrom(Globalmonster);
            }
            input.ReadMessage(subBuilder);
            Globalmonster = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_WorldEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class B2C_KillInfo : pb::IMessage<B2C_KillInfo> {
        private static readonly pb::MessageParser<B2C_KillInfo> _parser = new pb::MessageParser<B2C_KillInfo>(() => pb.ProtobufManager.New<B2C_KillInfo>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_KillInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Killer = 0;
          Killed = 0;
          Hitdown = false;
          Reason = 0;
          Id = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillInfo(B2C_KillInfo other) : this() {
          killer_ = other.killer_;
          killed_ = other.killed_;
          hitdown_ = other.hitdown_;
          reason_ = other.reason_;
          id_ = other.id_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_KillInfo Clone() {
          return new B2C_KillInfo(this);
        }

        /// <summary>Field number for the "killer" field.</summary>
        public const int KillerFieldNumber = 1;
        private ulong killer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Killer {
          get { return killer_; }
          set {
            killer_ = value;
          }
        }

        /// <summary>Field number for the "killed" field.</summary>
        public const int KilledFieldNumber = 2;
        private ulong killed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Killed {
          get { return killed_; }
          set {
            killed_ = value;
          }
        }

        /// <summary>Field number for the "hitdown" field.</summary>
        public const int HitdownFieldNumber = 3;
        private bool hitdown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Hitdown {
          get { return hitdown_; }
          set {
            hitdown_ = value;
          }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 4;
        private global::Pb.KillReason reason_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.KillReason Reason {
          get { return reason_; }
          set {
            reason_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 5;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_KillInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_KillInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Killer != other.Killer) return false;
          if (Killed != other.Killed) return false;
          if (Hitdown != other.Hitdown) return false;
          if (Reason != other.Reason) return false;
          if (Id != other.Id) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Killer != 0UL) hash ^= Killer.GetHashCode();
          if (Killed != 0UL) hash ^= Killed.GetHashCode();
          if (Hitdown != false) hash ^= Hitdown.GetHashCode();
          if (Reason != 0) hash ^= Reason.GetHashCode();
          if (Id != 0) hash ^= Id.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Killer != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Killer);
          }
          if (Killed != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Killed);
          }
          if (Hitdown != false) {
            output.WriteRawTag(24);
            output.WriteBool(Hitdown);
          }
          if (Reason != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Reason);
          }
          if (Id != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Id);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Killer != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Killer);
          }
          if (Killed != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Killed);
          }
          if (Hitdown != false) {
            size += 1 + 1;
          }
          if (Reason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_KillInfo other) {
          if (other == null) {
            return;
          }
          if (other.Killer != 0UL) {
            Killer = other.Killer;
          }
          if (other.Killed != 0UL) {
            Killed = other.Killed;
          }
          if (other.Hitdown != false) {
            Hitdown = other.Hitdown;
          }
          if (other.Reason != 0) {
            Reason = other.Reason;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Killer = input.ReadUInt64();
                break;
              }
              case 16: {
                Killed = input.ReadUInt64();
                break;
              }
              case 24: {
                Hitdown = input.ReadBool();
                break;
              }
              case 32: {
                reason_ = (global::Pb.KillReason) input.ReadEnum();
                break;
              }
              case 40: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_AttackVoice : pb::IMessage<B2C_AttackVoice> {
        private static readonly pb::MessageParser<B2C_AttackVoice> _parser = new pb::MessageParser<B2C_AttackVoice>(() => pb.ProtobufManager.New<B2C_AttackVoice>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_AttackVoice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AttackVoice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Attacker = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(attpos_);
          attpos_ = null;
          Skillid = 0;
          Suppressor = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AttackVoice(B2C_AttackVoice other) : this() {
          attacker_ = other.attacker_;
          Attpos = other.attpos_ != null ? other.Attpos.Clone() : null;
          skillid_ = other.skillid_;
          suppressor_ = other.suppressor_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_AttackVoice Clone() {
          return new B2C_AttackVoice(this);
        }

        /// <summary>Field number for the "attacker" field.</summary>
        public const int AttackerFieldNumber = 1;
        private ulong attacker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Attacker {
          get { return attacker_; }
          set {
            attacker_ = value;
          }
        }

        /// <summary>Field number for the "attpos" field.</summary>
        public const int AttposFieldNumber = 2;
        private global::Pb.Vector3PB attpos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Attpos {
          get { return attpos_; }
          set {
            attpos_ = value;
          }
        }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 3;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "suppressor" field.</summary>
        public const int SuppressorFieldNumber = 4;
        private float suppressor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Suppressor {
          get { return suppressor_; }
          set {
            suppressor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_AttackVoice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_AttackVoice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Attacker != other.Attacker) return false;
          if (!object.Equals(Attpos, other.Attpos)) return false;
          if (Skillid != other.Skillid) return false;
          if (Suppressor != other.Suppressor) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Attacker != 0UL) hash ^= Attacker.GetHashCode();
          if (attpos_ != null) hash ^= Attpos.GetHashCode();
          if (Skillid != 0) hash ^= Skillid.GetHashCode();
          if (Suppressor != 0F) hash ^= Suppressor.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Attacker != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Attacker);
          }
          if (attpos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Attpos);
          }
          if (Skillid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Skillid);
          }
          if (Suppressor != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Suppressor);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Attacker != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Attacker);
          }
          if (attpos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attpos);
          }
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Suppressor != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_AttackVoice other) {
          if (other == null) {
            return;
          }
          if (other.Attacker != 0UL) {
            Attacker = other.Attacker;
          }
          if (other.attpos_ != null) {
            if (attpos_ == null) {
              attpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Attpos.MergeFrom(other.Attpos);
          }
          if (other.Skillid != 0) {
            Skillid = other.Skillid;
          }
          if (other.Suppressor != 0F) {
            Suppressor = other.Suppressor;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Attacker = input.ReadUInt64();
                break;
              }
              case 18: {
                if (attpos_ == null) {
                  attpos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(attpos_);
                break;
              }
              case 24: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 37: {
                Suppressor = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_OpBlast : pb::IMessage<B2C_OpBlast> {
        private static readonly pb::MessageParser<B2C_OpBlast> _parser = new pb::MessageParser<B2C_OpBlast>(() => pb.ProtobufManager.New<B2C_OpBlast>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_OpBlast> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OpBlast() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Entityid = 0;
          Open = false;
          Temaid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OpBlast(B2C_OpBlast other) : this() {
          entityid_ = other.entityid_;
          open_ = other.open_;
          temaid_ = other.temaid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_OpBlast Clone() {
          return new B2C_OpBlast(this);
        }

        /// <summary>Field number for the "entityid" field.</summary>
        public const int EntityidFieldNumber = 1;
        private ulong entityid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Entityid {
          get { return entityid_; }
          set {
            entityid_ = value;
          }
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 2;
        private bool open_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        /// <summary>Field number for the "temaid" field.</summary>
        public const int TemaidFieldNumber = 3;
        private uint temaid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Temaid {
          get { return temaid_; }
          set {
            temaid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_OpBlast);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_OpBlast other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Entityid != other.Entityid) return false;
          if (Open != other.Open) return false;
          if (Temaid != other.Temaid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Entityid != 0UL) hash ^= Entityid.GetHashCode();
          if (Open != false) hash ^= Open.GetHashCode();
          if (Temaid != 0) hash ^= Temaid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Entityid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Entityid);
          }
          if (Open != false) {
            output.WriteRawTag(16);
            output.WriteBool(Open);
          }
          if (Temaid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Temaid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Entityid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entityid);
          }
          if (Open != false) {
            size += 1 + 1;
          }
          if (Temaid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Temaid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_OpBlast other) {
          if (other == null) {
            return;
          }
          if (other.Entityid != 0UL) {
            Entityid = other.Entityid;
          }
          if (other.Open != false) {
            Open = other.Open;
          }
          if (other.Temaid != 0) {
            Temaid = other.Temaid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Entityid = input.ReadUInt64();
                break;
              }
              case 16: {
                Open = input.ReadBool();
                break;
              }
              case 24: {
                Temaid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SceneTriggerActive : pb::IMessage<B2C_SceneTriggerActive> {
        private static readonly pb::MessageParser<B2C_SceneTriggerActive> _parser = new pb::MessageParser<B2C_SceneTriggerActive>(() => pb.ProtobufManager.New<B2C_SceneTriggerActive>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SceneTriggerActive> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActive() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Scenetriggerid = 0;
          Triggerid = 0;
          Active = false;
          Visible = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActive(B2C_SceneTriggerActive other) : this() {
          scenetriggerid_ = other.scenetriggerid_;
          triggerid_ = other.triggerid_;
          active_ = other.active_;
          visible_ = other.visible_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActive Clone() {
          return new B2C_SceneTriggerActive(this);
        }

        /// <summary>Field number for the "scenetriggerid" field.</summary>
        public const int ScenetriggeridFieldNumber = 1;
        private uint scenetriggerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Scenetriggerid {
          get { return scenetriggerid_; }
          set {
            scenetriggerid_ = value;
          }
        }

        /// <summary>Field number for the "triggerid" field.</summary>
        public const int TriggeridFieldNumber = 2;
        private uint triggerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Triggerid {
          get { return triggerid_; }
          set {
            triggerid_ = value;
          }
        }

        /// <summary>Field number for the "active" field.</summary>
        public const int ActiveFieldNumber = 3;
        private bool active_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Active {
          get { return active_; }
          set {
            active_ = value;
          }
        }

        /// <summary>Field number for the "visible" field.</summary>
        public const int VisibleFieldNumber = 4;
        private bool visible_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Visible {
          get { return visible_; }
          set {
            visible_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SceneTriggerActive);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SceneTriggerActive other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Scenetriggerid != other.Scenetriggerid) return false;
          if (Triggerid != other.Triggerid) return false;
          if (Active != other.Active) return false;
          if (Visible != other.Visible) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Scenetriggerid != 0) hash ^= Scenetriggerid.GetHashCode();
          if (Triggerid != 0) hash ^= Triggerid.GetHashCode();
          if (Active != false) hash ^= Active.GetHashCode();
          if (Visible != false) hash ^= Visible.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Scenetriggerid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Scenetriggerid);
          }
          if (Triggerid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Triggerid);
          }
          if (Active != false) {
            output.WriteRawTag(24);
            output.WriteBool(Active);
          }
          if (Visible != false) {
            output.WriteRawTag(32);
            output.WriteBool(Visible);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Scenetriggerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scenetriggerid);
          }
          if (Triggerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Triggerid);
          }
          if (Active != false) {
            size += 1 + 1;
          }
          if (Visible != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SceneTriggerActive other) {
          if (other == null) {
            return;
          }
          if (other.Scenetriggerid != 0) {
            Scenetriggerid = other.Scenetriggerid;
          }
          if (other.Triggerid != 0) {
            Triggerid = other.Triggerid;
          }
          if (other.Active != false) {
            Active = other.Active;
          }
          if (other.Visible != false) {
            Visible = other.Visible;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Scenetriggerid = input.ReadUInt32();
                break;
              }
              case 16: {
                Triggerid = input.ReadUInt32();
                break;
              }
              case 24: {
                Active = input.ReadBool();
                break;
              }
              case 32: {
                Visible = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SignalTower : pb::IMessage<B2C_SignalTower> {
        private static readonly pb::MessageParser<B2C_SignalTower> _parser = new pb::MessageParser<B2C_SignalTower>(() => pb.ProtobufManager.New<B2C_SignalTower>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SignalTower> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SignalTower() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Triggerid = 0;
          Status = 0;
          OwnerTeam = 0;
          InCircleTime = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SignalTower(B2C_SignalTower other) : this() {
          triggerid_ = other.triggerid_;
          status_ = other.status_;
          ownerTeam_ = other.ownerTeam_;
          inCircleTime_ = other.inCircleTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SignalTower Clone() {
          return new B2C_SignalTower(this);
        }

        /// <summary>Field number for the "triggerid" field.</summary>
        public const int TriggeridFieldNumber = 1;
        private uint triggerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Triggerid {
          get { return triggerid_; }
          set {
            triggerid_ = value;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 2;
        private global::Pb.SignalTowerState status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.SignalTowerState Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "ownerTeam" field.</summary>
        public const int OwnerTeamFieldNumber = 3;
        private uint ownerTeam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OwnerTeam {
          get { return ownerTeam_; }
          set {
            ownerTeam_ = value;
          }
        }

        /// <summary>Field number for the "inCircleTime" field.</summary>
        public const int InCircleTimeFieldNumber = 4;
        private uint inCircleTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InCircleTime {
          get { return inCircleTime_; }
          set {
            inCircleTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SignalTower);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SignalTower other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Triggerid != other.Triggerid) return false;
          if (Status != other.Status) return false;
          if (OwnerTeam != other.OwnerTeam) return false;
          if (InCircleTime != other.InCircleTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Triggerid != 0) hash ^= Triggerid.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          if (OwnerTeam != 0) hash ^= OwnerTeam.GetHashCode();
          if (InCircleTime != 0) hash ^= InCircleTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Triggerid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Triggerid);
          }
          if (Status != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Status);
          }
          if (OwnerTeam != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(OwnerTeam);
          }
          if (InCircleTime != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(InCircleTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Triggerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Triggerid);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (OwnerTeam != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerTeam);
          }
          if (InCircleTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InCircleTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SignalTower other) {
          if (other == null) {
            return;
          }
          if (other.Triggerid != 0) {
            Triggerid = other.Triggerid;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.OwnerTeam != 0) {
            OwnerTeam = other.OwnerTeam;
          }
          if (other.InCircleTime != 0) {
            InCircleTime = other.InCircleTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Triggerid = input.ReadUInt32();
                break;
              }
              case 16: {
                status_ = (global::Pb.SignalTowerState) input.ReadEnum();
                break;
              }
              case 24: {
                OwnerTeam = input.ReadUInt32();
                break;
              }
              case 32: {
                InCircleTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_SceneTriggerActiveWarning : pb::IMessage<B2C_SceneTriggerActiveWarning> {
        private static readonly pb::MessageParser<B2C_SceneTriggerActiveWarning> _parser = new pb::MessageParser<B2C_SceneTriggerActiveWarning>(() => pb.ProtobufManager.New<B2C_SceneTriggerActiveWarning>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_SceneTriggerActiveWarning> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActiveWarning() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Scenetriggerid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActiveWarning(B2C_SceneTriggerActiveWarning other) : this() {
          scenetriggerid_ = other.scenetriggerid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_SceneTriggerActiveWarning Clone() {
          return new B2C_SceneTriggerActiveWarning(this);
        }

        /// <summary>Field number for the "scenetriggerid" field.</summary>
        public const int ScenetriggeridFieldNumber = 1;
        private uint scenetriggerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Scenetriggerid {
          get { return scenetriggerid_; }
          set {
            scenetriggerid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_SceneTriggerActiveWarning);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_SceneTriggerActiveWarning other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Scenetriggerid != other.Scenetriggerid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Scenetriggerid != 0) hash ^= Scenetriggerid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Scenetriggerid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Scenetriggerid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Scenetriggerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scenetriggerid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_SceneTriggerActiveWarning other) {
          if (other == null) {
            return;
          }
          if (other.Scenetriggerid != 0) {
            Scenetriggerid = other.Scenetriggerid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Scenetriggerid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_MonsterWarning : pb::IMessage<B2C_MonsterWarning> {
        private static readonly pb::MessageParser<B2C_MonsterWarning> _parser = new pb::MessageParser<B2C_MonsterWarning>(() => pb.ProtobufManager.New<B2C_MonsterWarning>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MonsterWarning> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterWarning() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterWarning(B2C_MonsterWarning other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MonsterWarning Clone() {
          return new B2C_MonsterWarning(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MonsterWarning);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MonsterWarning other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MonsterWarning other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      public sealed partial class B2C_WorldMessage : pb::IMessage<B2C_WorldMessage> {
        private static readonly pb::MessageParser<B2C_WorldMessage> _parser = new pb::MessageParser<B2C_WorldMessage>(() => pb.ProtobufManager.New<B2C_WorldMessage>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_WorldMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WorldMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Messagetype = 0;
          Messagekey = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WorldMessage(B2C_WorldMessage other) : this() {
          messagetype_ = other.messagetype_;
          messagekey_ = other.messagekey_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WorldMessage Clone() {
          return new B2C_WorldMessage(this);
        }

        /// <summary>Field number for the "messagetype" field.</summary>
        public const int MessagetypeFieldNumber = 1;
        private uint messagetype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Messagetype {
          get { return messagetype_; }
          set {
            messagetype_ = value;
          }
        }

        /// <summary>Field number for the "messagekey" field.</summary>
        public const int MessagekeyFieldNumber = 2;
        private string messagekey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Messagekey {
          get { return messagekey_; }
          set {
            messagekey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_WorldMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_WorldMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Messagetype != other.Messagetype) return false;
          if (Messagekey != other.Messagekey) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Messagetype != 0) hash ^= Messagetype.GetHashCode();
          if (Messagekey.Length != 0) hash ^= Messagekey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Messagetype != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Messagetype);
          }
          if (Messagekey.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Messagekey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Messagetype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Messagetype);
          }
          if (Messagekey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Messagekey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_WorldMessage other) {
          if (other == null) {
            return;
          }
          if (other.Messagetype != 0) {
            Messagetype = other.Messagetype;
          }
          if (other.Messagekey.Length != 0) {
            Messagekey = other.Messagekey;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Messagetype = input.ReadUInt32();
                break;
              }
              case 18: {
                Messagekey = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_DarwinScore : pb::IMessage<B2C_DarwinScore> {
        private static readonly pb::MessageParser<B2C_DarwinScore> _parser = new pb::MessageParser<B2C_DarwinScore>(() => pb.ProtobufManager.New<B2C_DarwinScore>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_DarwinScore> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinScore() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.RoleScoreInfo>(scoreInfo_);
          scoreInfo_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinScore(B2C_DarwinScore other) : this() {
          ScoreInfo = other.scoreInfo_ != null ? other.ScoreInfo.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_DarwinScore Clone() {
          return new B2C_DarwinScore(this);
        }

        /// <summary>Field number for the "scoreInfo" field.</summary>
        public const int ScoreInfoFieldNumber = 1;
        private global::Pb.RoleScoreInfo scoreInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.RoleScoreInfo ScoreInfo {
          get { return scoreInfo_; }
          set {
            scoreInfo_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_DarwinScore);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_DarwinScore other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ScoreInfo, other.ScoreInfo)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (scoreInfo_ != null) hash ^= ScoreInfo.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (scoreInfo_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ScoreInfo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (scoreInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScoreInfo);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_DarwinScore other) {
          if (other == null) {
            return;
          }
          if (other.scoreInfo_ != null) {
            if (scoreInfo_ == null) {
              scoreInfo_ = pb.ProtobufManager.New<global::Pb.RoleScoreInfo>();
            }
            ScoreInfo.MergeFrom(other.ScoreInfo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (scoreInfo_ == null) {
                  scoreInfo_ = pb.ProtobufManager.New<global::Pb.RoleScoreInfo>();
                }
                input.ReadMessage(scoreInfo_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_GlobalMonster : pb::IMessage<B2C_GlobalMonster> {
        private static readonly pb::MessageParser<B2C_GlobalMonster> _parser = new pb::MessageParser<B2C_GlobalMonster>(() => pb.ProtobufManager.New<B2C_GlobalMonster>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_GlobalMonster> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_WorldEvent.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GlobalMonster() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Monid = 0;
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GlobalMonster(B2C_GlobalMonster other) : this() {
          monid_ = other.monid_;
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_GlobalMonster Clone() {
          return new B2C_GlobalMonster(this);
        }

        /// <summary>Field number for the "monid" field.</summary>
        public const int MonidFieldNumber = 1;
        private uint monid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Monid {
          get { return monid_; }
          set {
            monid_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 2;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_GlobalMonster);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_GlobalMonster other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Monid != other.Monid) return false;
          if (!object.Equals(Pos, other.Pos)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Monid != 0) hash ^= Monid.GetHashCode();
          if (pos_ != null) hash ^= Pos.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Monid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Monid);
          }
          if (pos_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Pos);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Monid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Monid);
          }
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_GlobalMonster other) {
          if (other == null) {
            return;
          }
          if (other.Monid != 0) {
            Monid = other.Monid;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Monid = input.ReadUInt32();
                break;
              }
              case 18: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class B2C_WorldDirty : pb::IMessage<B2C_WorldDirty> {
    private static readonly pb::MessageParser<B2C_WorldDirty> _parser = new pb::MessageParser<B2C_WorldDirty>(() => pb.ProtobufManager.New<B2C_WorldDirty>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_WorldDirty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldDirty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < worldData_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldData>(worldData_[i]);
      }
      worldData_.Clear();
      for (int i = 0; i < worldEvent_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldEvent>(worldEvent_[i]);
      }
      worldEvent_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldDirty(B2C_WorldDirty other) : this() {
      worldData_ = other.worldData_.Clone();
      worldEvent_ = other.worldEvent_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_WorldDirty Clone() {
      return new B2C_WorldDirty(this);
    }

    /// <summary>Field number for the "worldData" field.</summary>
    public const int WorldDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.B2C_WorldData> _repeated_worldData_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.B2C_WorldData.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_WorldData> worldData_ = new pbc::RepeatedField<global::Pb.B2C_WorldData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_WorldData> WorldData {
      get { return worldData_; }
    }

    /// <summary>Field number for the "worldEvent" field.</summary>
    public const int WorldEventFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.B2C_WorldEvent> _repeated_worldEvent_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.B2C_WorldEvent.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_WorldEvent> worldEvent_ = new pbc::RepeatedField<global::Pb.B2C_WorldEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_WorldEvent> WorldEvent {
      get { return worldEvent_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_WorldDirty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_WorldDirty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!worldData_.Equals(other.worldData_)) return false;
      if(!worldEvent_.Equals(other.worldEvent_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= worldData_.GetHashCode();
      hash ^= worldEvent_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      worldData_.WriteTo(output, _repeated_worldData_codec);
      worldEvent_.WriteTo(output, _repeated_worldEvent_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += worldData_.CalculateSize(_repeated_worldData_codec);
      size += worldEvent_.CalculateSize(_repeated_worldEvent_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_WorldDirty other) {
      if (other == null) {
        return;
      }
      worldData_.Add(other.worldData_);
      worldEvent_.Add(other.worldEvent_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            worldData_.AddEntriesFrom(input, _repeated_worldData_codec);
            break;
          }
          case 18: {
            worldEvent_.AddEntriesFrom(input, _repeated_worldEvent_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_TeamData : pb::IMessage<B2C_TeamData> {
    private static readonly pb::MessageParser<B2C_TeamData> _parser = new pb::MessageParser<B2C_TeamData>(() => pb.ProtobufManager.New<B2C_TeamData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_TeamData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (StateDataCase) {
        case StateDataOneofCase.Markpoint:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_MarkPoint>(Markpoint);
          Markpoint = null;
          break;
        case StateDataOneofCase.Pos:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_TeamerPos>(Pos);
          Pos = null;
          break;
        case StateDataOneofCase.Hp:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_Hp>(Hp);
          Hp = null;
          break;
        case StateDataOneofCase.Rotation:
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(Rotation);
          Rotation = null;
          break;
        case StateDataOneofCase.Live:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_Live>(Live);
          Live = null;
          break;
        case StateDataOneofCase.Shareitem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_ShareItem>(Shareitem);
          Shareitem = null;
          break;
        case StateDataOneofCase.Pickshareitem:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_PickShareItem>(Pickshareitem);
          Pickshareitem = null;
          break;
        case StateDataOneofCase.Netstate:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_NetState>(Netstate);
          Netstate = null;
          break;
        case StateDataOneofCase.Shield:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_Shield>(Shield);
          Shield = null;
          break;
        case StateDataOneofCase.Killmon:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_TeamKillMon>(Killmon);
          Killmon = null;
          break;
        case StateDataOneofCase.Npcs:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc>(Npcs);
          Npcs = null;
          break;
        case StateDataOneofCase.Energy:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_Energy>(Energy);
          Energy = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamData(B2C_TeamData other) : this() {
      switch (other.StateDataCase) {
        case StateDataOneofCase.Markpoint:
          Markpoint = other.Markpoint.Clone();
          break;
        case StateDataOneofCase.Pos:
          Pos = other.Pos.Clone();
          break;
        case StateDataOneofCase.Hp:
          Hp = other.Hp.Clone();
          break;
        case StateDataOneofCase.Rotation:
          Rotation = other.Rotation.Clone();
          break;
        case StateDataOneofCase.Live:
          Live = other.Live.Clone();
          break;
        case StateDataOneofCase.Shareitem:
          Shareitem = other.Shareitem.Clone();
          break;
        case StateDataOneofCase.Pickshareitem:
          Pickshareitem = other.Pickshareitem.Clone();
          break;
        case StateDataOneofCase.Netstate:
          Netstate = other.Netstate.Clone();
          break;
        case StateDataOneofCase.Shield:
          Shield = other.Shield.Clone();
          break;
        case StateDataOneofCase.Killmon:
          Killmon = other.Killmon.Clone();
          break;
        case StateDataOneofCase.Npcs:
          Npcs = other.Npcs.Clone();
          break;
        case StateDataOneofCase.Energy:
          Energy = other.Energy.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamData Clone() {
      return new B2C_TeamData(this);
    }

    /// <summary>Field number for the "markpoint" field.</summary>
    public const int MarkpointFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_MarkPoint Markpoint {
      get { return stateDataCase_ == StateDataOneofCase.Markpoint ? (global::Pb.B2C_TeamData.Types.B2C_MarkPoint) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Markpoint;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_TeamerPos Pos {
      get { return stateDataCase_ == StateDataOneofCase.Pos ? (global::Pb.B2C_TeamData.Types.B2C_TeamerPos) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Pos;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_Hp Hp {
      get { return stateDataCase_ == StateDataOneofCase.Hp ? (global::Pb.B2C_TeamData.Types.B2C_Hp) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Hp;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Vector3PB Rotation {
      get { return stateDataCase_ == StateDataOneofCase.Rotation ? (global::Pb.Vector3PB) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Rotation;
      }
    }

    /// <summary>Field number for the "live" field.</summary>
    public const int LiveFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_Live Live {
      get { return stateDataCase_ == StateDataOneofCase.Live ? (global::Pb.B2C_TeamData.Types.B2C_Live) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Live;
      }
    }

    /// <summary>Field number for the "shareitem" field.</summary>
    public const int ShareitemFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_ShareItem Shareitem {
      get { return stateDataCase_ == StateDataOneofCase.Shareitem ? (global::Pb.B2C_TeamData.Types.B2C_ShareItem) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Shareitem;
      }
    }

    /// <summary>Field number for the "pickshareitem" field.</summary>
    public const int PickshareitemFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_PickShareItem Pickshareitem {
      get { return stateDataCase_ == StateDataOneofCase.Pickshareitem ? (global::Pb.B2C_TeamData.Types.B2C_PickShareItem) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Pickshareitem;
      }
    }

    /// <summary>Field number for the "netstate" field.</summary>
    public const int NetstateFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_NetState Netstate {
      get { return stateDataCase_ == StateDataOneofCase.Netstate ? (global::Pb.B2C_TeamData.Types.B2C_NetState) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Netstate;
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_Shield Shield {
      get { return stateDataCase_ == StateDataOneofCase.Shield ? (global::Pb.B2C_TeamData.Types.B2C_Shield) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Shield;
      }
    }

    /// <summary>Field number for the "killmon" field.</summary>
    public const int KillmonFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_TeamKillMon Killmon {
      get { return stateDataCase_ == StateDataOneofCase.Killmon ? (global::Pb.B2C_TeamData.Types.B2C_TeamKillMon) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Killmon;
      }
    }

    /// <summary>Field number for the "npcs" field.</summary>
    public const int NpcsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_VisibleNpc Npcs {
      get { return stateDataCase_ == StateDataOneofCase.Npcs ? (global::Pb.B2C_TeamData.Types.B2C_VisibleNpc) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Npcs;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_TeamData.Types.B2C_Energy Energy {
      get { return stateDataCase_ == StateDataOneofCase.Energy ? (global::Pb.B2C_TeamData.Types.B2C_Energy) stateData_ : null; }
      set {
        stateData_ = value;
        stateDataCase_ = value == null ? StateDataOneofCase.None : StateDataOneofCase.Energy;
      }
    }

    private object stateData_;
    /// <summary>Enum of possible cases for the "StateData" oneof.</summary>
    public enum StateDataOneofCase {
      None = 0,
      Markpoint = 1,
      Pos = 2,
      Hp = 3,
      Rotation = 4,
      Live = 5,
      Shareitem = 6,
      Pickshareitem = 7,
      Netstate = 8,
      Shield = 9,
      Killmon = 10,
      Npcs = 11,
      Energy = 12,
    }
    private StateDataOneofCase stateDataCase_ = StateDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateDataOneofCase StateDataCase {
      get { return stateDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateData() {
      stateDataCase_ = StateDataOneofCase.None;
      stateData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_TeamData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_TeamData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Markpoint, other.Markpoint)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Hp, other.Hp)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Live, other.Live)) return false;
      if (!object.Equals(Shareitem, other.Shareitem)) return false;
      if (!object.Equals(Pickshareitem, other.Pickshareitem)) return false;
      if (!object.Equals(Netstate, other.Netstate)) return false;
      if (!object.Equals(Shield, other.Shield)) return false;
      if (!object.Equals(Killmon, other.Killmon)) return false;
      if (!object.Equals(Npcs, other.Npcs)) return false;
      if (!object.Equals(Energy, other.Energy)) return false;
      if (StateDataCase != other.StateDataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stateDataCase_ == StateDataOneofCase.Markpoint) hash ^= Markpoint.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Pos) hash ^= Pos.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Hp) hash ^= Hp.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Rotation) hash ^= Rotation.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Live) hash ^= Live.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Shareitem) hash ^= Shareitem.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Pickshareitem) hash ^= Pickshareitem.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Netstate) hash ^= Netstate.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Shield) hash ^= Shield.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Killmon) hash ^= Killmon.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Npcs) hash ^= Npcs.GetHashCode();
      if (stateDataCase_ == StateDataOneofCase.Energy) hash ^= Energy.GetHashCode();
      hash ^= (int) stateDataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stateDataCase_ == StateDataOneofCase.Markpoint) {
        output.WriteRawTag(10);
        output.WriteMessage(Markpoint);
      }
      if (stateDataCase_ == StateDataOneofCase.Pos) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (stateDataCase_ == StateDataOneofCase.Hp) {
        output.WriteRawTag(26);
        output.WriteMessage(Hp);
      }
      if (stateDataCase_ == StateDataOneofCase.Rotation) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (stateDataCase_ == StateDataOneofCase.Live) {
        output.WriteRawTag(42);
        output.WriteMessage(Live);
      }
      if (stateDataCase_ == StateDataOneofCase.Shareitem) {
        output.WriteRawTag(50);
        output.WriteMessage(Shareitem);
      }
      if (stateDataCase_ == StateDataOneofCase.Pickshareitem) {
        output.WriteRawTag(58);
        output.WriteMessage(Pickshareitem);
      }
      if (stateDataCase_ == StateDataOneofCase.Netstate) {
        output.WriteRawTag(66);
        output.WriteMessage(Netstate);
      }
      if (stateDataCase_ == StateDataOneofCase.Shield) {
        output.WriteRawTag(74);
        output.WriteMessage(Shield);
      }
      if (stateDataCase_ == StateDataOneofCase.Killmon) {
        output.WriteRawTag(82);
        output.WriteMessage(Killmon);
      }
      if (stateDataCase_ == StateDataOneofCase.Npcs) {
        output.WriteRawTag(90);
        output.WriteMessage(Npcs);
      }
      if (stateDataCase_ == StateDataOneofCase.Energy) {
        output.WriteRawTag(98);
        output.WriteMessage(Energy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stateDataCase_ == StateDataOneofCase.Markpoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Markpoint);
      }
      if (stateDataCase_ == StateDataOneofCase.Pos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (stateDataCase_ == StateDataOneofCase.Hp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hp);
      }
      if (stateDataCase_ == StateDataOneofCase.Rotation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (stateDataCase_ == StateDataOneofCase.Live) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Live);
      }
      if (stateDataCase_ == StateDataOneofCase.Shareitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shareitem);
      }
      if (stateDataCase_ == StateDataOneofCase.Pickshareitem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pickshareitem);
      }
      if (stateDataCase_ == StateDataOneofCase.Netstate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Netstate);
      }
      if (stateDataCase_ == StateDataOneofCase.Shield) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shield);
      }
      if (stateDataCase_ == StateDataOneofCase.Killmon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Killmon);
      }
      if (stateDataCase_ == StateDataOneofCase.Npcs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Npcs);
      }
      if (stateDataCase_ == StateDataOneofCase.Energy) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Energy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_TeamData other) {
      if (other == null) {
        return;
      }
      switch (other.StateDataCase) {
        case StateDataOneofCase.Markpoint:
          Markpoint = other.Markpoint;
          break;
        case StateDataOneofCase.Pos:
          Pos = other.Pos;
          break;
        case StateDataOneofCase.Hp:
          Hp = other.Hp;
          break;
        case StateDataOneofCase.Rotation:
          Rotation = other.Rotation;
          break;
        case StateDataOneofCase.Live:
          Live = other.Live;
          break;
        case StateDataOneofCase.Shareitem:
          Shareitem = other.Shareitem;
          break;
        case StateDataOneofCase.Pickshareitem:
          Pickshareitem = other.Pickshareitem;
          break;
        case StateDataOneofCase.Netstate:
          Netstate = other.Netstate;
          break;
        case StateDataOneofCase.Shield:
          Shield = other.Shield;
          break;
        case StateDataOneofCase.Killmon:
          Killmon = other.Killmon;
          break;
        case StateDataOneofCase.Npcs:
          Npcs = other.Npcs;
          break;
        case StateDataOneofCase.Energy:
          Energy = other.Energy;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.B2C_TeamData.Types.B2C_MarkPoint subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_MarkPoint>();
            if (stateDataCase_ == StateDataOneofCase.Markpoint) {
              subBuilder.MergeFrom(Markpoint);
            }
            input.ReadMessage(subBuilder);
            Markpoint = subBuilder;
            break;
          }
          case 18: {
            global::Pb.B2C_TeamData.Types.B2C_TeamerPos subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_TeamerPos>();
            if (stateDataCase_ == StateDataOneofCase.Pos) {
              subBuilder.MergeFrom(Pos);
            }
            input.ReadMessage(subBuilder);
            Pos = subBuilder;
            break;
          }
          case 26: {
            global::Pb.B2C_TeamData.Types.B2C_Hp subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_Hp>();
            if (stateDataCase_ == StateDataOneofCase.Hp) {
              subBuilder.MergeFrom(Hp);
            }
            input.ReadMessage(subBuilder);
            Hp = subBuilder;
            break;
          }
          case 34: {
            global::Pb.Vector3PB subBuilder = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            if (stateDataCase_ == StateDataOneofCase.Rotation) {
              subBuilder.MergeFrom(Rotation);
            }
            input.ReadMessage(subBuilder);
            Rotation = subBuilder;
            break;
          }
          case 42: {
            global::Pb.B2C_TeamData.Types.B2C_Live subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_Live>();
            if (stateDataCase_ == StateDataOneofCase.Live) {
              subBuilder.MergeFrom(Live);
            }
            input.ReadMessage(subBuilder);
            Live = subBuilder;
            break;
          }
          case 50: {
            global::Pb.B2C_TeamData.Types.B2C_ShareItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_ShareItem>();
            if (stateDataCase_ == StateDataOneofCase.Shareitem) {
              subBuilder.MergeFrom(Shareitem);
            }
            input.ReadMessage(subBuilder);
            Shareitem = subBuilder;
            break;
          }
          case 58: {
            global::Pb.B2C_TeamData.Types.B2C_PickShareItem subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_PickShareItem>();
            if (stateDataCase_ == StateDataOneofCase.Pickshareitem) {
              subBuilder.MergeFrom(Pickshareitem);
            }
            input.ReadMessage(subBuilder);
            Pickshareitem = subBuilder;
            break;
          }
          case 66: {
            global::Pb.B2C_TeamData.Types.B2C_NetState subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_NetState>();
            if (stateDataCase_ == StateDataOneofCase.Netstate) {
              subBuilder.MergeFrom(Netstate);
            }
            input.ReadMessage(subBuilder);
            Netstate = subBuilder;
            break;
          }
          case 74: {
            global::Pb.B2C_TeamData.Types.B2C_Shield subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_Shield>();
            if (stateDataCase_ == StateDataOneofCase.Shield) {
              subBuilder.MergeFrom(Shield);
            }
            input.ReadMessage(subBuilder);
            Shield = subBuilder;
            break;
          }
          case 82: {
            global::Pb.B2C_TeamData.Types.B2C_TeamKillMon subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_TeamKillMon>();
            if (stateDataCase_ == StateDataOneofCase.Killmon) {
              subBuilder.MergeFrom(Killmon);
            }
            input.ReadMessage(subBuilder);
            Killmon = subBuilder;
            break;
          }
          case 90: {
            global::Pb.B2C_TeamData.Types.B2C_VisibleNpc subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc>();
            if (stateDataCase_ == StateDataOneofCase.Npcs) {
              subBuilder.MergeFrom(Npcs);
            }
            input.ReadMessage(subBuilder);
            Npcs = subBuilder;
            break;
          }
          case 98: {
            global::Pb.B2C_TeamData.Types.B2C_Energy subBuilder = pb.ProtobufManager.New<global::Pb.B2C_TeamData.Types.B2C_Energy>();
            if (stateDataCase_ == StateDataOneofCase.Energy) {
              subBuilder.MergeFrom(Energy);
            }
            input.ReadMessage(subBuilder);
            Energy = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_TeamData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class B2C_MarkPoint : pb::IMessage<B2C_MarkPoint> {
        private static readonly pb::MessageParser<B2C_MarkPoint> _parser = new pb::MessageParser<B2C_MarkPoint>(() => pb.ProtobufManager.New<B2C_MarkPoint>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_MarkPoint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MarkPoint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          X = 0;
          Y = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MarkPoint(B2C_MarkPoint other) : this() {
          x_ = other.x_;
          y_ = other.y_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_MarkPoint Clone() {
          return new B2C_MarkPoint(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_MarkPoint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_MarkPoint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= X.GetHashCode();
          if (Y != 0F) hash ^= Y.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_MarkPoint other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Hp : pb::IMessage<B2C_Hp> {
        private static readonly pb::MessageParser<B2C_Hp> _parser = new pb::MessageParser<B2C_Hp>(() => pb.ProtobufManager.New<B2C_Hp>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Hp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Hp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Hp = 0;
          Maxhp = 0;
          Weakhp = 0;
          Maxweakhp = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Hp(B2C_Hp other) : this() {
          hp_ = other.hp_;
          maxhp_ = other.maxhp_;
          weakhp_ = other.weakhp_;
          maxweakhp_ = other.maxweakhp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Hp Clone() {
          return new B2C_Hp(this);
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 1;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "maxhp" field.</summary>
        public const int MaxhpFieldNumber = 2;
        private int maxhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxhp {
          get { return maxhp_; }
          set {
            maxhp_ = value;
          }
        }

        /// <summary>Field number for the "weakhp" field.</summary>
        public const int WeakhpFieldNumber = 3;
        private int weakhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Weakhp {
          get { return weakhp_; }
          set {
            weakhp_ = value;
          }
        }

        /// <summary>Field number for the "maxweakhp" field.</summary>
        public const int MaxweakhpFieldNumber = 4;
        private int maxweakhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxweakhp {
          get { return maxweakhp_; }
          set {
            maxweakhp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Hp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Hp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hp != other.Hp) return false;
          if (Maxhp != other.Maxhp) return false;
          if (Weakhp != other.Weakhp) return false;
          if (Maxweakhp != other.Maxweakhp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hp != 0) hash ^= Hp.GetHashCode();
          if (Maxhp != 0) hash ^= Maxhp.GetHashCode();
          if (Weakhp != 0) hash ^= Weakhp.GetHashCode();
          if (Maxweakhp != 0) hash ^= Maxweakhp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hp != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Hp);
          }
          if (Maxhp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Maxhp);
          }
          if (Weakhp != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Weakhp);
          }
          if (Maxweakhp != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Maxweakhp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
          }
          if (Maxhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxhp);
          }
          if (Weakhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weakhp);
          }
          if (Maxweakhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxweakhp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Hp other) {
          if (other == null) {
            return;
          }
          if (other.Hp != 0) {
            Hp = other.Hp;
          }
          if (other.Maxhp != 0) {
            Maxhp = other.Maxhp;
          }
          if (other.Weakhp != 0) {
            Weakhp = other.Weakhp;
          }
          if (other.Maxweakhp != 0) {
            Maxweakhp = other.Maxweakhp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Hp = input.ReadInt32();
                break;
              }
              case 16: {
                Maxhp = input.ReadInt32();
                break;
              }
              case 24: {
                Weakhp = input.ReadInt32();
                break;
              }
              case 32: {
                Maxweakhp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Live : pb::IMessage<B2C_Live> {
        private static readonly pb::MessageParser<B2C_Live> _parser = new pb::MessageParser<B2C_Live>(() => pb.ProtobufManager.New<B2C_Live>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Live> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Live() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Weak = false;
          Live = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Live(B2C_Live other) : this() {
          weak_ = other.weak_;
          live_ = other.live_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Live Clone() {
          return new B2C_Live(this);
        }

        /// <summary>Field number for the "weak" field.</summary>
        public const int WeakFieldNumber = 1;
        private bool weak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Weak {
          get { return weak_; }
          set {
            weak_ = value;
          }
        }

        /// <summary>Field number for the "live" field.</summary>
        public const int LiveFieldNumber = 2;
        private bool live_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Live {
          get { return live_; }
          set {
            live_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Live);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Live other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Weak != other.Weak) return false;
          if (Live != other.Live) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Weak != false) hash ^= Weak.GetHashCode();
          if (Live != false) hash ^= Live.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Weak != false) {
            output.WriteRawTag(8);
            output.WriteBool(Weak);
          }
          if (Live != false) {
            output.WriteRawTag(16);
            output.WriteBool(Live);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Weak != false) {
            size += 1 + 1;
          }
          if (Live != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Live other) {
          if (other == null) {
            return;
          }
          if (other.Weak != false) {
            Weak = other.Weak;
          }
          if (other.Live != false) {
            Live = other.Live;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Weak = input.ReadBool();
                break;
              }
              case 16: {
                Live = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_ShareItem : pb::IMessage<B2C_ShareItem> {
        private static readonly pb::MessageParser<B2C_ShareItem> _parser = new pb::MessageParser<B2C_ShareItem>(() => pb.ProtobufManager.New<B2C_ShareItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_ShareItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShareItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < items_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.ItemData>(items_[i]);
          }
          items_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShareItem(B2C_ShareItem other) : this() {
          items_ = other.items_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_ShareItem Clone() {
          return new B2C_ShareItem(this);
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.ItemData.Parser);
        private readonly pbc::RepeatedField<global::Pb.ItemData> items_ = new pbc::RepeatedField<global::Pb.ItemData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.ItemData> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_ShareItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_ShareItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!items_.Equals(other.items_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= items_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_ShareItem other) {
          if (other == null) {
            return;
          }
          items_.Add(other.items_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_PickShareItem : pb::IMessage<B2C_PickShareItem> {
        private static readonly pb::MessageParser<B2C_PickShareItem> _parser = new pb::MessageParser<B2C_PickShareItem>(() => pb.ProtobufManager.New<B2C_PickShareItem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_PickShareItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PickShareItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Owner = 0;
          Itemuid = 0;
          Num = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PickShareItem(B2C_PickShareItem other) : this() {
          owner_ = other.owner_;
          itemuid_ = other.itemuid_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_PickShareItem Clone() {
          return new B2C_PickShareItem(this);
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 1;
        private ulong owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "itemuid" field.</summary>
        public const int ItemuidFieldNumber = 2;
        private ulong itemuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Itemuid {
          get { return itemuid_; }
          set {
            itemuid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 3;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_PickShareItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_PickShareItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Owner != other.Owner) return false;
          if (Itemuid != other.Itemuid) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Owner != 0UL) hash ^= Owner.GetHashCode();
          if (Itemuid != 0UL) hash ^= Itemuid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Owner != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Owner);
          }
          if (Itemuid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Itemuid);
          }
          if (Num != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Owner != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Owner);
          }
          if (Itemuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemuid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_PickShareItem other) {
          if (other == null) {
            return;
          }
          if (other.Owner != 0UL) {
            Owner = other.Owner;
          }
          if (other.Itemuid != 0UL) {
            Itemuid = other.Itemuid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Owner = input.ReadUInt64();
                break;
              }
              case 16: {
                Itemuid = input.ReadUInt64();
                break;
              }
              case 24: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_NetState : pb::IMessage<B2C_NetState> {
        private static readonly pb::MessageParser<B2C_NetState> _parser = new pb::MessageParser<B2C_NetState>(() => pb.ProtobufManager.New<B2C_NetState>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_NetState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_NetState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Logout = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_NetState(B2C_NetState other) : this() {
          logout_ = other.logout_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_NetState Clone() {
          return new B2C_NetState(this);
        }

        /// <summary>Field number for the "logout" field.</summary>
        public const int LogoutFieldNumber = 1;
        private bool logout_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Logout {
          get { return logout_; }
          set {
            logout_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_NetState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_NetState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Logout != other.Logout) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Logout != false) hash ^= Logout.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Logout != false) {
            output.WriteRawTag(8);
            output.WriteBool(Logout);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Logout != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_NetState other) {
          if (other == null) {
            return;
          }
          if (other.Logout != false) {
            Logout = other.Logout;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Logout = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_Shield : pb::IMessage<B2C_Shield> {
        private static readonly pb::MessageParser<B2C_Shield> _parser = new pb::MessageParser<B2C_Shield>(() => pb.ProtobufManager.New<B2C_Shield>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Shield> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shield() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Shieldhp = 0;
          Shieldmaxhp = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shield(B2C_Shield other) : this() {
          shieldhp_ = other.shieldhp_;
          shieldmaxhp_ = other.shieldmaxhp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Shield Clone() {
          return new B2C_Shield(this);
        }

        /// <summary>Field number for the "shieldhp" field.</summary>
        public const int ShieldhpFieldNumber = 1;
        private int shieldhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Shieldhp {
          get { return shieldhp_; }
          set {
            shieldhp_ = value;
          }
        }

        /// <summary>Field number for the "shieldmaxhp" field.</summary>
        public const int ShieldmaxhpFieldNumber = 2;
        private int shieldmaxhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Shieldmaxhp {
          get { return shieldmaxhp_; }
          set {
            shieldmaxhp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Shield);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Shield other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Shieldhp != other.Shieldhp) return false;
          if (Shieldmaxhp != other.Shieldmaxhp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Shieldhp != 0) hash ^= Shieldhp.GetHashCode();
          if (Shieldmaxhp != 0) hash ^= Shieldmaxhp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Shieldhp != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Shieldhp);
          }
          if (Shieldmaxhp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Shieldmaxhp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Shieldhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shieldhp);
          }
          if (Shieldmaxhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shieldmaxhp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Shield other) {
          if (other == null) {
            return;
          }
          if (other.Shieldhp != 0) {
            Shieldhp = other.Shieldhp;
          }
          if (other.Shieldmaxhp != 0) {
            Shieldmaxhp = other.Shieldmaxhp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Shieldhp = input.ReadInt32();
                break;
              }
              case 16: {
                Shieldmaxhp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_TeamerPos : pb::IMessage<B2C_TeamerPos> {
        private static readonly pb::MessageParser<B2C_TeamerPos> _parser = new pb::MessageParser<B2C_TeamerPos>(() => pb.ProtobufManager.New<B2C_TeamerPos>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_TeamerPos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamerPos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
          pos_ = null;
          Isparachute = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamerPos(B2C_TeamerPos other) : this() {
          Pos = other.pos_ != null ? other.Pos.Clone() : null;
          isparachute_ = other.isparachute_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamerPos Clone() {
          return new B2C_TeamerPos(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private global::Pb.Vector3PB pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.Vector3PB Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "isparachute" field.</summary>
        public const int IsparachuteFieldNumber = 2;
        private bool isparachute_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Isparachute {
          get { return isparachute_; }
          set {
            isparachute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_TeamerPos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_TeamerPos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Pos, other.Pos)) return false;
          if (Isparachute != other.Isparachute) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (Isparachute != false) hash ^= Isparachute.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (pos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Pos);
          }
          if (Isparachute != false) {
            output.WriteRawTag(16);
            output.WriteBool(Isparachute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (Isparachute != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_TeamerPos other) {
          if (other == null) {
            return;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.Isparachute != false) {
            Isparachute = other.Isparachute;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 16: {
                Isparachute = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_TeamKillMon : pb::IMessage<B2C_TeamKillMon> {
        private static readonly pb::MessageParser<B2C_TeamKillMon> _parser = new pb::MessageParser<B2C_TeamKillMon>(() => pb.ProtobufManager.New<B2C_TeamKillMon>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_TeamKillMon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamKillMon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Killnum = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamKillMon(B2C_TeamKillMon other) : this() {
          killnum_ = other.killnum_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_TeamKillMon Clone() {
          return new B2C_TeamKillMon(this);
        }

        /// <summary>Field number for the "killnum" field.</summary>
        public const int KillnumFieldNumber = 1;
        private uint killnum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Killnum {
          get { return killnum_; }
          set {
            killnum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_TeamKillMon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_TeamKillMon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Killnum != other.Killnum) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Killnum != 0) hash ^= Killnum.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Killnum != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Killnum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Killnum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Killnum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_TeamKillMon other) {
          if (other == null) {
            return;
          }
          if (other.Killnum != 0) {
            Killnum = other.Killnum;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Killnum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_VisibleNpc : pb::IMessage<B2C_VisibleNpc> {
        private static readonly pb::MessageParser<B2C_VisibleNpc> _parser = new pb::MessageParser<B2C_VisibleNpc>(() => pb.ProtobufManager.New<B2C_VisibleNpc>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_VisibleNpc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VisibleNpc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          for (int i = 0; i < npcs_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc>(npcs_[i]);
          }
          npcs_.Clear();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VisibleNpc(B2C_VisibleNpc other) : this() {
          npcs_ = other.npcs_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_VisibleNpc Clone() {
          return new B2C_VisibleNpc(this);
        }

        /// <summary>Field number for the "npcs" field.</summary>
        public const int NpcsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc> _repeated_npcs_codec
            = pb::FieldCodec.ForMessage(10, global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc> npcs_ = new pbc::RepeatedField<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Types.VisibleNpc> Npcs {
          get { return npcs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_VisibleNpc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_VisibleNpc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!npcs_.Equals(other.npcs_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= npcs_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          npcs_.WriteTo(output, _repeated_npcs_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += npcs_.CalculateSize(_repeated_npcs_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_VisibleNpc other) {
          if (other == null) {
            return;
          }
          npcs_.Add(other.npcs_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the B2C_VisibleNpc message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class VisibleNpc : pb::IMessage<VisibleNpc> {
            private static readonly pb::MessageParser<VisibleNpc> _parser = new pb::MessageParser<VisibleNpc>(() => pb.ProtobufManager.New<VisibleNpc>());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<VisibleNpc> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Pb.B2C_TeamData.Types.B2C_VisibleNpc.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VisibleNpc() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearData() {
              pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(pos_);
              pos_ = null;
              Npcid = 0;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VisibleNpc(VisibleNpc other) : this() {
              Pos = other.pos_ != null ? other.Pos.Clone() : null;
              npcid_ = other.npcid_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VisibleNpc Clone() {
              return new VisibleNpc(this);
            }

            /// <summary>Field number for the "pos" field.</summary>
            public const int PosFieldNumber = 1;
            private global::Pb.Vector3PB pos_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Pb.Vector3PB Pos {
              get { return pos_; }
              set {
                pos_ = value;
              }
            }

            /// <summary>Field number for the "npcid" field.</summary>
            public const int NpcidFieldNumber = 2;
            private uint npcid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Npcid {
              get { return npcid_; }
              set {
                npcid_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as VisibleNpc);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(VisibleNpc other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Pos, other.Pos)) return false;
              if (Npcid != other.Npcid) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (pos_ != null) hash ^= Pos.GetHashCode();
              if (Npcid != 0) hash ^= Npcid.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (pos_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Pos);
              }
              if (Npcid != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Npcid);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (pos_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
              }
              if (Npcid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(VisibleNpc other) {
              if (other == null) {
                return;
              }
              if (other.pos_ != null) {
                if (pos_ == null) {
                  pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                }
                Pos.MergeFrom(other.Pos);
              }
              if (other.Npcid != 0) {
                Npcid = other.Npcid;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (pos_ == null) {
                      pos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
                    }
                    input.ReadMessage(pos_);
                    break;
                  }
                  case 16: {
                    Npcid = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class B2C_Energy : pb::IMessage<B2C_Energy> {
        private static readonly pb::MessageParser<B2C_Energy> _parser = new pb::MessageParser<B2C_Energy>(() => pb.ProtobufManager.New<B2C_Energy>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_Energy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_TeamData.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Energy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Energy = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Energy(B2C_Energy other) : this() {
          energy_ = other.energy_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_Energy Clone() {
          return new B2C_Energy(this);
        }

        /// <summary>Field number for the "energy" field.</summary>
        public const int EnergyFieldNumber = 1;
        private int energy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Energy {
          get { return energy_; }
          set {
            energy_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_Energy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_Energy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Energy != other.Energy) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Energy != 0) hash ^= Energy.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Energy != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Energy);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Energy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_Energy other) {
          if (other == null) {
            return;
          }
          if (other.Energy != 0) {
            Energy = other.Energy;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Energy = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class B2C_TeamEvent : pb::IMessage<B2C_TeamEvent> {
    private static readonly pb::MessageParser<B2C_TeamEvent> _parser = new pb::MessageParser<B2C_TeamEvent>(() => pb.ProtobufManager.New<B2C_TeamEvent>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_TeamEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamEvent(B2C_TeamEvent other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamEvent Clone() {
      return new B2C_TeamEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_TeamEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_TeamEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_TeamEvent other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class B2C_TeamDirty : pb::IMessage<B2C_TeamDirty> {
    private static readonly pb::MessageParser<B2C_TeamDirty> _parser = new pb::MessageParser<B2C_TeamDirty>(() => pb.ProtobufManager.New<B2C_TeamDirty>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_TeamDirty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamDirty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      for (int i = 0; i < state_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamData>(state_[i]);
      }
      state_.Clear();
      for (int i = 0; i < event_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamEvent>(event_[i]);
      }
      event_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamDirty(B2C_TeamDirty other) : this() {
      uuid_ = other.uuid_;
      state_ = other.state_.Clone();
      event_ = other.event_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_TeamDirty Clone() {
      return new B2C_TeamDirty(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.B2C_TeamData> _repeated_state_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.B2C_TeamData.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_TeamData> state_ = new pbc::RepeatedField<global::Pb.B2C_TeamData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_TeamData> State {
      get { return state_; }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.B2C_TeamEvent> _repeated_event_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.B2C_TeamEvent.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_TeamEvent> event_ = new pbc::RepeatedField<global::Pb.B2C_TeamEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_TeamEvent> Event {
      get { return event_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_TeamDirty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_TeamDirty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if(!state_.Equals(other.state_)) return false;
      if(!event_.Equals(other.event_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      hash ^= state_.GetHashCode();
      hash ^= event_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      state_.WriteTo(output, _repeated_state_codec);
      event_.WriteTo(output, _repeated_event_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      size += state_.CalculateSize(_repeated_state_codec);
      size += event_.CalculateSize(_repeated_event_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_TeamDirty other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      state_.Add(other.state_);
      event_.Add(other.event_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 18: {
            state_.AddEntriesFrom(input, _repeated_state_codec);
            break;
          }
          case 26: {
            event_.AddEntriesFrom(input, _repeated_event_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_Frame : pb::IMessage<B2C_Frame> {
    private static readonly pb::MessageParser<B2C_Frame> _parser = new pb::MessageParser<B2C_Frame>(() => pb.ProtobufManager.New<B2C_Frame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Frame = 0;
      FrameDeviation = 0;
      for (int i = 0; i < entityDirty_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_EntityDirty>(entityDirty_[i]);
      }
      entityDirty_.Clear();
      pb.ProtobufManager.Reclaim<global::Pb.B2C_WorldDirty>(worldDirty_);
      worldDirty_ = null;
      for (int i = 0; i < teamData_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_TeamDirty>(teamData_[i]);
      }
      teamData_.Clear();
      disappear_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Frame(B2C_Frame other) : this() {
      frame_ = other.frame_;
      frameDeviation_ = other.frameDeviation_;
      entityDirty_ = other.entityDirty_.Clone();
      WorldDirty = other.worldDirty_ != null ? other.WorldDirty.Clone() : null;
      teamData_ = other.teamData_.Clone();
      disappear_ = other.disappear_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Frame Clone() {
      return new B2C_Frame(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frameDeviation" field.</summary>
    public const int FrameDeviationFieldNumber = 2;
    private int frameDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameDeviation {
      get { return frameDeviation_; }
      set {
        frameDeviation_ = value;
      }
    }

    /// <summary>Field number for the "entityDirty" field.</summary>
    public const int EntityDirtyFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.B2C_EntityDirty> _repeated_entityDirty_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.B2C_EntityDirty.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_EntityDirty> entityDirty_ = new pbc::RepeatedField<global::Pb.B2C_EntityDirty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_EntityDirty> EntityDirty {
      get { return entityDirty_; }
    }

    /// <summary>Field number for the "worldDirty" field.</summary>
    public const int WorldDirtyFieldNumber = 4;
    private global::Pb.B2C_WorldDirty worldDirty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_WorldDirty WorldDirty {
      get { return worldDirty_; }
      set {
        worldDirty_ = value;
      }
    }

    /// <summary>Field number for the "teamData" field.</summary>
    public const int TeamDataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pb.B2C_TeamDirty> _repeated_teamData_codec
        = pb::FieldCodec.ForMessage(42, global::Pb.B2C_TeamDirty.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_TeamDirty> teamData_ = new pbc::RepeatedField<global::Pb.B2C_TeamDirty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_TeamDirty> TeamData {
      get { return teamData_; }
    }

    /// <summary>Field number for the "disappear" field.</summary>
    public const int DisappearFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_disappear_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> disappear_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Disappear {
      get { return disappear_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (FrameDeviation != other.FrameDeviation) return false;
      if(!entityDirty_.Equals(other.entityDirty_)) return false;
      if (!object.Equals(WorldDirty, other.WorldDirty)) return false;
      if(!teamData_.Equals(other.teamData_)) return false;
      if(!disappear_.Equals(other.disappear_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (FrameDeviation != 0) hash ^= FrameDeviation.GetHashCode();
      hash ^= entityDirty_.GetHashCode();
      if (worldDirty_ != null) hash ^= WorldDirty.GetHashCode();
      hash ^= teamData_.GetHashCode();
      hash ^= disappear_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Frame);
      }
      if (FrameDeviation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameDeviation);
      }
      entityDirty_.WriteTo(output, _repeated_entityDirty_codec);
      if (worldDirty_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WorldDirty);
      }
      teamData_.WriteTo(output, _repeated_teamData_codec);
      disappear_.WriteTo(output, _repeated_disappear_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      if (FrameDeviation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameDeviation);
      }
      size += entityDirty_.CalculateSize(_repeated_entityDirty_codec);
      if (worldDirty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldDirty);
      }
      size += teamData_.CalculateSize(_repeated_teamData_codec);
      size += disappear_.CalculateSize(_repeated_disappear_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Frame other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.FrameDeviation != 0) {
        FrameDeviation = other.FrameDeviation;
      }
      entityDirty_.Add(other.entityDirty_);
      if (other.worldDirty_ != null) {
        if (worldDirty_ == null) {
          worldDirty_ = pb.ProtobufManager.New<global::Pb.B2C_WorldDirty>();
        }
        WorldDirty.MergeFrom(other.WorldDirty);
      }
      teamData_.Add(other.teamData_);
      disappear_.Add(other.disappear_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameDeviation = input.ReadInt32();
            break;
          }
          case 26: {
            entityDirty_.AddEntriesFrom(input, _repeated_entityDirty_codec);
            break;
          }
          case 34: {
            if (worldDirty_ == null) {
              worldDirty_ = pb.ProtobufManager.New<global::Pb.B2C_WorldDirty>();
            }
            input.ReadMessage(worldDirty_);
            break;
          }
          case 42: {
            teamData_.AddEntriesFrom(input, _repeated_teamData_codec);
            break;
          }
          case 50:
          case 48: {
            disappear_.AddEntriesFrom(input, _repeated_disappear_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_BattleLogin : pb::IMessage<C2B_BattleLogin> {
    private static readonly pb::MessageParser<C2B_BattleLogin> _parser = new pb::MessageParser<C2B_BattleLogin>(() => pb.ProtobufManager.New<C2B_BattleLogin>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_BattleLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BattleLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Sceneid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BattleLogin(C2B_BattleLogin other) : this() {
      roleid_ = other.roleid_;
      sceneid_ = other.sceneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BattleLogin Clone() {
      return new C2B_BattleLogin(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 2;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_BattleLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_BattleLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Sceneid != other.Sceneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Sceneid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sceneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_BattleLogin other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 16: {
            Sceneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_BattleLogin : pb::IMessage<B2C_BattleLogin> {
    private static readonly pb::MessageParser<B2C_BattleLogin> _parser = new pb::MessageParser<B2C_BattleLogin>(() => pb.ProtobufManager.New<B2C_BattleLogin>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_BattleLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleLogin(B2C_BattleLogin other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleLogin Clone() {
      return new B2C_BattleLogin(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_BattleLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_BattleLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_BattleLogin other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_EntityDisappear : pb::IMessage<B2C_EntityDisappear> {
    private static readonly pb::MessageParser<B2C_EntityDisappear> _parser = new pb::MessageParser<B2C_EntityDisappear>(() => pb.ProtobufManager.New<B2C_EntityDisappear>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_EntityDisappear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EntityDisappear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Frame = 0;
      Uuid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EntityDisappear(B2C_EntityDisappear other) : this() {
      frame_ = other.frame_;
      uuid_ = other.uuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EntityDisappear Clone() {
      return new B2C_EntityDisappear(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_EntityDisappear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_EntityDisappear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Uuid != other.Uuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Frame);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_EntityDisappear other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadUInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadingData : pb::IMessage<LoadingData> {
    private static readonly pb::MessageParser<LoadingData> _parser = new pb::MessageParser<LoadingData>(() => pb.ProtobufManager.New<LoadingData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Progress = 0;
      Roleid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadingData(LoadingData other) : this() {
      progress_ = other.progress_;
      roleid_ = other.roleid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadingData Clone() {
      return new LoadingData(this);
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private uint progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      if (Roleid != other.Roleid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Progress);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadingData other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Progress = input.ReadUInt32();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_Loading : pb::IMessage<C2B_Loading> {
    private static readonly pb::MessageParser<C2B_Loading> _parser = new pb::MessageParser<C2B_Loading>(() => pb.ProtobufManager.New<C2B_Loading>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_Loading> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Loading() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.LoadingData>(loading_);
      loading_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Loading(C2B_Loading other) : this() {
      Loading = other.loading_ != null ? other.Loading.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Loading Clone() {
      return new C2B_Loading(this);
    }

    /// <summary>Field number for the "loading" field.</summary>
    public const int LoadingFieldNumber = 1;
    private global::Pb.LoadingData loading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.LoadingData Loading {
      get { return loading_; }
      set {
        loading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_Loading);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_Loading other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Loading, other.Loading)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (loading_ != null) hash ^= Loading.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (loading_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Loading);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (loading_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loading);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_Loading other) {
      if (other == null) {
        return;
      }
      if (other.loading_ != null) {
        if (loading_ == null) {
          loading_ = pb.ProtobufManager.New<global::Pb.LoadingData>();
        }
        Loading.MergeFrom(other.Loading);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (loading_ == null) {
              loading_ = pb.ProtobufManager.New<global::Pb.LoadingData>();
            }
            input.ReadMessage(loading_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_Loading : pb::IMessage<B2C_Loading> {
    private static readonly pb::MessageParser<B2C_Loading> _parser = new pb::MessageParser<B2C_Loading>(() => pb.ProtobufManager.New<B2C_Loading>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Loading> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Loading() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < loadings_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.LoadingData>(loadings_[i]);
      }
      loadings_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Loading(B2C_Loading other) : this() {
      loadings_ = other.loadings_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Loading Clone() {
      return new B2C_Loading(this);
    }

    /// <summary>Field number for the "loadings" field.</summary>
    public const int LoadingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.LoadingData> _repeated_loadings_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.LoadingData.Parser);
    private readonly pbc::RepeatedField<global::Pb.LoadingData> loadings_ = new pbc::RepeatedField<global::Pb.LoadingData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.LoadingData> Loadings {
      get { return loadings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Loading);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Loading other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!loadings_.Equals(other.loadings_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= loadings_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      loadings_.WriteTo(output, _repeated_loadings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += loadings_.CalculateSize(_repeated_loadings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Loading other) {
      if (other == null) {
        return;
      }
      loadings_.Add(other.loadings_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            loadings_.AddEntriesFrom(input, _repeated_loadings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_StartGame : pb::IMessage<B2C_StartGame> {
    private static readonly pb::MessageParser<B2C_StartGame> _parser = new pb::MessageParser<B2C_StartGame>(() => pb.ProtobufManager.New<B2C_StartGame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_StartGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_StartGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      Frame = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_StartGame(B2C_StartGame other) : this() {
      uuid_ = other.uuid_;
      frame_ = other.frame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_StartGame Clone() {
      return new B2C_StartGame(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_StartGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_StartGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Frame != other.Frame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_StartGame other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Frame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInitBatInfo : pb::IMessage<PlayerInitBatInfo> {
    private static readonly pb::MessageParser<PlayerInitBatInfo> _parser = new pb::MessageParser<PlayerInitBatInfo>(() => pb.ProtobufManager.New<PlayerInitBatInfo>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInitBatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInitBatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      Roleid = 0;
      Name = "";
      Teamid = 0;
      Unitid = 0;
      IsRobot = false;
      Issupply = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInitBatInfo(PlayerInitBatInfo other) : this() {
      uuid_ = other.uuid_;
      roleid_ = other.roleid_;
      name_ = other.name_;
      teamid_ = other.teamid_;
      unitid_ = other.unitid_;
      isRobot_ = other.isRobot_;
      issupply_ = other.issupply_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInitBatInfo Clone() {
      return new PlayerInitBatInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 4;
    private uint teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "unitid" field.</summary>
    public const int UnitidFieldNumber = 5;
    private uint unitid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unitid {
      get { return unitid_; }
      set {
        unitid_ = value;
      }
    }

    /// <summary>Field number for the "isRobot" field.</summary>
    public const int IsRobotFieldNumber = 6;
    private bool isRobot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    /// <summary>Field number for the "issupply" field.</summary>
    public const int IssupplyFieldNumber = 7;
    private bool issupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Issupply {
      get { return issupply_; }
      set {
        issupply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInitBatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInitBatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Roleid != other.Roleid) return false;
      if (Name != other.Name) return false;
      if (Teamid != other.Teamid) return false;
      if (Unitid != other.Unitid) return false;
      if (IsRobot != other.IsRobot) return false;
      if (Issupply != other.Issupply) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      if (Unitid != 0) hash ^= Unitid.GetHashCode();
      if (IsRobot != false) hash ^= IsRobot.GetHashCode();
      if (Issupply != false) hash ^= Issupply.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Roleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roleid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Teamid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Teamid);
      }
      if (Unitid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Unitid);
      }
      if (IsRobot != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsRobot);
      }
      if (Issupply != false) {
        output.WriteRawTag(56);
        output.WriteBool(Issupply);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
      }
      if (Unitid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unitid);
      }
      if (IsRobot != false) {
        size += 1 + 1;
      }
      if (Issupply != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInitBatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      if (other.Unitid != 0) {
        Unitid = other.Unitid;
      }
      if (other.IsRobot != false) {
        IsRobot = other.IsRobot;
      }
      if (other.Issupply != false) {
        Issupply = other.Issupply;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Teamid = input.ReadUInt32();
            break;
          }
          case 40: {
            Unitid = input.ReadUInt32();
            break;
          }
          case 48: {
            IsRobot = input.ReadBool();
            break;
          }
          case 56: {
            Issupply = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_BattleAllPlayer : pb::IMessage<B2C_BattleAllPlayer> {
    private static readonly pb::MessageParser<B2C_BattleAllPlayer> _parser = new pb::MessageParser<B2C_BattleAllPlayer>(() => pb.ProtobufManager.New<B2C_BattleAllPlayer>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_BattleAllPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleAllPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < allplys_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.PlayerInitBatInfo>(allplys_[i]);
      }
      allplys_.Clear();
      MaxTeamMember = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleAllPlayer(B2C_BattleAllPlayer other) : this() {
      allplys_ = other.allplys_.Clone();
      maxTeamMember_ = other.maxTeamMember_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleAllPlayer Clone() {
      return new B2C_BattleAllPlayer(this);
    }

    /// <summary>Field number for the "allplys" field.</summary>
    public const int AllplysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.PlayerInitBatInfo> _repeated_allplys_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.PlayerInitBatInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.PlayerInitBatInfo> allplys_ = new pbc::RepeatedField<global::Pb.PlayerInitBatInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.PlayerInitBatInfo> Allplys {
      get { return allplys_; }
    }

    /// <summary>Field number for the "maxTeamMember" field.</summary>
    public const int MaxTeamMemberFieldNumber = 2;
    private uint maxTeamMember_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTeamMember {
      get { return maxTeamMember_; }
      set {
        maxTeamMember_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_BattleAllPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_BattleAllPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allplys_.Equals(other.allplys_)) return false;
      if (MaxTeamMember != other.MaxTeamMember) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allplys_.GetHashCode();
      if (MaxTeamMember != 0) hash ^= MaxTeamMember.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allplys_.WriteTo(output, _repeated_allplys_codec);
      if (MaxTeamMember != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxTeamMember);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allplys_.CalculateSize(_repeated_allplys_codec);
      if (MaxTeamMember != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTeamMember);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_BattleAllPlayer other) {
      if (other == null) {
        return;
      }
      allplys_.Add(other.allplys_);
      if (other.MaxTeamMember != 0) {
        MaxTeamMember = other.MaxTeamMember;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allplys_.AddEntriesFrom(input, _repeated_allplys_codec);
            break;
          }
          case 16: {
            MaxTeamMember = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleVoteEquip : pb::IMessage<SingleVoteEquip> {
    private static readonly pb::MessageParser<SingleVoteEquip> _parser = new pb::MessageParser<SingleVoteEquip>(() => pb.ProtobufManager.New<SingleVoteEquip>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleVoteEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleVoteEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      MainWeapon = 0;
      SecondWeapon = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleVoteEquip(SingleVoteEquip other) : this() {
      roleid_ = other.roleid_;
      mainWeapon_ = other.mainWeapon_;
      secondWeapon_ = other.secondWeapon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleVoteEquip Clone() {
      return new SingleVoteEquip(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "mainWeapon" field.</summary>
    public const int MainWeaponFieldNumber = 2;
    private uint mainWeapon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainWeapon {
      get { return mainWeapon_; }
      set {
        mainWeapon_ = value;
      }
    }

    /// <summary>Field number for the "secondWeapon" field.</summary>
    public const int SecondWeaponFieldNumber = 3;
    private uint secondWeapon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecondWeapon {
      get { return secondWeapon_; }
      set {
        secondWeapon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleVoteEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleVoteEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (MainWeapon != other.MainWeapon) return false;
      if (SecondWeapon != other.SecondWeapon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (MainWeapon != 0) hash ^= MainWeapon.GetHashCode();
      if (SecondWeapon != 0) hash ^= SecondWeapon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (MainWeapon != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MainWeapon);
      }
      if (SecondWeapon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SecondWeapon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (MainWeapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainWeapon);
      }
      if (SecondWeapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondWeapon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleVoteEquip other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.MainWeapon != 0) {
        MainWeapon = other.MainWeapon;
      }
      if (other.SecondWeapon != 0) {
        SecondWeapon = other.SecondWeapon;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 16: {
            MainWeapon = input.ReadUInt32();
            break;
          }
          case 24: {
            SecondWeapon = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_SingleVote : pb::IMessage<B2C_SingleVote> {
    private static readonly pb::MessageParser<B2C_SingleVote> _parser = new pb::MessageParser<B2C_SingleVote>(() => pb.ProtobufManager.New<B2C_SingleVote>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_SingleVote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_SingleVote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < equips_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.SingleVoteEquip>(equips_[i]);
      }
      equips_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_SingleVote(B2C_SingleVote other) : this() {
      equips_ = other.equips_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_SingleVote Clone() {
      return new B2C_SingleVote(this);
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.SingleVoteEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.SingleVoteEquip.Parser);
    private readonly pbc::RepeatedField<global::Pb.SingleVoteEquip> equips_ = new pbc::RepeatedField<global::Pb.SingleVoteEquip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.SingleVoteEquip> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_SingleVote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_SingleVote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equips_.Equals(other.equips_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equips_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equips_.WriteTo(output, _repeated_equips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equips_.CalculateSize(_repeated_equips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_SingleVote other) {
      if (other == null) {
        return;
      }
      equips_.Add(other.equips_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteResult : pb::IMessage<VoteResult> {
    private static readonly pb::MessageParser<VoteResult> _parser = new pb::MessageParser<VoteResult>(() => pb.ProtobufManager.New<VoteResult>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      Votenum = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteResult(VoteResult other) : this() {
      uuid_ = other.uuid_;
      votenum_ = other.votenum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteResult Clone() {
      return new VoteResult(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "votenum" field.</summary>
    public const int VotenumFieldNumber = 2;
    private uint votenum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Votenum {
      get { return votenum_; }
      set {
        votenum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Votenum != other.Votenum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (Votenum != 0) hash ^= Votenum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Votenum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Votenum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Votenum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Votenum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteResult other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.Votenum != 0) {
        Votenum = other.Votenum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Votenum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_VoteResult : pb::IMessage<B2C_VoteResult> {
    private static readonly pb::MessageParser<B2C_VoteResult> _parser = new pb::MessageParser<B2C_VoteResult>(() => pb.ProtobufManager.New<B2C_VoteResult>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_VoteResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_VoteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Maxuuid = 0;
      for (int i = 0; i < result_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.VoteResult>(result_[i]);
      }
      result_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_VoteResult(B2C_VoteResult other) : this() {
      maxuuid_ = other.maxuuid_;
      result_ = other.result_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_VoteResult Clone() {
      return new B2C_VoteResult(this);
    }

    /// <summary>Field number for the "maxuuid" field.</summary>
    public const int MaxuuidFieldNumber = 1;
    private ulong maxuuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Maxuuid {
      get { return maxuuid_; }
      set {
        maxuuid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.VoteResult> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.VoteResult.Parser);
    private readonly pbc::RepeatedField<global::Pb.VoteResult> result_ = new pbc::RepeatedField<global::Pb.VoteResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.VoteResult> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_VoteResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_VoteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Maxuuid != other.Maxuuid) return false;
      if(!result_.Equals(other.result_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Maxuuid != 0UL) hash ^= Maxuuid.GetHashCode();
      hash ^= result_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Maxuuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Maxuuid);
      }
      result_.WriteTo(output, _repeated_result_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Maxuuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Maxuuid);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_VoteResult other) {
      if (other == null) {
        return;
      }
      if (other.Maxuuid != 0UL) {
        Maxuuid = other.Maxuuid;
      }
      result_.Add(other.result_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Maxuuid = input.ReadUInt64();
            break;
          }
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_SingleVote : pb::IMessage<C2B_SingleVote> {
    private static readonly pb::MessageParser<C2B_SingleVote> _parser = new pb::MessageParser<C2B_SingleVote>(() => pb.ProtobufManager.New<C2B_SingleVote>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_SingleVote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_SingleVote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Destid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_SingleVote(C2B_SingleVote other) : this() {
      destid_ = other.destid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_SingleVote Clone() {
      return new C2B_SingleVote(this);
    }

    /// <summary>Field number for the "destid" field.</summary>
    public const int DestidFieldNumber = 1;
    private uint destid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Destid {
      get { return destid_; }
      set {
        destid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_SingleVote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_SingleVote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destid != other.Destid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destid != 0) hash ^= Destid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Destid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Destid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Destid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_SingleVote other) {
      if (other == null) {
        return;
      }
      if (other.Destid != 0) {
        Destid = other.Destid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Destid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_GetBoxItem : pb::IMessage<B2C_GetBoxItem> {
    private static readonly pb::MessageParser<B2C_GetBoxItem> _parser = new pb::MessageParser<B2C_GetBoxItem>(() => pb.ProtobufManager.New<B2C_GetBoxItem>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_GetBoxItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_GetBoxItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      for (int i = 0; i < boxitemdata_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.ItemData>(boxitemdata_[i]);
      }
      boxitemdata_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_GetBoxItem(B2C_GetBoxItem other) : this() {
      uuid_ = other.uuid_;
      boxitemdata_ = other.boxitemdata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_GetBoxItem Clone() {
      return new B2C_GetBoxItem(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "boxitemdata" field.</summary>
    public const int BoxitemdataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_boxitemdata_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ItemData> boxitemdata_ = new pbc::RepeatedField<global::Pb.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ItemData> Boxitemdata {
      get { return boxitemdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_GetBoxItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_GetBoxItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if(!boxitemdata_.Equals(other.boxitemdata_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      hash ^= boxitemdata_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      boxitemdata_.WriteTo(output, _repeated_boxitemdata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      size += boxitemdata_.CalculateSize(_repeated_boxitemdata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_GetBoxItem other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      boxitemdata_.Add(other.boxitemdata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 18: {
            boxitemdata_.AddEntriesFrom(input, _repeated_boxitemdata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeammateFinishData : pb::IMessage<TeammateFinishData> {
    private static readonly pb::MessageParser<TeammateFinishData> _parser = new pb::MessageParser<TeammateFinishData>(() => pb.ProtobufManager.New<TeammateFinishData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeammateFinishData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammateFinishData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Uuid = 0;
      KillNum = 0;
      TreatNum = 0;
      pb.ProtobufManager.Reclaim<global::Pb.SettleReward>(reward_);
      reward_ = null;
      Damage = 0;
      weapons_.Clear();
      cores_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammateFinishData(TeammateFinishData other) : this() {
      uuid_ = other.uuid_;
      killNum_ = other.killNum_;
      treatNum_ = other.treatNum_;
      Reward = other.reward_ != null ? other.Reward.Clone() : null;
      damage_ = other.damage_;
      weapons_ = other.weapons_.Clone();
      cores_ = other.cores_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammateFinishData Clone() {
      return new TeammateFinishData(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "killNum" field.</summary>
    public const int KillNumFieldNumber = 2;
    private uint killNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "treatNum" field.</summary>
    public const int TreatNumFieldNumber = 3;
    private uint treatNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TreatNum {
      get { return treatNum_; }
      set {
        treatNum_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private global::Pb.SettleReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.SettleReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private uint damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_weapons_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> weapons_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Weapons {
      get { return weapons_; }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_cores_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> cores_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Cores {
      get { return cores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeammateFinishData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeammateFinishData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (KillNum != other.KillNum) return false;
      if (TreatNum != other.TreatNum) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      if (Damage != other.Damage) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      if(!cores_.Equals(other.cores_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      if (KillNum != 0) hash ^= KillNum.GetHashCode();
      if (TreatNum != 0) hash ^= TreatNum.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      hash ^= weapons_.GetHashCode();
      hash ^= cores_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (KillNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(KillNum);
      }
      if (TreatNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TreatNum);
      }
      if (reward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Reward);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Damage);
      }
      weapons_.WriteTo(output, _repeated_weapons_codec);
      cores_.WriteTo(output, _repeated_cores_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillNum);
      }
      if (TreatNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TreatNum);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      size += cores_.CalculateSize(_repeated_cores_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeammateFinishData other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
      if (other.KillNum != 0) {
        KillNum = other.KillNum;
      }
      if (other.TreatNum != 0) {
        TreatNum = other.TreatNum;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          reward_ = pb.ProtobufManager.New<global::Pb.SettleReward>();
        }
        Reward.MergeFrom(other.Reward);
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      weapons_.Add(other.weapons_);
      cores_.Add(other.cores_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            KillNum = input.ReadUInt32();
            break;
          }
          case 24: {
            TreatNum = input.ReadUInt32();
            break;
          }
          case 34: {
            if (reward_ == null) {
              reward_ = pb.ProtobufManager.New<global::Pb.SettleReward>();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 40: {
            Damage = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
          case 58:
          case 56: {
            cores_.AddEntriesFrom(input, _repeated_cores_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamFinishData : pb::IMessage<TeamFinishData> {
    private static readonly pb::MessageParser<TeamFinishData> _parser = new pb::MessageParser<TeamFinishData>(() => pb.ProtobufManager.New<TeamFinishData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamFinishData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamFinishData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Teamid = 0;
      Rank = 0;
      for (int i = 0; i < teammatefinishdata_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.TeammateFinishData>(teammatefinishdata_[i]);
      }
      teammatefinishdata_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamFinishData(TeamFinishData other) : this() {
      teamid_ = other.teamid_;
      rank_ = other.rank_;
      teammatefinishdata_ = other.teammatefinishdata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamFinishData Clone() {
      return new TeamFinishData(this);
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 1;
    private uint teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "teammatefinishdata" field.</summary>
    public const int TeammatefinishdataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.TeammateFinishData> _repeated_teammatefinishdata_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.TeammateFinishData.Parser);
    private readonly pbc::RepeatedField<global::Pb.TeammateFinishData> teammatefinishdata_ = new pbc::RepeatedField<global::Pb.TeammateFinishData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.TeammateFinishData> Teammatefinishdata {
      get { return teammatefinishdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamFinishData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamFinishData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Teamid != other.Teamid) return false;
      if (Rank != other.Rank) return false;
      if(!teammatefinishdata_.Equals(other.teammatefinishdata_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      hash ^= teammatefinishdata_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teamid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Teamid);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      teammatefinishdata_.WriteTo(output, _repeated_teammatefinishdata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      size += teammatefinishdata_.CalculateSize(_repeated_teammatefinishdata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamFinishData other) {
      if (other == null) {
        return;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      teammatefinishdata_.Add(other.teammatefinishdata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Teamid = input.ReadUInt32();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
          case 26: {
            teammatefinishdata_.AddEntriesFrom(input, _repeated_teammatefinishdata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_GameEnd : pb::IMessage<B2C_GameEnd> {
    private static readonly pb::MessageParser<B2C_GameEnd> _parser = new pb::MessageParser<B2C_GameEnd>(() => pb.ProtobufManager.New<B2C_GameEnd>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_GameEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_GameEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      for (int i = 0; i < teamfinishdata_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.TeamFinishData>(teamfinishdata_[i]);
      }
      teamfinishdata_.Clear();
      Realend = false;
      Sceneid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_GameEnd(B2C_GameEnd other) : this() {
      teamfinishdata_ = other.teamfinishdata_.Clone();
      realend_ = other.realend_;
      sceneid_ = other.sceneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_GameEnd Clone() {
      return new B2C_GameEnd(this);
    }

    /// <summary>Field number for the "teamfinishdata" field.</summary>
    public const int TeamfinishdataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.TeamFinishData> _repeated_teamfinishdata_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.TeamFinishData.Parser);
    private readonly pbc::RepeatedField<global::Pb.TeamFinishData> teamfinishdata_ = new pbc::RepeatedField<global::Pb.TeamFinishData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.TeamFinishData> Teamfinishdata {
      get { return teamfinishdata_; }
    }

    /// <summary>Field number for the "realend" field.</summary>
    public const int RealendFieldNumber = 2;
    private bool realend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Realend {
      get { return realend_; }
      set {
        realend_ = value;
      }
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 3;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_GameEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_GameEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teamfinishdata_.Equals(other.teamfinishdata_)) return false;
      if (Realend != other.Realend) return false;
      if (Sceneid != other.Sceneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teamfinishdata_.GetHashCode();
      if (Realend != false) hash ^= Realend.GetHashCode();
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teamfinishdata_.WriteTo(output, _repeated_teamfinishdata_codec);
      if (Realend != false) {
        output.WriteRawTag(16);
        output.WriteBool(Realend);
      }
      if (Sceneid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Sceneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teamfinishdata_.CalculateSize(_repeated_teamfinishdata_codec);
      if (Realend != false) {
        size += 1 + 1;
      }
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_GameEnd other) {
      if (other == null) {
        return;
      }
      teamfinishdata_.Add(other.teamfinishdata_);
      if (other.Realend != false) {
        Realend = other.Realend;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teamfinishdata_.AddEntriesFrom(input, _repeated_teamfinishdata_codec);
            break;
          }
          case 16: {
            Realend = input.ReadBool();
            break;
          }
          case 24: {
            Sceneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_PlayerQuitGame : pb::IMessage<C2B_PlayerQuitGame> {
    private static readonly pb::MessageParser<C2B_PlayerQuitGame> _parser = new pb::MessageParser<C2B_PlayerQuitGame>(() => pb.ProtobufManager.New<C2B_PlayerQuitGame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_PlayerQuitGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PlayerQuitGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PlayerQuitGame(C2B_PlayerQuitGame other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PlayerQuitGame Clone() {
      return new C2B_PlayerQuitGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_PlayerQuitGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_PlayerQuitGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_PlayerQuitGame other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class B2C_PlayerQuitGame : pb::IMessage<B2C_PlayerQuitGame> {
    private static readonly pb::MessageParser<B2C_PlayerQuitGame> _parser = new pb::MessageParser<B2C_PlayerQuitGame>(() => pb.ProtobufManager.New<B2C_PlayerQuitGame>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_PlayerQuitGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_PlayerQuitGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_PlayerQuitGame(B2C_PlayerQuitGame other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_PlayerQuitGame Clone() {
      return new B2C_PlayerQuitGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_PlayerQuitGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_PlayerQuitGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_PlayerQuitGame other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SettleReward : pb::IMessage<SettleReward> {
    private static readonly pb::MessageParser<SettleReward> _parser = new pb::MessageParser<SettleReward>(() => pb.ProtobufManager.New<SettleReward>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettleReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Money = 0;
      Exp = 0;
      for (int i = 0; i < randitem_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.ItemData>(randitem_[i]);
      }
      randitem_.Clear();
      Grade = 0;
      Challengenum = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleReward(SettleReward other) : this() {
      money_ = other.money_;
      exp_ = other.exp_;
      randitem_ = other.randitem_.Clone();
      grade_ = other.grade_;
      challengenum_ = other.challengenum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleReward Clone() {
      return new SettleReward(this);
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "randitem" field.</summary>
    public const int RanditemFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.ItemData> _repeated_randitem_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Pb.ItemData> randitem_ = new pbc::RepeatedField<global::Pb.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ItemData> Randitem {
      get { return randitem_; }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 4;
    private uint grade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "challengenum" field.</summary>
    public const int ChallengenumFieldNumber = 5;
    private int challengenum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Challengenum {
      get { return challengenum_; }
      set {
        challengenum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettleReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettleReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money != other.Money) return false;
      if (Exp != other.Exp) return false;
      if(!randitem_.Equals(other.randitem_)) return false;
      if (Grade != other.Grade) return false;
      if (Challengenum != other.Challengenum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Money != 0) hash ^= Money.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= randitem_.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Challengenum != 0) hash ^= Challengenum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Money);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      randitem_.WriteTo(output, _repeated_randitem_codec);
      if (Grade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Grade);
      }
      if (Challengenum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Challengenum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += randitem_.CalculateSize(_repeated_randitem_codec);
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (Challengenum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Challengenum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettleReward other) {
      if (other == null) {
        return;
      }
      if (other.Money != 0) {
        Money = other.Money;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      randitem_.Add(other.randitem_);
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Challengenum != 0) {
        Challengenum = other.Challengenum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 26: {
            randitem_.AddEntriesFrom(input, _repeated_randitem_codec);
            break;
          }
          case 32: {
            Grade = input.ReadUInt32();
            break;
          }
          case 40: {
            Challengenum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_Settlement : pb::IMessage<B2C_Settlement> {
    private static readonly pb::MessageParser<B2C_Settlement> _parser = new pb::MessageParser<B2C_Settlement>(() => pb.ProtobufManager.New<B2C_Settlement>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Settlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Settlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Self = false;
      pb.ProtobufManager.Reclaim<global::Pb.SettleReward>(reward_);
      reward_ = null;
      pb.ProtobufManager.Reclaim<global::Pb.TeamFinishData>(finishdata_);
      finishdata_ = null;
      Revive = false;
      Complete = false;
      Revivetime = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Settlement(B2C_Settlement other) : this() {
      self_ = other.self_;
      Reward = other.reward_ != null ? other.Reward.Clone() : null;
      Finishdata = other.finishdata_ != null ? other.Finishdata.Clone() : null;
      revive_ = other.revive_;
      complete_ = other.complete_;
      revivetime_ = other.revivetime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Settlement Clone() {
      return new B2C_Settlement(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    private bool self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private global::Pb.SettleReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.SettleReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "finishdata" field.</summary>
    public const int FinishdataFieldNumber = 3;
    private global::Pb.TeamFinishData finishdata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.TeamFinishData Finishdata {
      get { return finishdata_; }
      set {
        finishdata_ = value;
      }
    }

    /// <summary>Field number for the "revive" field.</summary>
    public const int ReviveFieldNumber = 4;
    private bool revive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Revive {
      get { return revive_; }
      set {
        revive_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 5;
    private bool complete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    /// <summary>Field number for the "revivetime" field.</summary>
    public const int RevivetimeFieldNumber = 6;
    private uint revivetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Revivetime {
      get { return revivetime_; }
      set {
        revivetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Settlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Settlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Self != other.Self) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      if (!object.Equals(Finishdata, other.Finishdata)) return false;
      if (Revive != other.Revive) return false;
      if (Complete != other.Complete) return false;
      if (Revivetime != other.Revivetime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Self != false) hash ^= Self.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (finishdata_ != null) hash ^= Finishdata.GetHashCode();
      if (Revive != false) hash ^= Revive.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (Revivetime != 0) hash ^= Revivetime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Self != false) {
        output.WriteRawTag(8);
        output.WriteBool(Self);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (finishdata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Finishdata);
      }
      if (Revive != false) {
        output.WriteRawTag(32);
        output.WriteBool(Revive);
      }
      if (Complete != false) {
        output.WriteRawTag(40);
        output.WriteBool(Complete);
      }
      if (Revivetime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Revivetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Self != false) {
        size += 1 + 1;
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (finishdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finishdata);
      }
      if (Revive != false) {
        size += 1 + 1;
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (Revivetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revivetime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Settlement other) {
      if (other == null) {
        return;
      }
      if (other.Self != false) {
        Self = other.Self;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          reward_ = pb.ProtobufManager.New<global::Pb.SettleReward>();
        }
        Reward.MergeFrom(other.Reward);
      }
      if (other.finishdata_ != null) {
        if (finishdata_ == null) {
          finishdata_ = pb.ProtobufManager.New<global::Pb.TeamFinishData>();
        }
        Finishdata.MergeFrom(other.Finishdata);
      }
      if (other.Revive != false) {
        Revive = other.Revive;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      if (other.Revivetime != 0) {
        Revivetime = other.Revivetime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Self = input.ReadBool();
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = pb.ProtobufManager.New<global::Pb.SettleReward>();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 26: {
            if (finishdata_ == null) {
              finishdata_ = pb.ProtobufManager.New<global::Pb.TeamFinishData>();
            }
            input.ReadMessage(finishdata_);
            break;
          }
          case 32: {
            Revive = input.ReadBool();
            break;
          }
          case 40: {
            Complete = input.ReadBool();
            break;
          }
          case 48: {
            Revivetime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_AllDoGM : pb::IMessage<B2C_AllDoGM> {
    private static readonly pb::MessageParser<B2C_AllDoGM> _parser = new pb::MessageParser<B2C_AllDoGM>(() => pb.ProtobufManager.New<B2C_AllDoGM>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_AllDoGM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AllDoGM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Cmd = "";
      Uuid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AllDoGM(B2C_AllDoGM other) : this() {
      cmd_ = other.cmd_;
      uuid_ = other.uuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AllDoGM Clone() {
      return new B2C_AllDoGM(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_AllDoGM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_AllDoGM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Uuid != other.Uuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Uuid != 0UL) hash ^= Uuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_AllDoGM other) {
      if (other == null) {
        return;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Uuid != 0UL) {
        Uuid = other.Uuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_BattleReconnect : pb::IMessage<C2B_BattleReconnect> {
    private static readonly pb::MessageParser<C2B_BattleReconnect> _parser = new pb::MessageParser<C2B_BattleReconnect>(() => pb.ProtobufManager.New<C2B_BattleReconnect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_BattleReconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BattleReconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Sceneid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BattleReconnect(C2B_BattleReconnect other) : this() {
      roleid_ = other.roleid_;
      sceneid_ = other.sceneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BattleReconnect Clone() {
      return new C2B_BattleReconnect(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private uint roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 2;
    private uint sceneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_BattleReconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_BattleReconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Sceneid != other.Sceneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roleid);
      }
      if (Sceneid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sceneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roleid);
      }
      if (Sceneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_BattleReconnect other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt32();
            break;
          }
          case 16: {
            Sceneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_BattleReconnect : pb::IMessage<B2C_BattleReconnect> {
    private static readonly pb::MessageParser<B2C_BattleReconnect> _parser = new pb::MessageParser<B2C_BattleReconnect>(() => pb.ProtobufManager.New<B2C_BattleReconnect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_BattleReconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleReconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleReconnect(B2C_BattleReconnect other) : this() {
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BattleReconnect Clone() {
      return new B2C_BattleReconnect(this);
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 1;
    private int errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_BattleReconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_BattleReconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errno != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_BattleReconnect other) {
      if (other == null) {
        return;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Errno = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WatchData : pb::IMessage<WatchData> {
    private static readonly pb::MessageParser<WatchData> _parser = new pb::MessageParser<WatchData>(() => pb.ProtobufManager.New<WatchData>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(camerapos_);
      camerapos_ = null;
      pb.ProtobufManager.Reclaim<global::Pb.Vector3PB>(cameraangle_);
      cameraangle_ = null;
      Isopencamera = false;
      Sightbeadvisible = false;
      Comsightbeadvisible = false;
      pb.ProtobufManager.Reclaim<global::Pb.Vector2PB>(uipos_);
      uipos_ = null;
      ItemID = 0;
      Viewrange = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchData(WatchData other) : this() {
      Camerapos = other.camerapos_ != null ? other.Camerapos.Clone() : null;
      Cameraangle = other.cameraangle_ != null ? other.Cameraangle.Clone() : null;
      isopencamera_ = other.isopencamera_;
      sightbeadvisible_ = other.sightbeadvisible_;
      comsightbeadvisible_ = other.comsightbeadvisible_;
      Uipos = other.uipos_ != null ? other.Uipos.Clone() : null;
      itemID_ = other.itemID_;
      viewrange_ = other.viewrange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchData Clone() {
      return new WatchData(this);
    }

    /// <summary>Field number for the "camerapos" field.</summary>
    public const int CameraposFieldNumber = 1;
    private global::Pb.Vector3PB camerapos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Vector3PB Camerapos {
      get { return camerapos_; }
      set {
        camerapos_ = value;
      }
    }

    /// <summary>Field number for the "cameraangle" field.</summary>
    public const int CameraangleFieldNumber = 2;
    private global::Pb.Vector3PB cameraangle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Vector3PB Cameraangle {
      get { return cameraangle_; }
      set {
        cameraangle_ = value;
      }
    }

    /// <summary>Field number for the "isopencamera" field.</summary>
    public const int IsopencameraFieldNumber = 3;
    private bool isopencamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isopencamera {
      get { return isopencamera_; }
      set {
        isopencamera_ = value;
      }
    }

    /// <summary>Field number for the "sightbeadvisible" field.</summary>
    public const int SightbeadvisibleFieldNumber = 4;
    private bool sightbeadvisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sightbeadvisible {
      get { return sightbeadvisible_; }
      set {
        sightbeadvisible_ = value;
      }
    }

    /// <summary>Field number for the "comsightbeadvisible" field.</summary>
    public const int ComsightbeadvisibleFieldNumber = 5;
    private bool comsightbeadvisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Comsightbeadvisible {
      get { return comsightbeadvisible_; }
      set {
        comsightbeadvisible_ = value;
      }
    }

    /// <summary>Field number for the "uipos" field.</summary>
    public const int UiposFieldNumber = 6;
    private global::Pb.Vector2PB uipos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Vector2PB Uipos {
      get { return uipos_; }
      set {
        uipos_ = value;
      }
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 7;
    private int itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "viewrange" field.</summary>
    public const int ViewrangeFieldNumber = 8;
    private float viewrange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Viewrange {
      get { return viewrange_; }
      set {
        viewrange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Camerapos, other.Camerapos)) return false;
      if (!object.Equals(Cameraangle, other.Cameraangle)) return false;
      if (Isopencamera != other.Isopencamera) return false;
      if (Sightbeadvisible != other.Sightbeadvisible) return false;
      if (Comsightbeadvisible != other.Comsightbeadvisible) return false;
      if (!object.Equals(Uipos, other.Uipos)) return false;
      if (ItemID != other.ItemID) return false;
      if (Viewrange != other.Viewrange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (camerapos_ != null) hash ^= Camerapos.GetHashCode();
      if (cameraangle_ != null) hash ^= Cameraangle.GetHashCode();
      if (Isopencamera != false) hash ^= Isopencamera.GetHashCode();
      if (Sightbeadvisible != false) hash ^= Sightbeadvisible.GetHashCode();
      if (Comsightbeadvisible != false) hash ^= Comsightbeadvisible.GetHashCode();
      if (uipos_ != null) hash ^= Uipos.GetHashCode();
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Viewrange != 0F) hash ^= Viewrange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (camerapos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Camerapos);
      }
      if (cameraangle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cameraangle);
      }
      if (Isopencamera != false) {
        output.WriteRawTag(24);
        output.WriteBool(Isopencamera);
      }
      if (Sightbeadvisible != false) {
        output.WriteRawTag(32);
        output.WriteBool(Sightbeadvisible);
      }
      if (Comsightbeadvisible != false) {
        output.WriteRawTag(40);
        output.WriteBool(Comsightbeadvisible);
      }
      if (uipos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Uipos);
      }
      if (ItemID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ItemID);
      }
      if (Viewrange != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Viewrange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (camerapos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camerapos);
      }
      if (cameraangle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cameraangle);
      }
      if (Isopencamera != false) {
        size += 1 + 1;
      }
      if (Sightbeadvisible != false) {
        size += 1 + 1;
      }
      if (Comsightbeadvisible != false) {
        size += 1 + 1;
      }
      if (uipos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uipos);
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Viewrange != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchData other) {
      if (other == null) {
        return;
      }
      if (other.camerapos_ != null) {
        if (camerapos_ == null) {
          camerapos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
        }
        Camerapos.MergeFrom(other.Camerapos);
      }
      if (other.cameraangle_ != null) {
        if (cameraangle_ == null) {
          cameraangle_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
        }
        Cameraangle.MergeFrom(other.Cameraangle);
      }
      if (other.Isopencamera != false) {
        Isopencamera = other.Isopencamera;
      }
      if (other.Sightbeadvisible != false) {
        Sightbeadvisible = other.Sightbeadvisible;
      }
      if (other.Comsightbeadvisible != false) {
        Comsightbeadvisible = other.Comsightbeadvisible;
      }
      if (other.uipos_ != null) {
        if (uipos_ == null) {
          uipos_ = pb.ProtobufManager.New<global::Pb.Vector2PB>();
        }
        Uipos.MergeFrom(other.Uipos);
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Viewrange != 0F) {
        Viewrange = other.Viewrange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (camerapos_ == null) {
              camerapos_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            input.ReadMessage(camerapos_);
            break;
          }
          case 18: {
            if (cameraangle_ == null) {
              cameraangle_ = pb.ProtobufManager.New<global::Pb.Vector3PB>();
            }
            input.ReadMessage(cameraangle_);
            break;
          }
          case 24: {
            Isopencamera = input.ReadBool();
            break;
          }
          case 32: {
            Sightbeadvisible = input.ReadBool();
            break;
          }
          case 40: {
            Comsightbeadvisible = input.ReadBool();
            break;
          }
          case 50: {
            if (uipos_ == null) {
              uipos_ = pb.ProtobufManager.New<global::Pb.Vector2PB>();
            }
            input.ReadMessage(uipos_);
            break;
          }
          case 56: {
            ItemID = input.ReadInt32();
            break;
          }
          case 69: {
            Viewrange = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_Watch : pb::IMessage<C2B_Watch> {
    private static readonly pb::MessageParser<C2B_Watch> _parser = new pb::MessageParser<C2B_Watch>(() => pb.ProtobufManager.New<C2B_Watch>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_Watch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Watch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (WatchCmdCase) {
        case WatchCmdOneofCase.Watchbattle:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_Watch.Types.C2B_WatchBattle>(Watchbattle);
          Watchbattle = null;
          break;
        case WatchCmdOneofCase.Watchdata:
          pb.ProtobufManager.Reclaim<global::Pb.C2B_Watch.Types.C2B_WatchData>(Watchdata);
          Watchdata = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Watch(C2B_Watch other) : this() {
      switch (other.WatchCmdCase) {
        case WatchCmdOneofCase.Watchbattle:
          Watchbattle = other.Watchbattle.Clone();
          break;
        case WatchCmdOneofCase.Watchdata:
          Watchdata = other.Watchdata.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Watch Clone() {
      return new C2B_Watch(this);
    }

    /// <summary>Field number for the "watchbattle" field.</summary>
    public const int WatchbattleFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_Watch.Types.C2B_WatchBattle Watchbattle {
      get { return watchCmdCase_ == WatchCmdOneofCase.Watchbattle ? (global::Pb.C2B_Watch.Types.C2B_WatchBattle) watchCmd_ : null; }
      set {
        watchCmd_ = value;
        watchCmdCase_ = value == null ? WatchCmdOneofCase.None : WatchCmdOneofCase.Watchbattle;
      }
    }

    /// <summary>Field number for the "watchdata" field.</summary>
    public const int WatchdataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.C2B_Watch.Types.C2B_WatchData Watchdata {
      get { return watchCmdCase_ == WatchCmdOneofCase.Watchdata ? (global::Pb.C2B_Watch.Types.C2B_WatchData) watchCmd_ : null; }
      set {
        watchCmd_ = value;
        watchCmdCase_ = value == null ? WatchCmdOneofCase.None : WatchCmdOneofCase.Watchdata;
      }
    }

    private object watchCmd_;
    /// <summary>Enum of possible cases for the "WatchCmd" oneof.</summary>
    public enum WatchCmdOneofCase {
      None = 0,
      Watchbattle = 1,
      Watchdata = 2,
    }
    private WatchCmdOneofCase watchCmdCase_ = WatchCmdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCmdOneofCase WatchCmdCase {
      get { return watchCmdCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWatchCmd() {
      watchCmdCase_ = WatchCmdOneofCase.None;
      watchCmd_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_Watch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_Watch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Watchbattle, other.Watchbattle)) return false;
      if (!object.Equals(Watchdata, other.Watchdata)) return false;
      if (WatchCmdCase != other.WatchCmdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) hash ^= Watchbattle.GetHashCode();
      if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) hash ^= Watchdata.GetHashCode();
      hash ^= (int) watchCmdCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) {
        output.WriteRawTag(10);
        output.WriteMessage(Watchbattle);
      }
      if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) {
        output.WriteRawTag(18);
        output.WriteMessage(Watchdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchbattle);
      }
      if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_Watch other) {
      if (other == null) {
        return;
      }
      switch (other.WatchCmdCase) {
        case WatchCmdOneofCase.Watchbattle:
          Watchbattle = other.Watchbattle;
          break;
        case WatchCmdOneofCase.Watchdata:
          Watchdata = other.Watchdata;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.C2B_Watch.Types.C2B_WatchBattle subBuilder = pb.ProtobufManager.New<global::Pb.C2B_Watch.Types.C2B_WatchBattle>();
            if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) {
              subBuilder.MergeFrom(Watchbattle);
            }
            input.ReadMessage(subBuilder);
            Watchbattle = subBuilder;
            break;
          }
          case 18: {
            global::Pb.C2B_Watch.Types.C2B_WatchData subBuilder = pb.ProtobufManager.New<global::Pb.C2B_Watch.Types.C2B_WatchData>();
            if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) {
              subBuilder.MergeFrom(Watchdata);
            }
            input.ReadMessage(subBuilder);
            Watchdata = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the C2B_Watch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class C2B_WatchBattle : pb::IMessage<C2B_WatchBattle> {
        private static readonly pb::MessageParser<C2B_WatchBattle> _parser = new pb::MessageParser<C2B_WatchBattle>(() => pb.ProtobufManager.New<C2B_WatchBattle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_WatchBattle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_Watch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WatchBattle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Bewatch = 0;
          Watchenemy = false;
          Watchend = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WatchBattle(C2B_WatchBattle other) : this() {
          bewatch_ = other.bewatch_;
          watchenemy_ = other.watchenemy_;
          watchend_ = other.watchend_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WatchBattle Clone() {
          return new C2B_WatchBattle(this);
        }

        /// <summary>Field number for the "bewatch" field.</summary>
        public const int BewatchFieldNumber = 1;
        private ulong bewatch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Bewatch {
          get { return bewatch_; }
          set {
            bewatch_ = value;
          }
        }

        /// <summary>Field number for the "watchenemy" field.</summary>
        public const int WatchenemyFieldNumber = 2;
        private bool watchenemy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Watchenemy {
          get { return watchenemy_; }
          set {
            watchenemy_ = value;
          }
        }

        /// <summary>Field number for the "watchend" field.</summary>
        public const int WatchendFieldNumber = 3;
        private bool watchend_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Watchend {
          get { return watchend_; }
          set {
            watchend_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_WatchBattle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_WatchBattle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bewatch != other.Bewatch) return false;
          if (Watchenemy != other.Watchenemy) return false;
          if (Watchend != other.Watchend) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bewatch != 0UL) hash ^= Bewatch.GetHashCode();
          if (Watchenemy != false) hash ^= Watchenemy.GetHashCode();
          if (Watchend != false) hash ^= Watchend.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bewatch != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Bewatch);
          }
          if (Watchenemy != false) {
            output.WriteRawTag(16);
            output.WriteBool(Watchenemy);
          }
          if (Watchend != false) {
            output.WriteRawTag(24);
            output.WriteBool(Watchend);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bewatch != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bewatch);
          }
          if (Watchenemy != false) {
            size += 1 + 1;
          }
          if (Watchend != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_WatchBattle other) {
          if (other == null) {
            return;
          }
          if (other.Bewatch != 0UL) {
            Bewatch = other.Bewatch;
          }
          if (other.Watchenemy != false) {
            Watchenemy = other.Watchenemy;
          }
          if (other.Watchend != false) {
            Watchend = other.Watchend;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bewatch = input.ReadUInt64();
                break;
              }
              case 16: {
                Watchenemy = input.ReadBool();
                break;
              }
              case 24: {
                Watchend = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class C2B_WatchData : pb::IMessage<C2B_WatchData> {
        private static readonly pb::MessageParser<C2B_WatchData> _parser = new pb::MessageParser<C2B_WatchData>(() => pb.ProtobufManager.New<C2B_WatchData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<C2B_WatchData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.C2B_Watch.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WatchData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          pb.ProtobufManager.Reclaim<global::Pb.WatchData>(data_);
          data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WatchData(C2B_WatchData other) : this() {
          Data = other.data_ != null ? other.Data.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public C2B_WatchData Clone() {
          return new C2B_WatchData(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private global::Pb.WatchData data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.WatchData Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as C2B_WatchData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(C2B_WatchData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Data, other.Data)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (data_ != null) hash ^= Data.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (data_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Data);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(C2B_WatchData other) {
          if (other == null) {
            return;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              data_ = pb.ProtobufManager.New<global::Pb.WatchData>();
            }
            Data.MergeFrom(other.Data);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (data_ == null) {
                  data_ = pb.ProtobufManager.New<global::Pb.WatchData>();
                }
                input.ReadMessage(data_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class B2C_Watch : pb::IMessage<B2C_Watch> {
    private static readonly pb::MessageParser<B2C_Watch> _parser = new pb::MessageParser<B2C_Watch>(() => pb.ProtobufManager.New<B2C_Watch>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Watch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Watch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      switch (WatchCmdCase) {
        case WatchCmdOneofCase.Watchbattle:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Watch.Types.B2C_WatchBattle>(Watchbattle);
          Watchbattle = null;
          break;
        case WatchCmdOneofCase.Watchdata:
          pb.ProtobufManager.Reclaim<global::Pb.B2C_Watch.Types.B2C_WatchData>(Watchdata);
          Watchdata = null;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Watch(B2C_Watch other) : this() {
      switch (other.WatchCmdCase) {
        case WatchCmdOneofCase.Watchbattle:
          Watchbattle = other.Watchbattle.Clone();
          break;
        case WatchCmdOneofCase.Watchdata:
          Watchdata = other.Watchdata.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Watch Clone() {
      return new B2C_Watch(this);
    }

    /// <summary>Field number for the "watchbattle" field.</summary>
    public const int WatchbattleFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Watch.Types.B2C_WatchBattle Watchbattle {
      get { return watchCmdCase_ == WatchCmdOneofCase.Watchbattle ? (global::Pb.B2C_Watch.Types.B2C_WatchBattle) watchCmd_ : null; }
      set {
        watchCmd_ = value;
        watchCmdCase_ = value == null ? WatchCmdOneofCase.None : WatchCmdOneofCase.Watchbattle;
      }
    }

    /// <summary>Field number for the "watchdata" field.</summary>
    public const int WatchdataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_Watch.Types.B2C_WatchData Watchdata {
      get { return watchCmdCase_ == WatchCmdOneofCase.Watchdata ? (global::Pb.B2C_Watch.Types.B2C_WatchData) watchCmd_ : null; }
      set {
        watchCmd_ = value;
        watchCmdCase_ = value == null ? WatchCmdOneofCase.None : WatchCmdOneofCase.Watchdata;
      }
    }

    private object watchCmd_;
    /// <summary>Enum of possible cases for the "WatchCmd" oneof.</summary>
    public enum WatchCmdOneofCase {
      None = 0,
      Watchbattle = 1,
      Watchdata = 2,
    }
    private WatchCmdOneofCase watchCmdCase_ = WatchCmdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCmdOneofCase WatchCmdCase {
      get { return watchCmdCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWatchCmd() {
      watchCmdCase_ = WatchCmdOneofCase.None;
      watchCmd_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Watch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Watch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Watchbattle, other.Watchbattle)) return false;
      if (!object.Equals(Watchdata, other.Watchdata)) return false;
      if (WatchCmdCase != other.WatchCmdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) hash ^= Watchbattle.GetHashCode();
      if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) hash ^= Watchdata.GetHashCode();
      hash ^= (int) watchCmdCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) {
        output.WriteRawTag(10);
        output.WriteMessage(Watchbattle);
      }
      if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) {
        output.WriteRawTag(18);
        output.WriteMessage(Watchdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchbattle);
      }
      if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Watch other) {
      if (other == null) {
        return;
      }
      switch (other.WatchCmdCase) {
        case WatchCmdOneofCase.Watchbattle:
          Watchbattle = other.Watchbattle;
          break;
        case WatchCmdOneofCase.Watchdata:
          Watchdata = other.Watchdata;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Pb.B2C_Watch.Types.B2C_WatchBattle subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Watch.Types.B2C_WatchBattle>();
            if (watchCmdCase_ == WatchCmdOneofCase.Watchbattle) {
              subBuilder.MergeFrom(Watchbattle);
            }
            input.ReadMessage(subBuilder);
            Watchbattle = subBuilder;
            break;
          }
          case 18: {
            global::Pb.B2C_Watch.Types.B2C_WatchData subBuilder = pb.ProtobufManager.New<global::Pb.B2C_Watch.Types.B2C_WatchData>();
            if (watchCmdCase_ == WatchCmdOneofCase.Watchdata) {
              subBuilder.MergeFrom(Watchdata);
            }
            input.ReadMessage(subBuilder);
            Watchdata = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_Watch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class B2C_WatchData : pb::IMessage<B2C_WatchData> {
        private static readonly pb::MessageParser<B2C_WatchData> _parser = new pb::MessageParser<B2C_WatchData>(() => pb.ProtobufManager.New<B2C_WatchData>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_WatchData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Watch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WatchData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Bewatch = 0;
          pb.ProtobufManager.Reclaim<global::Pb.WatchData>(data_);
          data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WatchData(B2C_WatchData other) : this() {
          bewatch_ = other.bewatch_;
          Data = other.data_ != null ? other.Data.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WatchData Clone() {
          return new B2C_WatchData(this);
        }

        /// <summary>Field number for the "bewatch" field.</summary>
        public const int BewatchFieldNumber = 1;
        private ulong bewatch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Bewatch {
          get { return bewatch_; }
          set {
            bewatch_ = value;
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private global::Pb.WatchData data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pb.WatchData Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_WatchData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_WatchData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bewatch != other.Bewatch) return false;
          if (!object.Equals(Data, other.Data)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bewatch != 0UL) hash ^= Bewatch.GetHashCode();
          if (data_ != null) hash ^= Data.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bewatch != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Bewatch);
          }
          if (data_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Data);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bewatch != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bewatch);
          }
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_WatchData other) {
          if (other == null) {
            return;
          }
          if (other.Bewatch != 0UL) {
            Bewatch = other.Bewatch;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              data_ = pb.ProtobufManager.New<global::Pb.WatchData>();
            }
            Data.MergeFrom(other.Data);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bewatch = input.ReadUInt64();
                break;
              }
              case 18: {
                if (data_ == null) {
                  data_ = pb.ProtobufManager.New<global::Pb.WatchData>();
                }
                input.ReadMessage(data_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class B2C_WatchBattle : pb::IMessage<B2C_WatchBattle> {
        private static readonly pb::MessageParser<B2C_WatchBattle> _parser = new pb::MessageParser<B2C_WatchBattle>(() => pb.ProtobufManager.New<B2C_WatchBattle>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<B2C_WatchBattle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_Watch.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WatchBattle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Wather = 0;
          Bewatch = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WatchBattle(B2C_WatchBattle other) : this() {
          wather_ = other.wather_;
          bewatch_ = other.bewatch_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public B2C_WatchBattle Clone() {
          return new B2C_WatchBattle(this);
        }

        /// <summary>Field number for the "wather" field.</summary>
        public const int WatherFieldNumber = 1;
        private ulong wather_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Wather {
          get { return wather_; }
          set {
            wather_ = value;
          }
        }

        /// <summary>Field number for the "bewatch" field.</summary>
        public const int BewatchFieldNumber = 2;
        private ulong bewatch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Bewatch {
          get { return bewatch_; }
          set {
            bewatch_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as B2C_WatchBattle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(B2C_WatchBattle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Wather != other.Wather) return false;
          if (Bewatch != other.Bewatch) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Wather != 0UL) hash ^= Wather.GetHashCode();
          if (Bewatch != 0UL) hash ^= Bewatch.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Wather != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Wather);
          }
          if (Bewatch != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Bewatch);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Wather != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Wather);
          }
          if (Bewatch != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bewatch);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(B2C_WatchBattle other) {
          if (other == null) {
            return;
          }
          if (other.Wather != 0UL) {
            Wather = other.Wather;
          }
          if (other.Bewatch != 0UL) {
            Bewatch = other.Bewatch;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Wather = input.ReadUInt64();
                break;
              }
              case 16: {
                Bewatch = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class B2C_AudioAdd : pb::IMessage<B2C_AudioAdd> {
    private static readonly pb::MessageParser<B2C_AudioAdd> _parser = new pb::MessageParser<B2C_AudioAdd>(() => pb.ProtobufManager.New<B2C_AudioAdd>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_AudioAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AudioAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AudioAdd(B2C_AudioAdd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AudioAdd Clone() {
      return new B2C_AudioAdd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_AudioAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_AudioAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_AudioAdd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class C2B_AudioEnter : pb::IMessage<C2B_AudioEnter> {
    private static readonly pb::MessageParser<C2B_AudioEnter> _parser = new pb::MessageParser<C2B_AudioEnter>(() => pb.ProtobufManager.New<C2B_AudioEnter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_AudioEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_AudioEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Userip = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_AudioEnter(C2B_AudioEnter other) : this() {
      userip_ = other.userip_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_AudioEnter Clone() {
      return new C2B_AudioEnter(this);
    }

    /// <summary>Field number for the "userip" field.</summary>
    public const int UseripFieldNumber = 1;
    private string userip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userip {
      get { return userip_; }
      set {
        userip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_AudioEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_AudioEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userip != other.Userip) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userip.Length != 0) hash ^= Userip.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Userip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_AudioEnter other) {
      if (other == null) {
        return;
      }
      if (other.Userip.Length != 0) {
        Userip = other.Userip;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Userip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_AudioEnter : pb::IMessage<B2C_AudioEnter> {
    private static readonly pb::MessageParser<B2C_AudioEnter> _parser = new pb::MessageParser<B2C_AudioEnter>(() => pb.ProtobufManager.New<B2C_AudioEnter>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_AudioEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AudioEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.B2C_AudioEnter.Types.BattleServer>(battleserver_);
      battleserver_ = null;
      pb.ProtobufManager.Reclaim<global::Pb.B2C_AudioEnter.Types.TeamServer>(teamserver_);
      teamserver_ = null;
      Errno = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AudioEnter(B2C_AudioEnter other) : this() {
      Battleserver = other.battleserver_ != null ? other.Battleserver.Clone() : null;
      Teamserver = other.teamserver_ != null ? other.Teamserver.Clone() : null;
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_AudioEnter Clone() {
      return new B2C_AudioEnter(this);
    }

    /// <summary>Field number for the "battleserver" field.</summary>
    public const int BattleserverFieldNumber = 1;
    private global::Pb.B2C_AudioEnter.Types.BattleServer battleserver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_AudioEnter.Types.BattleServer Battleserver {
      get { return battleserver_; }
      set {
        battleserver_ = value;
      }
    }

    /// <summary>Field number for the "teamserver" field.</summary>
    public const int TeamserverFieldNumber = 2;
    private global::Pb.B2C_AudioEnter.Types.TeamServer teamserver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.B2C_AudioEnter.Types.TeamServer Teamserver {
      get { return teamserver_; }
      set {
        teamserver_ = value;
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 3;
    private uint errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_AudioEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_AudioEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Battleserver, other.Battleserver)) return false;
      if (!object.Equals(Teamserver, other.Teamserver)) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (battleserver_ != null) hash ^= Battleserver.GetHashCode();
      if (teamserver_ != null) hash ^= Teamserver.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (battleserver_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Battleserver);
      }
      if (teamserver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Teamserver);
      }
      if (Errno != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (battleserver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battleserver);
      }
      if (teamserver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Teamserver);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_AudioEnter other) {
      if (other == null) {
        return;
      }
      if (other.battleserver_ != null) {
        if (battleserver_ == null) {
          battleserver_ = pb.ProtobufManager.New<global::Pb.B2C_AudioEnter.Types.BattleServer>();
        }
        Battleserver.MergeFrom(other.Battleserver);
      }
      if (other.teamserver_ != null) {
        if (teamserver_ == null) {
          teamserver_ = pb.ProtobufManager.New<global::Pb.B2C_AudioEnter.Types.TeamServer>();
        }
        Teamserver.MergeFrom(other.Teamserver);
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (battleserver_ == null) {
              battleserver_ = pb.ProtobufManager.New<global::Pb.B2C_AudioEnter.Types.BattleServer>();
            }
            input.ReadMessage(battleserver_);
            break;
          }
          case 18: {
            if (teamserver_ == null) {
              teamserver_ = pb.ProtobufManager.New<global::Pb.B2C_AudioEnter.Types.TeamServer>();
            }
            input.ReadMessage(teamserver_);
            break;
          }
          case 24: {
            Errno = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_AudioEnter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ServerElem : pb::IMessage<ServerElem> {
        private static readonly pb::MessageParser<ServerElem> _parser = new pb::MessageParser<ServerElem>(() => pb.ProtobufManager.New<ServerElem>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerElem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_AudioEnter.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerElem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Type = 0;
          AsIp = "";
          AsTcp = 0;
          AsUdp = 0;
          DgwIp = "";
          DgwPort = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerElem(ServerElem other) : this() {
          type_ = other.type_;
          asIp_ = other.asIp_;
          asTcp_ = other.asTcp_;
          asUdp_ = other.asUdp_;
          dgwIp_ = other.dgwIp_;
          dgwPort_ = other.dgwPort_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerElem Clone() {
          return new ServerElem(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private uint type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "as_ip" field.</summary>
        public const int AsIpFieldNumber = 2;
        private string asIp_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AsIp {
          get { return asIp_; }
          set {
            asIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "as_tcp" field.</summary>
        public const int AsTcpFieldNumber = 3;
        private uint asTcp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AsTcp {
          get { return asTcp_; }
          set {
            asTcp_ = value;
          }
        }

        /// <summary>Field number for the "as_udp" field.</summary>
        public const int AsUdpFieldNumber = 4;
        private uint asUdp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AsUdp {
          get { return asUdp_; }
          set {
            asUdp_ = value;
          }
        }

        /// <summary>Field number for the "dgw_ip" field.</summary>
        public const int DgwIpFieldNumber = 5;
        private string dgwIp_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DgwIp {
          get { return dgwIp_; }
          set {
            dgwIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "dgw_port" field.</summary>
        public const int DgwPortFieldNumber = 6;
        private uint dgwPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DgwPort {
          get { return dgwPort_; }
          set {
            dgwPort_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ServerElem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerElem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (AsIp != other.AsIp) return false;
          if (AsTcp != other.AsTcp) return false;
          if (AsUdp != other.AsUdp) return false;
          if (DgwIp != other.DgwIp) return false;
          if (DgwPort != other.DgwPort) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (AsIp.Length != 0) hash ^= AsIp.GetHashCode();
          if (AsTcp != 0) hash ^= AsTcp.GetHashCode();
          if (AsUdp != 0) hash ^= AsUdp.GetHashCode();
          if (DgwIp.Length != 0) hash ^= DgwIp.GetHashCode();
          if (DgwPort != 0) hash ^= DgwPort.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Type);
          }
          if (AsIp.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AsIp);
          }
          if (AsTcp != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(AsTcp);
          }
          if (AsUdp != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(AsUdp);
          }
          if (DgwIp.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(DgwIp);
          }
          if (DgwPort != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(DgwPort);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (AsIp.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AsIp);
          }
          if (AsTcp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AsTcp);
          }
          if (AsUdp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AsUdp);
          }
          if (DgwIp.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DgwIp);
          }
          if (DgwPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DgwPort);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerElem other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.AsIp.Length != 0) {
            AsIp = other.AsIp;
          }
          if (other.AsTcp != 0) {
            AsTcp = other.AsTcp;
          }
          if (other.AsUdp != 0) {
            AsUdp = other.AsUdp;
          }
          if (other.DgwIp.Length != 0) {
            DgwIp = other.DgwIp;
          }
          if (other.DgwPort != 0) {
            DgwPort = other.DgwPort;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Type = input.ReadUInt32();
                break;
              }
              case 18: {
                AsIp = input.ReadString();
                break;
              }
              case 24: {
                AsTcp = input.ReadUInt32();
                break;
              }
              case 32: {
                AsUdp = input.ReadUInt32();
                break;
              }
              case 42: {
                DgwIp = input.ReadString();
                break;
              }
              case 48: {
                DgwPort = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BattleServer : pb::IMessage<BattleServer> {
        private static readonly pb::MessageParser<BattleServer> _parser = new pb::MessageParser<BattleServer>(() => pb.ProtobufManager.New<BattleServer>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BattleServer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_AudioEnter.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BattleServer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Password = "";
          for (int i = 0; i < servers_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_AudioEnter.Types.ServerElem>(servers_[i]);
          }
          servers_.Clear();
          Sid = 0;
          Csid = 0;
          Bchid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BattleServer(BattleServer other) : this() {
          password_ = other.password_;
          servers_ = other.servers_.Clone();
          sid_ = other.sid_;
          csid_ = other.csid_;
          bchid_ = other.bchid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BattleServer Clone() {
          return new BattleServer(this);
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 1;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "servers" field.</summary>
        public const int ServersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Pb.B2C_AudioEnter.Types.ServerElem> _repeated_servers_codec
            = pb::FieldCodec.ForMessage(18, global::Pb.B2C_AudioEnter.Types.ServerElem.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_AudioEnter.Types.ServerElem> servers_ = new pbc::RepeatedField<global::Pb.B2C_AudioEnter.Types.ServerElem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_AudioEnter.Types.ServerElem> Servers {
          get { return servers_; }
        }

        /// <summary>Field number for the "sid" field.</summary>
        public const int SidFieldNumber = 3;
        private uint sid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Sid {
          get { return sid_; }
          set {
            sid_ = value;
          }
        }

        /// <summary>Field number for the "csid" field.</summary>
        public const int CsidFieldNumber = 4;
        private uint csid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Csid {
          get { return csid_; }
          set {
            csid_ = value;
          }
        }

        /// <summary>Field number for the "bchid" field.</summary>
        public const int BchidFieldNumber = 5;
        private uint bchid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Bchid {
          get { return bchid_; }
          set {
            bchid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BattleServer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BattleServer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Password != other.Password) return false;
          if(!servers_.Equals(other.servers_)) return false;
          if (Sid != other.Sid) return false;
          if (Csid != other.Csid) return false;
          if (Bchid != other.Bchid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          hash ^= servers_.GetHashCode();
          if (Sid != 0) hash ^= Sid.GetHashCode();
          if (Csid != 0) hash ^= Csid.GetHashCode();
          if (Bchid != 0) hash ^= Bchid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Password.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Password);
          }
          servers_.WriteTo(output, _repeated_servers_codec);
          if (Sid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Sid);
          }
          if (Csid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Csid);
          }
          if (Bchid != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Bchid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          size += servers_.CalculateSize(_repeated_servers_codec);
          if (Sid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sid);
          }
          if (Csid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Csid);
          }
          if (Bchid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bchid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BattleServer other) {
          if (other == null) {
            return;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
          servers_.Add(other.servers_);
          if (other.Sid != 0) {
            Sid = other.Sid;
          }
          if (other.Csid != 0) {
            Csid = other.Csid;
          }
          if (other.Bchid != 0) {
            Bchid = other.Bchid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Password = input.ReadString();
                break;
              }
              case 18: {
                servers_.AddEntriesFrom(input, _repeated_servers_codec);
                break;
              }
              case 24: {
                Sid = input.ReadUInt32();
                break;
              }
              case 32: {
                Csid = input.ReadUInt32();
                break;
              }
              case 40: {
                Bchid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TeamServer : pb::IMessage<TeamServer> {
        private static readonly pb::MessageParser<TeamServer> _parser = new pb::MessageParser<TeamServer>(() => pb.ProtobufManager.New<TeamServer>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamServer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_AudioEnter.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamServer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Password = "";
          for (int i = 0; i < servers_.Count; ++i)
          {
            pb.ProtobufManager.Reclaim<global::Pb.B2C_AudioEnter.Types.ServerElem>(servers_[i]);
          }
          servers_.Clear();
          Sid = 0;
          Csid = 0;
          Tchid = 0;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamServer(TeamServer other) : this() {
          password_ = other.password_;
          servers_ = other.servers_.Clone();
          sid_ = other.sid_;
          csid_ = other.csid_;
          tchid_ = other.tchid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamServer Clone() {
          return new TeamServer(this);
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 1;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "servers" field.</summary>
        public const int ServersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Pb.B2C_AudioEnter.Types.ServerElem> _repeated_servers_codec
            = pb::FieldCodec.ForMessage(18, global::Pb.B2C_AudioEnter.Types.ServerElem.Parser);
        private readonly pbc::RepeatedField<global::Pb.B2C_AudioEnter.Types.ServerElem> servers_ = new pbc::RepeatedField<global::Pb.B2C_AudioEnter.Types.ServerElem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pb.B2C_AudioEnter.Types.ServerElem> Servers {
          get { return servers_; }
        }

        /// <summary>Field number for the "sid" field.</summary>
        public const int SidFieldNumber = 3;
        private uint sid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Sid {
          get { return sid_; }
          set {
            sid_ = value;
          }
        }

        /// <summary>Field number for the "csid" field.</summary>
        public const int CsidFieldNumber = 4;
        private uint csid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Csid {
          get { return csid_; }
          set {
            csid_ = value;
          }
        }

        /// <summary>Field number for the "tchid" field.</summary>
        public const int TchidFieldNumber = 5;
        private uint tchid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Tchid {
          get { return tchid_; }
          set {
            tchid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TeamServer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamServer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Password != other.Password) return false;
          if(!servers_.Equals(other.servers_)) return false;
          if (Sid != other.Sid) return false;
          if (Csid != other.Csid) return false;
          if (Tchid != other.Tchid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          hash ^= servers_.GetHashCode();
          if (Sid != 0) hash ^= Sid.GetHashCode();
          if (Csid != 0) hash ^= Csid.GetHashCode();
          if (Tchid != 0) hash ^= Tchid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Password.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Password);
          }
          servers_.WriteTo(output, _repeated_servers_codec);
          if (Sid != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Sid);
          }
          if (Csid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Csid);
          }
          if (Tchid != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Tchid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          size += servers_.CalculateSize(_repeated_servers_codec);
          if (Sid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sid);
          }
          if (Csid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Csid);
          }
          if (Tchid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tchid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamServer other) {
          if (other == null) {
            return;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
          servers_.Add(other.servers_);
          if (other.Sid != 0) {
            Sid = other.Sid;
          }
          if (other.Csid != 0) {
            Csid = other.Csid;
          }
          if (other.Tchid != 0) {
            Tchid = other.Tchid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Password = input.ReadString();
                break;
              }
              case 18: {
                servers_.AddEntriesFrom(input, _repeated_servers_codec);
                break;
              }
              case 24: {
                Sid = input.ReadUInt32();
                break;
              }
              case 32: {
                Csid = input.ReadUInt32();
                break;
              }
              case 40: {
                Tchid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class C2B_Chat : pb::IMessage<C2B_Chat> {
    private static readonly pb::MessageParser<C2B_Chat> _parser = new pb::MessageParser<C2B_Chat>(() => pb.ProtobufManager.New<C2B_Chat>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Data = "";
      Type = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Chat(C2B_Chat other) : this() {
      data_ = other.data_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_Chat Clone() {
      return new C2B_Chat(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Pb.BattleChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BattleChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_Chat other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Pb.BattleChatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_Chat : pb::IMessage<B2C_Chat> {
    private static readonly pb::MessageParser<B2C_Chat> _parser = new pb::MessageParser<B2C_Chat>(() => pb.ProtobufManager.New<B2C_Chat>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Data = "";
      Sender = 0;
      Type = 0;
      Name = "";
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Chat(B2C_Chat other) : this() {
      data_ = other.data_;
      sender_ = other.sender_;
      type_ = other.type_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Chat Clone() {
      return new B2C_Chat(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private uint sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Pb.BattleChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.BattleChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Sender != other.Sender) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Sender != 0) hash ^= Sender.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (Sender != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sender);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Sender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sender);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Chat other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Sender != 0) {
        Sender = other.Sender;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
          case 16: {
            Sender = input.ReadUInt32();
            break;
          }
          case 24: {
            type_ = (global::Pb.BattleChatType) input.ReadEnum();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_Test : pb::IMessage<B2C_Test> {
    private static readonly pb::MessageParser<B2C_Test> _parser = new pb::MessageParser<B2C_Test>(() => pb.ProtobufManager.New<B2C_Test>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_Test> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Test() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Data = pb::ByteString.Empty;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Test(B2C_Test other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_Test Clone() {
      return new B2C_Test(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_Test);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_Test other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_Test other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_ReplaceEquip : pb::IMessage<C2B_ReplaceEquip> {
    private static readonly pb::MessageParser<C2B_ReplaceEquip> _parser = new pb::MessageParser<C2B_ReplaceEquip>(() => pb.ProtobufManager.New<C2B_ReplaceEquip>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_ReplaceEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ReplaceEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Olduid = 0;
      Newuid = 0;
      Finish = false;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ReplaceEquip(C2B_ReplaceEquip other) : this() {
      olduid_ = other.olduid_;
      newuid_ = other.newuid_;
      finish_ = other.finish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ReplaceEquip Clone() {
      return new C2B_ReplaceEquip(this);
    }

    /// <summary>Field number for the "olduid" field.</summary>
    public const int OlduidFieldNumber = 1;
    private ulong olduid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Olduid {
      get { return olduid_; }
      set {
        olduid_ = value;
      }
    }

    /// <summary>Field number for the "newuid" field.</summary>
    public const int NewuidFieldNumber = 2;
    private ulong newuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Newuid {
      get { return newuid_; }
      set {
        newuid_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 3;
    private bool finish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_ReplaceEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_ReplaceEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Olduid != other.Olduid) return false;
      if (Newuid != other.Newuid) return false;
      if (Finish != other.Finish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Olduid != 0UL) hash ^= Olduid.GetHashCode();
      if (Newuid != 0UL) hash ^= Newuid.GetHashCode();
      if (Finish != false) hash ^= Finish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Olduid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Olduid);
      }
      if (Newuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Newuid);
      }
      if (Finish != false) {
        output.WriteRawTag(24);
        output.WriteBool(Finish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Olduid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Olduid);
      }
      if (Newuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Newuid);
      }
      if (Finish != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_ReplaceEquip other) {
      if (other == null) {
        return;
      }
      if (other.Olduid != 0UL) {
        Olduid = other.Olduid;
      }
      if (other.Newuid != 0UL) {
        Newuid = other.Newuid;
      }
      if (other.Finish != false) {
        Finish = other.Finish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Olduid = input.ReadUInt64();
            break;
          }
          case 16: {
            Newuid = input.ReadUInt64();
            break;
          }
          case 24: {
            Finish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_BuyItem : pb::IMessage<C2B_BuyItem> {
    private static readonly pb::MessageParser<C2B_BuyItem> _parser = new pb::MessageParser<C2B_BuyItem>(() => pb.ProtobufManager.New<C2B_BuyItem>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_BuyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BuyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Olditemuid = 0;
      Newitemuid = 0;
      Itemprice = 0;
      Blackshop = false;
      Index = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BuyItem(C2B_BuyItem other) : this() {
      olditemuid_ = other.olditemuid_;
      newitemuid_ = other.newitemuid_;
      itemprice_ = other.itemprice_;
      blackshop_ = other.blackshop_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_BuyItem Clone() {
      return new C2B_BuyItem(this);
    }

    /// <summary>Field number for the "olditemuid" field.</summary>
    public const int OlditemuidFieldNumber = 1;
    private ulong olditemuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Olditemuid {
      get { return olditemuid_; }
      set {
        olditemuid_ = value;
      }
    }

    /// <summary>Field number for the "newitemuid" field.</summary>
    public const int NewitemuidFieldNumber = 2;
    private ulong newitemuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Newitemuid {
      get { return newitemuid_; }
      set {
        newitemuid_ = value;
      }
    }

    /// <summary>Field number for the "itemprice" field.</summary>
    public const int ItempriceFieldNumber = 3;
    private uint itemprice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemprice {
      get { return itemprice_; }
      set {
        itemprice_ = value;
      }
    }

    /// <summary>Field number for the "blackshop" field.</summary>
    public const int BlackshopFieldNumber = 4;
    private bool blackshop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blackshop {
      get { return blackshop_; }
      set {
        blackshop_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 5;
    private global::Pb.PackagePosType index_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.PackagePosType Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_BuyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_BuyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Olditemuid != other.Olditemuid) return false;
      if (Newitemuid != other.Newitemuid) return false;
      if (Itemprice != other.Itemprice) return false;
      if (Blackshop != other.Blackshop) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Olditemuid != 0UL) hash ^= Olditemuid.GetHashCode();
      if (Newitemuid != 0UL) hash ^= Newitemuid.GetHashCode();
      if (Itemprice != 0) hash ^= Itemprice.GetHashCode();
      if (Blackshop != false) hash ^= Blackshop.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Olditemuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Olditemuid);
      }
      if (Newitemuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Newitemuid);
      }
      if (Itemprice != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Itemprice);
      }
      if (Blackshop != false) {
        output.WriteRawTag(32);
        output.WriteBool(Blackshop);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Olditemuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Olditemuid);
      }
      if (Newitemuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Newitemuid);
      }
      if (Itemprice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemprice);
      }
      if (Blackshop != false) {
        size += 1 + 1;
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_BuyItem other) {
      if (other == null) {
        return;
      }
      if (other.Olditemuid != 0UL) {
        Olditemuid = other.Olditemuid;
      }
      if (other.Newitemuid != 0UL) {
        Newitemuid = other.Newitemuid;
      }
      if (other.Itemprice != 0) {
        Itemprice = other.Itemprice;
      }
      if (other.Blackshop != false) {
        Blackshop = other.Blackshop;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Olditemuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Newitemuid = input.ReadUInt64();
            break;
          }
          case 24: {
            Itemprice = input.ReadUInt32();
            break;
          }
          case 32: {
            Blackshop = input.ReadBool();
            break;
          }
          case 40: {
            index_ = (global::Pb.PackagePosType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_BuyItem : pb::IMessage<B2C_BuyItem> {
    private static readonly pb::MessageParser<B2C_BuyItem> _parser = new pb::MessageParser<B2C_BuyItem>(() => pb.ProtobufManager.New<B2C_BuyItem>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_BuyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BuyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Buyitemuid = 0;
      Error = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BuyItem(B2C_BuyItem other) : this() {
      buyitemuid_ = other.buyitemuid_;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_BuyItem Clone() {
      return new B2C_BuyItem(this);
    }

    /// <summary>Field number for the "buyitemuid" field.</summary>
    public const int BuyitemuidFieldNumber = 1;
    private ulong buyitemuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Buyitemuid {
      get { return buyitemuid_; }
      set {
        buyitemuid_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private uint error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_BuyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_BuyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Buyitemuid != other.Buyitemuid) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Buyitemuid != 0UL) hash ^= Buyitemuid.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Buyitemuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Buyitemuid);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Buyitemuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Buyitemuid);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_BuyItem other) {
      if (other == null) {
        return;
      }
      if (other.Buyitemuid != 0UL) {
        Buyitemuid = other.Buyitemuid;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Buyitemuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Error = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_SupplySelect : pb::IMessage<B2C_SupplySelect> {
    private static readonly pb::MessageParser<B2C_SupplySelect> _parser = new pb::MessageParser<B2C_SupplySelect>(() => pb.ProtobufManager.New<B2C_SupplySelect>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_SupplySelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_SupplySelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      pb.ProtobufManager.Reclaim<global::Pb.SettleReward>(reward_);
      reward_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_SupplySelect(B2C_SupplySelect other) : this() {
      Reward = other.reward_ != null ? other.Reward.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_SupplySelect Clone() {
      return new B2C_SupplySelect(this);
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private global::Pb.SettleReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.SettleReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_SupplySelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_SupplySelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reward, other.Reward)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reward_ != null) hash ^= Reward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_SupplySelect other) {
      if (other == null) {
        return;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          reward_ = pb.ProtobufManager.New<global::Pb.SettleReward>();
        }
        Reward.MergeFrom(other.Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reward_ == null) {
              reward_ = pb.ProtobufManager.New<global::Pb.SettleReward>();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_EnterPvPVote : pb::IMessage<C2B_EnterPvPVote> {
    private static readonly pb::MessageParser<C2B_EnterPvPVote> _parser = new pb::MessageParser<C2B_EnterPvPVote>(() => pb.ProtobufManager.New<C2B_EnterPvPVote>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_EnterPvPVote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_EnterPvPVote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Enter = false;
      Collid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_EnterPvPVote(C2B_EnterPvPVote other) : this() {
      enter_ = other.enter_;
      collid_ = other.collid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_EnterPvPVote Clone() {
      return new C2B_EnterPvPVote(this);
    }

    /// <summary>Field number for the "enter" field.</summary>
    public const int EnterFieldNumber = 1;
    private bool enter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enter {
      get { return enter_; }
      set {
        enter_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 2;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_EnterPvPVote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_EnterPvPVote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enter != other.Enter) return false;
      if (Collid != other.Collid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enter != false) hash ^= Enter.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enter != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enter);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Collid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enter != false) {
        size += 1 + 1;
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_EnterPvPVote other) {
      if (other == null) {
        return;
      }
      if (other.Enter != false) {
        Enter = other.Enter;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enter = input.ReadBool();
            break;
          }
          case 16: {
            Collid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_EnterPvPVote : pb::IMessage<B2C_EnterPvPVote> {
    private static readonly pb::MessageParser<B2C_EnterPvPVote> _parser = new pb::MessageParser<B2C_EnterPvPVote>(() => pb.ProtobufManager.New<B2C_EnterPvPVote>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_EnterPvPVote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EnterPvPVote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Promote = 0;
      Collid = 0;
      for (int i = 0; i < info_.Count; ++i)
      {
        pb.ProtobufManager.Reclaim<global::Pb.B2C_EnterPvPVote.Types.VoteInfo>(info_[i]);
      }
      info_.Clear();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EnterPvPVote(B2C_EnterPvPVote other) : this() {
      promote_ = other.promote_;
      collid_ = other.collid_;
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_EnterPvPVote Clone() {
      return new B2C_EnterPvPVote(this);
    }

    /// <summary>Field number for the "promote" field.</summary>
    public const int PromoteFieldNumber = 1;
    private ulong promote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Promote {
      get { return promote_; }
      set {
        promote_ = value;
      }
    }

    /// <summary>Field number for the "collid" field.</summary>
    public const int CollidFieldNumber = 2;
    private ulong collid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Collid {
      get { return collid_; }
      set {
        collid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.B2C_EnterPvPVote.Types.VoteInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.B2C_EnterPvPVote.Types.VoteInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.B2C_EnterPvPVote.Types.VoteInfo> info_ = new pbc::RepeatedField<global::Pb.B2C_EnterPvPVote.Types.VoteInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.B2C_EnterPvPVote.Types.VoteInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_EnterPvPVote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_EnterPvPVote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Promote != other.Promote) return false;
      if (Collid != other.Collid) return false;
      if(!info_.Equals(other.info_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Promote != 0UL) hash ^= Promote.GetHashCode();
      if (Collid != 0UL) hash ^= Collid.GetHashCode();
      hash ^= info_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Promote != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Promote);
      }
      if (Collid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Collid);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Promote != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Promote);
      }
      if (Collid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Collid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_EnterPvPVote other) {
      if (other == null) {
        return;
      }
      if (other.Promote != 0UL) {
        Promote = other.Promote;
      }
      if (other.Collid != 0UL) {
        Collid = other.Collid;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Promote = input.ReadUInt64();
            break;
          }
          case 16: {
            Collid = input.ReadUInt64();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the B2C_EnterPvPVote message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class VoteInfo : pb::IMessage<VoteInfo> {
        private static readonly pb::MessageParser<VoteInfo> _parser = new pb::MessageParser<VoteInfo>(() => pb.ProtobufManager.New<VoteInfo>());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VoteInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pb.B2C_EnterPvPVote.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VoteInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          Voter = 0;
          Enter = false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VoteInfo(VoteInfo other) : this() {
          voter_ = other.voter_;
          enter_ = other.enter_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VoteInfo Clone() {
          return new VoteInfo(this);
        }

        /// <summary>Field number for the "voter" field.</summary>
        public const int VoterFieldNumber = 1;
        private ulong voter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Voter {
          get { return voter_; }
          set {
            voter_ = value;
          }
        }

        /// <summary>Field number for the "enter" field.</summary>
        public const int EnterFieldNumber = 2;
        private bool enter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Enter {
          get { return enter_; }
          set {
            enter_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VoteInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VoteInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Voter != other.Voter) return false;
          if (Enter != other.Enter) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Voter != 0UL) hash ^= Voter.GetHashCode();
          if (Enter != false) hash ^= Enter.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Voter != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Voter);
          }
          if (Enter != false) {
            output.WriteRawTag(16);
            output.WriteBool(Enter);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Voter != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Voter);
          }
          if (Enter != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VoteInfo other) {
          if (other == null) {
            return;
          }
          if (other.Voter != 0UL) {
            Voter = other.Voter;
          }
          if (other.Enter != false) {
            Enter = other.Enter;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Voter = input.ReadUInt64();
                break;
              }
              case 16: {
                Enter = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class C2B_PvPCharChoice : pb::IMessage<C2B_PvPCharChoice> {
    private static readonly pb::MessageParser<C2B_PvPCharChoice> _parser = new pb::MessageParser<C2B_PvPCharChoice>(() => pb.ProtobufManager.New<C2B_PvPCharChoice>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_PvPCharChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PvPCharChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Charid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PvPCharChoice(C2B_PvPCharChoice other) : this() {
      charid_ = other.charid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_PvPCharChoice Clone() {
      return new C2B_PvPCharChoice(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_PvPCharChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_PvPCharChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0) hash ^= Charid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Charid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_PvPCharChoice other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_PvPCharChoice : pb::IMessage<B2C_PvPCharChoice> {
    private static readonly pb::MessageParser<B2C_PvPCharChoice> _parser = new pb::MessageParser<B2C_PvPCharChoice>(() => pb.ProtobufManager.New<B2C_PvPCharChoice>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_PvPCharChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_PvPCharChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Roleid = 0;
      Charid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_PvPCharChoice(B2C_PvPCharChoice other) : this() {
      roleid_ = other.roleid_;
      charid_ = other.charid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_PvPCharChoice Clone() {
      return new B2C_PvPCharChoice(this);
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 2;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_PvPCharChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_PvPCharChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roleid != other.Roleid) return false;
      if (Charid != other.Charid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roleid != 0UL) hash ^= Roleid.GetHashCode();
      if (Charid != 0) hash ^= Charid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
      if (Charid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Charid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_PvPCharChoice other) {
      if (other == null) {
        return;
      }
      if (other.Roleid != 0UL) {
        Roleid = other.Roleid;
      }
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
          case 16: {
            Charid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_ItemError : pb::IMessage<B2C_ItemError> {
    private static readonly pb::MessageParser<B2C_ItemError> _parser = new pb::MessageParser<B2C_ItemError>(() => pb.ProtobufManager.New<B2C_ItemError>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_ItemError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ItemError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Error = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ItemError(B2C_ItemError other) : this() {
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ItemError Clone() {
      return new B2C_ItemError(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private uint error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_ItemError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_ItemError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_ItemError other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_LevelUpChooseTalent : pb::IMessage<B2C_LevelUpChooseTalent> {
    private static readonly pb::MessageParser<B2C_LevelUpChooseTalent> _parser = new pb::MessageParser<B2C_LevelUpChooseTalent>(() => pb.ProtobufManager.New<B2C_LevelUpChooseTalent>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_LevelUpChooseTalent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_LevelUpChooseTalent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Level = 0;
      talentidx_.Clear();
      Charid = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_LevelUpChooseTalent(B2C_LevelUpChooseTalent other) : this() {
      level_ = other.level_;
      talentidx_ = other.talentidx_.Clone();
      charid_ = other.charid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_LevelUpChooseTalent Clone() {
      return new B2C_LevelUpChooseTalent(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "talentidx" field.</summary>
    public const int TalentidxFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_talentidx_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> talentidx_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Talentidx {
      get { return talentidx_; }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private uint charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_LevelUpChooseTalent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_LevelUpChooseTalent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if(!talentidx_.Equals(other.talentidx_)) return false;
      if (Charid != other.Charid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= talentidx_.GetHashCode();
      if (Charid != 0) hash ^= Charid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      talentidx_.WriteTo(output, _repeated_talentidx_codec);
      if (Charid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Charid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += talentidx_.CalculateSize(_repeated_talentidx_codec);
      if (Charid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Charid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_LevelUpChooseTalent other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      talentidx_.Add(other.talentidx_);
      if (other.Charid != 0) {
        Charid = other.Charid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            talentidx_.AddEntriesFrom(input, _repeated_talentidx_codec);
            break;
          }
          case 24: {
            Charid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_LevelUpChooseTalent : pb::IMessage<C2B_LevelUpChooseTalent> {
    private static readonly pb::MessageParser<C2B_LevelUpChooseTalent> _parser = new pb::MessageParser<C2B_LevelUpChooseTalent>(() => pb.ProtobufManager.New<C2B_LevelUpChooseTalent>());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_LevelUpChooseTalent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.BattlemsgReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_LevelUpChooseTalent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      Idx = 0;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_LevelUpChooseTalent(C2B_LevelUpChooseTalent other) : this() {
      idx_ = other.idx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_LevelUpChooseTalent Clone() {
      return new C2B_LevelUpChooseTalent(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_LevelUpChooseTalent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_LevelUpChooseTalent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idx != 0) hash ^= Idx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_LevelUpChooseTalent other) {
      if (other == null) {
        return;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
